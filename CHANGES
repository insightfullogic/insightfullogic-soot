Improvements in Release 1 (version 1.0.0)

Some of these changes occured earlier but are only mentioned now.

1. Changed the version numbering scheme to follow the Linux
version numbering scheme.

2. Added warning for unconsumed phase options.

3. Fixed bug with original name recovery.

4. Added documentation.

5. Fixed another aggregation bug where multiple field refs between
def, use were not correctly handled.

6. Added static class synchronizer.

7. Changed format of Jimple source again, now removing the dots
for keywords.

8. Fixed issue with absolute paths in dos/windows

Improvements in 021400

1. Fixed the SootResolver so that it displays the name of
the missing classfile before quitting.

2. Merged in partial code for Partial Redundancy Elimination
(not working yet).

3. Added more documentation comments.  (Thanks patrice!)

4. Added EquivTo interface, made all Jimple Values implement 
EquivTo, and provided EquivalentValue wrapper objects.  Using an
EquivalentValue allows Collections to see structurally equal 
Values as satisfying .equals().  This is not universally useful;
for instance, the Units chain should not use EquivalentValues!

5. Added jikes.def and javac.def files.  Invoking "jams foo"
will copy the .dat files from the src/ directories to the classes/
directories.

6. Patrice added some support for a framework allowing Baf peephole
optimizations to be added in a uniform manner.

7. Added soot.PackAdjuster and soot.jimple.StmtPrinter classes.
These classes can be overridden by placing custom classes with the 
same names earlier in the CLASSPATH.  This permits external classes
to be called by Soot at strategic moments in Soot's execution.

Improvements in 1.beta.6

1. A Jimple parser has been added to the Soot framework.  Soot can
now read both .class files and .jimple files (produced by the
"--jimple" option).  Parsing .jimple files is faster than
reading .class files, and these files can be modified easily in a text
editor.

2. Different phases of Sootification can now be passed command-line
options.  For instance, the static inliner (si) in the
whole-jimple optimization pack (wjop) can told that it is to
expand code by no more than a factor of 5, by giving the following
command-line option:  -p wjop.si expansion-factor:5.

3. Some whole-program (excluding library) optimizations are
included, namely a static method binder and a static inliner.  The
inliner is enabled by default when the -W option is given.
It can be disabled with the option  -p wjop.si disabled:true -p
wjop.smb disabled:false.

Improvements in 1.beta.5

1. Baf, a streamlined form of bytecode has been added to Soot.  This is
useful for performing low level bytecode optimizations.  We can produce code
which is as good as javac now with the option "--final-rep baf".
Unfortunately this option creates bytecode which is different than what the Java
Virtual Machine is used to and so causes the JVM to crash.  For this reason, the
option is not enabled by default.

2. Major restructuring of the API has taken place.

3. The entire SpecJVM98 suite can be processed by Soot correctly, as well as
numerous other Java programs.

4. Process times are reasonable: a program can be usually put through Soot
within 2.5 times the execution time of javac on the original program.
