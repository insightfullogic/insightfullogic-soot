/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.node;

import java.util.*;
import soot.jimple.parser.analysis.*;

public final class AClzzConstant extends PConstant
{
    private TCls _cls_;
    private TStringConstant _stringConstant_;

    public AClzzConstant()
    {
    }

    public AClzzConstant(
        TCls _cls_,
        TStringConstant _stringConstant_)
    {
        setCls(_cls_);

        setStringConstant(_stringConstant_);

    }
    public Object clone()
    {
        return new AClzzConstant(
            (TCls) cloneNode(_cls_),
            (TStringConstant) cloneNode(_stringConstant_));
    }

    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAClzzConstant(this);
    }

    public TCls getCls()
    {
        return _cls_;
    }

    public void setCls(TCls node)
    {
        if(_cls_ != null)
        {
            _cls_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _cls_ = node;
    }

    public TStringConstant getStringConstant()
    {
        return _stringConstant_;
    }

    public void setStringConstant(TStringConstant node)
    {
        if(_stringConstant_ != null)
        {
            _stringConstant_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        _stringConstant_ = node;
    }

    public String toString()
    {
        return ""
            + toString(_cls_)
            + toString(_stringConstant_);
    }

    void removeChild(Node child)
    {
        if(_cls_ == child)
        {
            _cls_ = null;
            return;
        }

        if(_stringConstant_ == child)
        {
            _stringConstant_ = null;
            return;
        }

    }

    void replaceChild(Node oldChild, Node newChild)
    {
        if(_cls_ == oldChild)
        {
            setCls((TCls) newChild);
            return;
        }

        if(_stringConstant_ == oldChild)
        {
            setStringConstant((TStringConstant) newChild);
            return;
        }

    }
}
