/* This file was generated by SableCC (http://www.sablecc.org/). */

package soot.jimple.parser.lexer;

import java.io.*;
import java.util.*;
import soot.jimple.parser.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("The file \"lexer.dat\" is either missing or corrupted.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 85:
                        {
                            Token token = new85(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 86:
                        {
                            Token token = new86(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 87:
                        {
                            Token token = new87(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 88:
                        {
                            Token token = new88(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 89:
                        {
                            Token token = new89(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 90:
                        {
                            Token token = new90(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 91:
                        {
                            Token token = new91(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 92:
                        {
                            Token token = new92(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 93:
                        {
                            Token token = new93(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 94:
                        {
                            Token token = new94(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 95:
                        {
                            Token token = new95(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 96:
                        {
                            Token token = new96(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 97:
                        {
                            Token token = new97(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 98:
                        {
                            Token token = new98(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TIgnored(text, line, pos); }
    Token new1(int line, int pos) { return new TAbstract(line, pos); }
    Token new2(int line, int pos) { return new TFinal(line, pos); }
    Token new3(int line, int pos) { return new TNative(line, pos); }
    Token new4(int line, int pos) { return new TPublic(line, pos); }
    Token new5(int line, int pos) { return new TProtected(line, pos); }
    Token new6(int line, int pos) { return new TPrivate(line, pos); }
    Token new7(int line, int pos) { return new TStatic(line, pos); }
    Token new8(int line, int pos) { return new TSynchronized(line, pos); }
    Token new9(int line, int pos) { return new TTransient(line, pos); }
    Token new10(int line, int pos) { return new TVolatile(line, pos); }
    Token new11(int line, int pos) { return new TEnum(line, pos); }
    Token new12(int line, int pos) { return new TAnnotation(line, pos); }
    Token new13(int line, int pos) { return new TClass(line, pos); }
    Token new14(int line, int pos) { return new TInterface(line, pos); }
    Token new15(int line, int pos) { return new TVoid(line, pos); }
    Token new16(int line, int pos) { return new TBoolean(line, pos); }
    Token new17(int line, int pos) { return new TByte(line, pos); }
    Token new18(int line, int pos) { return new TShort(line, pos); }
    Token new19(int line, int pos) { return new TChar(line, pos); }
    Token new20(int line, int pos) { return new TInt(line, pos); }
    Token new21(int line, int pos) { return new TLong(line, pos); }
    Token new22(int line, int pos) { return new TFloat(line, pos); }
    Token new23(int line, int pos) { return new TDouble(line, pos); }
    Token new24(int line, int pos) { return new TNullType(line, pos); }
    Token new25(int line, int pos) { return new TUnknown(line, pos); }
    Token new26(int line, int pos) { return new TExtends(line, pos); }
    Token new27(int line, int pos) { return new TImplements(line, pos); }
    Token new28(int line, int pos) { return new TBreakpoint(line, pos); }
    Token new29(int line, int pos) { return new TCase(line, pos); }
    Token new30(int line, int pos) { return new TCatch(line, pos); }
    Token new31(int line, int pos) { return new TCmp(line, pos); }
    Token new32(int line, int pos) { return new TCmpg(line, pos); }
    Token new33(int line, int pos) { return new TCmpl(line, pos); }
    Token new34(int line, int pos) { return new TDefault(line, pos); }
    Token new35(int line, int pos) { return new TEntermonitor(line, pos); }
    Token new36(int line, int pos) { return new TExitmonitor(line, pos); }
    Token new37(int line, int pos) { return new TGoto(line, pos); }
    Token new38(int line, int pos) { return new TIf(line, pos); }
    Token new39(int line, int pos) { return new TInstanceof(line, pos); }
    Token new40(int line, int pos) { return new TInterfaceinvoke(line, pos); }
    Token new41(int line, int pos) { return new TLengthof(line, pos); }
    Token new42(int line, int pos) { return new TLookupswitch(line, pos); }
    Token new43(int line, int pos) { return new TNeg(line, pos); }
    Token new44(int line, int pos) { return new TNew(line, pos); }
    Token new45(int line, int pos) { return new TNewarray(line, pos); }
    Token new46(int line, int pos) { return new TNewmultiarray(line, pos); }
    Token new47(int line, int pos) { return new TNop(line, pos); }
    Token new48(int line, int pos) { return new TRet(line, pos); }
    Token new49(int line, int pos) { return new TReturn(line, pos); }
    Token new50(int line, int pos) { return new TSpecialinvoke(line, pos); }
    Token new51(int line, int pos) { return new TStaticinvoke(line, pos); }
    Token new52(int line, int pos) { return new TTableswitch(line, pos); }
    Token new53(int line, int pos) { return new TThrow(line, pos); }
    Token new54(int line, int pos) { return new TThrows(line, pos); }
    Token new55(int line, int pos) { return new TVirtualinvoke(line, pos); }
    Token new56(int line, int pos) { return new TNull(line, pos); }
    Token new57(int line, int pos) { return new TFrom(line, pos); }
    Token new58(int line, int pos) { return new TTo(line, pos); }
    Token new59(int line, int pos) { return new TWith(line, pos); }
    Token new60(int line, int pos) { return new TCls(line, pos); }
    Token new61(int line, int pos) { return new TComma(line, pos); }
    Token new62(int line, int pos) { return new TLBrace(line, pos); }
    Token new63(int line, int pos) { return new TRBrace(line, pos); }
    Token new64(int line, int pos) { return new TSemicolon(line, pos); }
    Token new65(int line, int pos) { return new TLBracket(line, pos); }
    Token new66(int line, int pos) { return new TRBracket(line, pos); }
    Token new67(int line, int pos) { return new TLParen(line, pos); }
    Token new68(int line, int pos) { return new TRParen(line, pos); }
    Token new69(int line, int pos) { return new TColon(line, pos); }
    Token new70(int line, int pos) { return new TDot(line, pos); }
    Token new71(int line, int pos) { return new TQuote(line, pos); }
    Token new72(int line, int pos) { return new TColonEquals(line, pos); }
    Token new73(int line, int pos) { return new TEquals(line, pos); }
    Token new74(int line, int pos) { return new TAnd(line, pos); }
    Token new75(int line, int pos) { return new TOr(line, pos); }
    Token new76(int line, int pos) { return new TXor(line, pos); }
    Token new77(int line, int pos) { return new TMod(line, pos); }
    Token new78(int line, int pos) { return new TCmpeq(line, pos); }
    Token new79(int line, int pos) { return new TCmpne(line, pos); }
    Token new80(int line, int pos) { return new TCmpgt(line, pos); }
    Token new81(int line, int pos) { return new TCmpge(line, pos); }
    Token new82(int line, int pos) { return new TCmplt(line, pos); }
    Token new83(int line, int pos) { return new TCmple(line, pos); }
    Token new84(int line, int pos) { return new TShl(line, pos); }
    Token new85(int line, int pos) { return new TShr(line, pos); }
    Token new86(int line, int pos) { return new TUshr(line, pos); }
    Token new87(int line, int pos) { return new TPlus(line, pos); }
    Token new88(int line, int pos) { return new TMinus(line, pos); }
    Token new89(int line, int pos) { return new TMult(line, pos); }
    Token new90(int line, int pos) { return new TDiv(line, pos); }
    Token new91(String text, int line, int pos) { return new TFullIdentifier(text, line, pos); }
    Token new92(String text, int line, int pos) { return new TQuotedName(text, line, pos); }
    Token new93(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new94(String text, int line, int pos) { return new TAtIdentifier(text, line, pos); }
    Token new95(String text, int line, int pos) { return new TBoolConstant(text, line, pos); }
    Token new96(String text, int line, int pos) { return new TIntegerConstant(text, line, pos); }
    Token new97(String text, int line, int pos) { return new TFloatConstant(text, line, pos); }
    Token new98(String text, int line, int pos) { return new TStringConstant(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 35, 7}, {36, 36, 8}, {37, 37, 9}, {38, 38, 10}, {39, 39, 11}, {40, 40, 12}, {41, 41, 13}, {42, 42, 14}, {43, 43, 15}, {44, 44, 16}, {45, 45, 17}, {46, 46, 18}, {47, 47, 19}, {48, 48, 20}, {49, 57, 21}, {58, 58, 22}, {59, 59, 23}, {60, 60, 24}, {61, 61, 25}, {62, 62, 26}, {64, 64, 27}, {65, 90, 28}, {91, 91, 29}, {92, 92, 30}, {93, 93, 31}, {94, 94, 32}, {95, 95, 33}, {97, 97, 34}, {98, 98, 35}, {99, 99, 36}, {100, 100, 37}, {101, 101, 38}, {102, 102, 39}, {103, 103, 40}, {104, 104, 41}, {105, 105, 42}, {106, 107, 41}, {108, 108, 43}, {109, 109, 41}, {110, 110, 44}, {111, 111, 41}, {112, 112, 45}, {113, 113, 41}, {114, 114, 46}, {115, 115, 47}, {116, 116, 48}, {117, 117, 49}, {118, 118, 50}, {119, 119, 51}, {120, 122, 41}, {123, 123, 52}, {124, 124, 53}, {125, 125, 54}, },
            {{9, 32, -2}, {47, 47, 55}, },
            {{9, 47, -3}, },
            {{9, 47, -3}, },
            {{9, 47, -3}, },
            {{61, 61, 56}, },
            {{0, 33, 57}, {34, 34, 58}, {35, 91, 59}, {92, 92, 60}, {93, 127, 61}, },
            {{45, 45, 62}, {73, 73, 63}, {78, 78, 64}, },
            {{36, 36, 65}, {46, 46, 66}, {48, 57, 67}, {65, 90, 68}, {92, 92, 69}, {95, 95, 70}, {97, 122, 71}, },
            {},
            {},
            {{0, 9, 72}, {11, 12, 72}, {14, 38, 72}, {40, 65535, 72}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{42, 42, 73}, {47, 47, 74}, },
            {{46, 46, 75}, {48, 55, 76}, {56, 57, 21}, {76, 76, 77}, {88, 88, 78}, {120, 120, 79}, },
            {{46, 46, 75}, {48, 57, 21}, {76, 76, 77}, },
            {{61, 61, 80}, },
            {},
            {{60, 60, 81}, {61, 61, 82}, {99, 99, 83}, {105, 105, 84}, },
            {{61, 61, 85}, },
            {{61, 61, 86}, {62, 62, 87}, },
            {{99, 99, 88}, {112, 112, 89}, {116, 116, 90}, },
            {{36, 122, -10}, },
            {},
            {{32, 32, 91}, {34, 34, 92}, {35, 35, 93}, {39, 39, 94}, {46, 46, 95}, {92, 92, 96}, {98, 98, 97}, {102, 102, 98}, {110, 110, 99}, {114, 114, 100}, {116, 116, 101}, {117, 117, 102}, },
            {},
            {},
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 71}, {98, 98, 103}, {99, 109, 71}, {110, 110, 104}, {111, 122, 71}, },
            {{36, 95, -10}, {97, 110, 71}, {111, 111, 105}, {112, 113, 71}, {114, 114, 106}, {115, 120, 71}, {121, 121, 107}, {122, 122, 71}, },
            {{36, 95, -10}, {97, 97, 108}, {98, 103, 71}, {104, 104, 109}, {105, 107, 71}, {108, 108, 110}, {109, 109, 111}, {110, 122, 71}, },
            {{36, 95, -10}, {97, 100, 71}, {101, 101, 112}, {102, 110, 71}, {111, 111, 113}, {112, 122, 71}, },
            {{36, 95, -10}, {97, 109, 71}, {110, 110, 114}, {111, 119, 71}, {120, 120, 115}, {121, 122, 71}, },
            {{36, 95, -10}, {97, 97, 116}, {98, 104, 71}, {105, 105, 117}, {106, 107, 71}, {108, 108, 118}, {109, 113, 71}, {114, 114, 119}, {115, 122, 71}, },
            {{36, 110, -37}, {111, 111, 120}, {112, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 101, 71}, {102, 102, 121}, {103, 108, 71}, {109, 109, 122}, {110, 110, 123}, {111, 122, 71}, },
            {{36, 100, -39}, {101, 101, 124}, {102, 110, 71}, {111, 111, 125}, {112, 122, 71}, },
            {{36, 95, -10}, {97, 97, 126}, {98, 100, 71}, {101, 101, 127}, {102, 110, 71}, {111, 111, 128}, {112, 116, 71}, {117, 117, 129}, {118, 122, 71}, },
            {{36, 95, -10}, {97, 113, 71}, {114, 114, 130}, {115, 116, 71}, {117, 117, 131}, {118, 122, 71}, },
            {{36, 100, -39}, {101, 101, 132}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 103, 71}, {104, 104, 133}, {105, 111, 71}, {112, 112, 134}, {113, 115, 71}, {116, 116, 135}, {117, 120, 71}, {121, 121, 136}, {122, 122, 71}, },
            {{36, 95, -10}, {97, 97, 137}, {98, 103, 71}, {104, 104, 138}, {105, 110, 71}, {111, 111, 139}, {112, 113, 71}, {114, 114, 140}, {115, 122, 71}, },
            {{36, 109, -40}, {110, 110, 141}, {111, 122, 71}, },
            {{36, 95, -10}, {97, 104, 71}, {105, 105, 142}, {106, 110, 71}, {111, 111, 143}, {112, 122, 71}, },
            {{36, 104, -52}, {105, 105, 144}, {106, 122, 71}, },
            {},
            {},
            {},
            {{42, 47, -21}, },
            {},
            {{0, 127, -8}, },
            {},
            {{0, 127, -8}, },
            {{32, 32, 145}, {34, 34, 146}, {35, 35, 147}, {39, 39, 148}, {46, 46, 149}, {92, 92, 150}, {98, 98, 151}, {102, 102, 152}, {110, 110, 153}, {114, 114, 154}, {116, 116, 155}, {117, 117, 156}, },
            {{0, 127, -8}, },
            {{73, 73, 63}, },
            {{110, 110, 157}, },
            {{97, 97, 158}, },
            {{36, 122, -10}, },
            {{36, 36, 159}, {65, 90, 160}, {92, 92, 161}, {95, 95, 162}, {97, 122, 163}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{32, 32, 164}, {34, 34, 165}, {35, 35, 166}, {39, 39, 167}, {46, 46, 168}, {92, 92, 169}, {98, 98, 170}, {102, 102, 171}, {110, 110, 172}, {114, 114, 173}, {116, 116, 174}, {117, 117, 175}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{0, 38, -13}, {39, 39, 176}, {40, 65535, 72}, },
            {{0, 41, 177}, {42, 42, 178}, {43, 65535, 177}, },
            {{0, 8, 179}, {9, 9, 180}, {10, 10, 2}, {11, 12, 179}, {13, 13, 3}, {14, 31, 179}, {32, 32, 181}, {33, 46, 179}, {47, 47, 182}, {48, 65535, 179}, },
            {{48, 57, 183}, },
            {{46, 76, -22}, },
            {},
            {{48, 57, 184}, {65, 70, 185}, {97, 102, 186}, },
            {{48, 102, -80}, },
            {},
            {},
            {},
            {{108, 108, 187}, },
            {{110, 110, 188}, },
            {},
            {},
            {{62, 62, 189}, },
            {{97, 97, 190}, },
            {{97, 97, 191}, },
            {{104, 104, 192}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{48, 57, 193}, {65, 70, 194}, {97, 102, 195}, },
            {{36, 95, -10}, {97, 114, 71}, {115, 115, 196}, {116, 122, 71}, },
            {{36, 109, -40}, {110, 110, 197}, {111, 122, 71}, },
            {{36, 110, -37}, {111, 111, 198}, {112, 122, 71}, },
            {{36, 100, -39}, {101, 101, 199}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 115, 71}, {116, 116, 200}, {117, 122, 71}, },
            {{36, 114, -105}, {115, 115, 201}, {116, 116, 202}, {117, 122, 71}, },
            {{36, 95, -10}, {97, 97, 203}, {98, 122, 71}, },
            {{36, 95, -10}, {97, 97, 204}, {98, 114, 71}, {115, 115, 205}, {116, 122, 71}, },
            {{36, 95, -10}, {97, 111, 71}, {112, 112, 206}, {113, 122, 71}, },
            {{36, 101, -44}, {102, 102, 207}, {103, 122, 71}, },
            {{36, 95, -10}, {97, 116, 71}, {117, 117, 208}, {118, 122, 71}, },
            {{36, 115, -109}, {116, 116, 209}, {117, 117, 210}, {118, 122, 71}, },
            {{36, 104, -52}, {105, 105, 211}, {106, 115, 71}, {116, 116, 212}, {117, 122, 71}, },
            {{36, 95, -10}, {97, 107, 71}, {108, 108, 213}, {109, 122, 71}, },
            {{36, 109, -40}, {110, 110, 214}, {111, 122, 71}, },
            {{36, 110, -37}, {111, 111, 215}, {112, 122, 71}, },
            {{36, 110, -37}, {111, 111, 216}, {112, 122, 71}, },
            {{36, 115, -109}, {116, 116, 217}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 111, -113}, {112, 112, 218}, {113, 122, 71}, },
            {{36, 114, -105}, {115, 115, 219}, {116, 116, 220}, {117, 122, 71}, },
            {{36, 109, -40}, {110, 110, 221}, {111, 122, 71}, },
            {{36, 109, -40}, {110, 110, 222}, {111, 111, 223}, {112, 122, 71}, },
            {{36, 115, -109}, {116, 116, 224}, {117, 122, 71}, },
            {{36, 95, -10}, {97, 102, 71}, {103, 103, 225}, {104, 118, 71}, {119, 119, 226}, {120, 122, 71}, },
            {{36, 111, -113}, {112, 112, 227}, {113, 122, 71}, },
            {{36, 107, -118}, {108, 108, 228}, {109, 122, 71}, },
            {{36, 104, -52}, {105, 105, 229}, {106, 110, 71}, {111, 111, 230}, {112, 122, 71}, },
            {{36, 97, -36}, {98, 98, 231}, {99, 122, 71}, },
            {{36, 115, -109}, {116, 116, 232}, {117, 122, 71}, },
            {{36, 110, -37}, {111, 111, 233}, {112, 122, 71}, },
            {{36, 100, -39}, {101, 101, 234}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 97, 235}, {98, 122, 71}, },
            {{36, 109, -40}, {110, 110, 236}, {111, 122, 71}, },
            {{36, 97, -36}, {98, 98, 237}, {99, 122, 71}, },
            {{36, 113, -47}, {114, 114, 238}, {115, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 239}, {98, 116, 71}, {117, 117, 240}, {118, 122, 71}, },
            {{36, 95, -10}, {97, 106, 71}, {107, 107, 241}, {108, 122, 71}, },
            {{36, 113, -47}, {114, 114, 242}, {115, 122, 71}, },
            {{36, 104, -52}, {105, 105, 243}, {106, 107, 71}, {108, 108, 244}, {109, 122, 71}, },
            {{36, 115, -109}, {116, 116, 245}, {117, 122, 71}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{48, 57, 246}, {65, 70, 247}, {97, 102, 248}, },
            {{102, 102, 249}, },
            {{78, 78, 250}, },
            {{36, 36, 251}, {46, 46, 66}, {48, 57, 252}, {65, 90, 253}, {92, 92, 254}, {95, 95, 255}, {97, 122, 256}, },
            {{36, 122, -161}, },
            {{32, 32, 257}, {34, 34, 258}, {35, 35, 259}, {39, 39, 260}, {46, 46, 261}, {92, 92, 262}, {98, 98, 263}, {102, 102, 264}, {110, 110, 265}, {114, 114, 266}, {116, 116, 267}, {117, 117, 268}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{48, 57, 269}, {65, 70, 270}, {97, 102, 271}, },
            {},
            {{0, 65535, -75}, },
            {{0, 41, 272}, {42, 42, 178}, {43, 46, 272}, {47, 47, 273}, {48, 65535, 272}, },
            {{0, 65535, -76}, },
            {{0, 65535, -76}, },
            {{0, 65535, -76}, },
            {{0, 32, -76}, {33, 41, 179}, {42, 42, 274}, {43, 46, 179}, {47, 47, 275}, {48, 65535, 179}, },
            {{48, 57, 183}, {69, 69, 276}, {70, 70, 277}, {101, 101, 278}, {102, 102, 279}, },
            {{48, 70, -80}, {76, 76, 77}, {97, 102, 186}, },
            {{48, 102, -186}, },
            {{48, 102, -186}, },
            {{105, 105, 280}, },
            {{105, 105, 281}, },
            {},
            {{117, 117, 282}, },
            {{114, 114, 283}, },
            {{105, 105, 284}, },
            {{48, 57, 285}, {65, 70, 286}, {97, 102, 287}, },
            {{48, 102, -195}, },
            {{48, 102, -195}, },
            {{36, 115, -109}, {116, 116, 288}, {117, 122, 71}, },
            {{36, 110, -37}, {111, 111, 289}, {112, 122, 71}, },
            {{36, 107, -118}, {108, 108, 290}, {109, 122, 71}, },
            {{36, 95, -10}, {97, 97, 291}, {98, 122, 71}, },
            {{36, 100, -39}, {101, 101, 292}, {102, 122, 71}, },
            {{36, 100, -39}, {101, 101, 293}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 98, 71}, {99, 99, 294}, {100, 122, 71}, },
            {{36, 113, -47}, {114, 114, 295}, {115, 122, 71}, },
            {{36, 114, -105}, {115, 115, 296}, {116, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 102, -129}, {103, 103, 297}, {104, 107, 71}, {108, 108, 298}, {109, 122, 71}, },
            {{36, 95, -10}, {97, 97, 299}, {98, 122, 71}, },
            {{36, 97, -36}, {98, 98, 300}, {99, 122, 71}, },
            {{36, 100, -39}, {101, 101, 301}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 108, 71}, {109, 109, 302}, {110, 122, 71}, },
            {{36, 115, -109}, {116, 116, 303}, {117, 122, 71}, },
            {{36, 100, -39}, {101, 101, 304}, {102, 122, 71}, },
            {{36, 114, -105}, {115, 115, 305}, {116, 122, 71}, },
            {{36, 95, -10}, {97, 97, 306}, {98, 122, 71}, },
            {{36, 95, -10}, {97, 97, 307}, {98, 122, 71}, },
            {{36, 108, -212}, {109, 109, 308}, {110, 122, 71}, },
            {{36, 110, -37}, {111, 111, 309}, {112, 122, 71}, },
            {{36, 107, -118}, {108, 108, 310}, {109, 122, 71}, },
            {{36, 115, -109}, {116, 116, 311}, {117, 122, 71}, },
            {{36, 100, -39}, {101, 101, 312}, {102, 122, 71}, },
            {{36, 102, -129}, {103, 103, 313}, {104, 122, 71}, },
            {{36, 102, -129}, {103, 103, 314}, {104, 122, 71}, },
            {{36, 106, -143}, {107, 107, 315}, {108, 122, 71}, },
            {{36, 104, -52}, {105, 105, 316}, {106, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 317}, {98, 108, 71}, {109, 109, 318}, {110, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 107, -118}, {108, 108, 319}, {109, 122, 71}, },
            {{36, 95, -10}, {97, 117, 71}, {118, 118, 320}, {119, 122, 71}, },
            {{36, 115, -109}, {116, 116, 321}, {117, 122, 71}, },
            {{36, 107, -118}, {108, 108, 322}, {109, 122, 71}, },
            {{36, 116, -115}, {117, 117, 323}, {118, 122, 71}, },
            {{36, 113, -47}, {114, 114, 324}, {115, 122, 71}, },
            {{36, 98, -204}, {99, 99, 325}, {100, 122, 71}, },
            {{36, 115, -109}, {116, 116, 326}, {117, 122, 71}, },
            {{36, 98, -204}, {99, 99, 327}, {100, 122, 71}, },
            {{36, 107, -118}, {108, 108, 328}, {109, 122, 71}, },
            {{36, 110, -37}, {111, 111, 329}, {112, 122, 71}, },
            {{36, 109, -40}, {110, 110, 330}, {111, 122, 71}, },
            {{36, 100, -39}, {101, 101, 331}, {102, 122, 71}, },
            {{36, 109, -40}, {110, 110, 332}, {111, 122, 71}, },
            {{36, 115, -109}, {116, 116, 333}, {117, 122, 71}, },
            {{36, 95, -10}, {97, 99, 71}, {100, 100, 334}, {101, 122, 71}, },
            {{36, 95, -10}, {97, 97, 335}, {98, 122, 71}, },
            {{36, 103, -49}, {104, 104, 336}, {105, 122, 71}, },
            {{48, 57, 337}, {65, 70, 338}, {97, 102, 339}, },
            {{48, 102, -248}, },
            {{48, 102, -248}, },
            {{105, 105, 340}, },
            {{70, 70, 341}, {102, 102, 342}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{32, 32, 343}, {34, 34, 344}, {35, 35, 345}, {39, 39, 346}, {46, 46, 347}, {92, 92, 348}, {98, 98, 349}, {102, 102, 350}, {110, 110, 351}, {114, 114, 352}, {116, 116, 353}, {117, 117, 354}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{48, 57, 355}, {65, 70, 356}, {97, 102, 357}, },
            {{48, 57, 358}, {65, 70, 359}, {97, 102, 360}, },
            {{48, 102, -271}, },
            {{48, 102, -271}, },
            {{0, 41, 361}, {42, 42, 362}, {43, 65535, 361}, },
            {{9, 47, -3}, },
            {{0, 8, 363}, {9, 9, 364}, {10, 10, 365}, {11, 12, 363}, {13, 13, 366}, {14, 31, 363}, {32, 32, 367}, {33, 41, 363}, {42, 42, 368}, {43, 46, 363}, {47, 47, 369}, {48, 65535, 363}, },
            {{0, 65535, -184}, },
            {{43, 43, 370}, {45, 45, 371}, {48, 57, 372}, },
            {},
            {{43, 57, -278}, },
            {},
            {{110, 110, 373}, },
            {{116, 116, 374}, },
            {{103, 103, 375}, },
            {{97, 97, 376}, },
            {{115, 115, 377}, },
            {{48, 57, 378}, {65, 70, 379}, {97, 102, 380}, },
            {{48, 102, -287}, },
            {{48, 102, -287}, },
            {{36, 113, -47}, {114, 114, 381}, {115, 122, 71}, },
            {{36, 115, -109}, {116, 116, 382}, {117, 122, 71}, },
            {{36, 100, -39}, {101, 101, 383}, {102, 122, 71}, },
            {{36, 106, -143}, {107, 107, 384}, {108, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 103, -49}, {104, 104, 385}, {105, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 114, -105}, {115, 115, 386}, {116, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 116, -115}, {117, 117, 387}, {118, 122, 71}, },
            {{36, 107, -118}, {108, 108, 388}, {109, 122, 71}, },
            {{36, 113, -47}, {114, 114, 389}, {115, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 108, -212}, {109, 109, 390}, {110, 122, 71}, },
            {{36, 109, -40}, {110, 110, 391}, {111, 122, 71}, },
            {{36, 100, -39}, {101, 101, 392}, {102, 122, 71}, },
            {{36, 107, -118}, {108, 108, 393}, {109, 122, 71}, },
            {{36, 115, -109}, {116, 116, 394}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 100, -39}, {101, 101, 395}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 97, 396}, {98, 122, 71}, },
            {{36, 113, -47}, {114, 114, 397}, {115, 122, 71}, },
            {{36, 115, -109}, {116, 116, 398}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 116, -115}, {117, 117, 399}, {118, 122, 71}, },
            {{36, 117, -231}, {118, 118, 400}, {119, 122, 71}, },
            {{36, 113, -47}, {114, 114, 401}, {115, 122, 71}, },
            {{36, 116, -115}, {117, 117, 402}, {118, 122, 71}, },
            {{36, 92, -10}, {95, 95, 403}, {97, 122, 71}, },
            {{36, 95, -10}, {97, 97, 404}, {98, 122, 71}, },
            {{36, 100, -39}, {101, 101, 405}, {102, 122, 71}, },
            {{36, 104, -52}, {105, 105, 406}, {106, 122, 71}, },
            {{36, 113, -47}, {114, 114, 407}, {115, 122, 71}, },
            {{36, 115, -109}, {116, 116, 408}, {117, 122, 71}, },
            {{36, 104, -52}, {105, 105, 409}, {106, 122, 71}, },
            {{36, 104, -52}, {105, 105, 410}, {106, 122, 71}, },
            {{36, 103, -49}, {104, 104, 411}, {105, 122, 71}, },
            {{36, 100, -39}, {101, 101, 412}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 118, 71}, {119, 119, 413}, {120, 122, 71}, },
            {{36, 114, -105}, {115, 115, 414}, {116, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 110, -37}, {111, 111, 415}, {112, 122, 71}, },
            {{36, 116, -115}, {117, 117, 416}, {118, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 115, -109}, {116, 116, 417}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{48, 57, 418}, {65, 70, 419}, {97, 102, 420}, },
            {{48, 102, -339}, },
            {{48, 102, -339}, },
            {{110, 110, 421}, },
            {},
            {},
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{48, 57, 422}, {65, 70, 423}, {97, 102, 424}, },
            {{48, 57, 425}, {65, 70, 426}, {97, 102, 427}, },
            {{48, 102, -357}, },
            {{48, 102, -357}, },
            {{48, 57, 428}, {65, 70, 429}, {97, 102, 430}, },
            {{48, 102, -360}, },
            {{48, 102, -360}, },
            {{0, 65535, -274}, },
            {{0, 41, 272}, {42, 42, 362}, {43, 65535, -180}, },
            {{0, 65535, -276}, },
            {{0, 65535, -276}, },
            {{0, 8, 177}, {9, 9, 431}, {10, 10, 365}, {11, 12, 177}, {13, 13, 366}, {14, 31, 177}, {32, 32, 432}, {33, 41, 177}, {42, 42, 178}, {43, 46, 177}, {47, 47, 433}, {48, 65535, 177}, },
            {{0, 65535, -367}, },
            {{0, 65535, -276}, },
            {{0, 8, 434}, {9, 9, 435}, {10, 10, 436}, {11, 12, 434}, {13, 13, 437}, {14, 31, 434}, {32, 32, 438}, {33, 41, 434}, {42, 42, 368}, {43, 46, 434}, {47, 47, 439}, {48, 65535, 434}, },
            {{0, 41, -276}, {42, 42, 440}, {43, 46, 363}, {47, 47, 441}, {48, 65535, 363}, },
            {{48, 57, 372}, },
            {{48, 57, 372}, },
            {{48, 57, 372}, {70, 70, 277}, {102, 102, 279}, },
            {{105, 105, 442}, },
            {{62, 62, 443}, },
            {{104, 104, 444}, },
            {{109, 109, 445}, },
            {{58, 58, 446}, },
            {{48, 57, 447}, {65, 70, 448}, {97, 102, 449}, },
            {{48, 102, -380}, },
            {{48, 102, -380}, },
            {{36, 95, -10}, {97, 97, 450}, {98, 122, 71}, },
            {{36, 95, -10}, {97, 97, 451}, {98, 122, 71}, },
            {{36, 95, -10}, {97, 97, 452}, {98, 122, 71}, },
            {{36, 111, -113}, {112, 112, 453}, {113, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 107, -118}, {108, 108, 454}, {109, 122, 71}, },
            {{36, 100, -39}, {101, 101, 455}, {102, 122, 71}, },
            {{36, 108, -212}, {109, 109, 456}, {110, 122, 71}, },
            {{36, 110, -37}, {111, 111, 457}, {112, 122, 71}, },
            {{36, 99, -245}, {100, 100, 458}, {101, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 108, -212}, {109, 109, 459}, {110, 122, 71}, },
            {{36, 109, -40}, {110, 110, 460}, {111, 122, 71}, },
            {{36, 101, -44}, {102, 102, 461}, {103, 122, 71}, },
            {{36, 103, -49}, {104, 104, 462}, {105, 122, 71}, },
            {{36, 111, -113}, {112, 112, 463}, {113, 122, 71}, },
            {{36, 100, -39}, {101, 101, 464}, {102, 122, 71}, },
            {{36, 113, -47}, {114, 114, 465}, {115, 122, 71}, },
            {{36, 107, -118}, {108, 108, 466}, {109, 122, 71}, },
            {{36, 115, -109}, {116, 116, 467}, {117, 122, 71}, },
            {{36, 115, -109}, {116, 116, 468}, {117, 122, 71}, },
            {{36, 98, -204}, {99, 99, 469}, {100, 122, 71}, },
            {{36, 98, -204}, {99, 99, 470}, {100, 122, 71}, },
            {{36, 109, -40}, {110, 110, 471}, {111, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 472}, {98, 122, 71}, },
            {{36, 98, -204}, {99, 99, 473}, {100, 122, 71}, },
            {{36, 113, -47}, {114, 114, 474}, {115, 122, 71}, },
            {{36, 114, -105}, {115, 115, 475}, {116, 122, 71}, },
            {{36, 114, -105}, {115, 115, 476}, {116, 122, 71}, },
            {{36, 104, -52}, {105, 105, 477}, {106, 122, 71}, },
            {{36, 118, -331}, {119, 119, 478}, {120, 122, 71}, },
            {{36, 95, -10}, {97, 97, 479}, {98, 122, 71}, },
            {{36, 104, -52}, {105, 105, 480}, {106, 122, 71}, },
            {{48, 57, 481}, {65, 70, 482}, {97, 102, 483}, },
            {{48, 102, -420}, },
            {{48, 102, -420}, },
            {{105, 105, 484}, },
            {{48, 57, 485}, {65, 70, 486}, {97, 102, 487}, },
            {{48, 102, -424}, },
            {{48, 102, -424}, },
            {{48, 57, 488}, {65, 70, 489}, {97, 102, 490}, },
            {{48, 102, -427}, },
            {{48, 102, -427}, },
            {{48, 57, 491}, {65, 70, 492}, {97, 102, 493}, },
            {{48, 102, -430}, },
            {{48, 102, -430}, },
            {{0, 65535, -367}, },
            {{0, 65535, -367}, },
            {{0, 41, 177}, {42, 42, 494}, {43, 46, 177}, {47, 47, 495}, {48, 65535, 177}, },
            {{0, 8, 496}, {9, 9, 497}, {10, 10, 498}, {11, 12, 496}, {13, 13, 499}, {14, 31, 496}, {32, 32, 500}, {33, 41, 496}, {42, 42, 501}, {43, 46, 496}, {47, 47, 502}, {48, 65535, 496}, },
            {{0, 65535, -436}, },
            {{0, 8, 361}, {9, 9, 503}, {10, 10, 498}, {11, 12, 361}, {13, 13, 499}, {14, 31, 361}, {32, 32, 504}, {33, 41, 361}, {42, 42, 362}, {43, 46, 361}, {47, 47, 505}, {48, 65535, 361}, },
            {{0, 65535, -438}, },
            {{0, 65535, -436}, },
            {{0, 65535, -184}, },
            {{0, 8, 506}, {9, 9, 507}, {10, 10, 508}, {11, 12, 506}, {13, 13, 509}, {14, 31, 506}, {32, 32, 510}, {33, 41, 506}, {42, 42, 368}, {43, 46, 506}, {47, 47, 511}, {48, 65535, 506}, },
            {{0, 65535, -371}, },
            {{116, 116, 512}, },
            {},
            {{116, 116, 513}, },
            {{101, 101, 514}, },
            {},
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 98, -204}, {99, 99, 515}, {100, 122, 71}, },
            {{36, 115, -109}, {116, 116, 516}, {117, 122, 71}, },
            {{36, 109, -40}, {110, 110, 517}, {111, 122, 71}, },
            {{36, 110, -37}, {111, 111, 518}, {112, 122, 71}, },
            {{36, 115, -109}, {116, 116, 519}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 110, -37}, {111, 111, 520}, {112, 122, 71}, },
            {{36, 109, -40}, {110, 110, 521}, {111, 122, 71}, },
            {{36, 114, -105}, {115, 115, 522}, {116, 122, 71}, },
            {{36, 100, -39}, {101, 101, 523}, {102, 122, 71}, },
            {{36, 98, -204}, {99, 99, 524}, {100, 122, 71}, },
            {{36, 95, -10}, {97, 97, 525}, {98, 122, 71}, },
            {{36, 110, -37}, {111, 111, 526}, {112, 122, 71}, },
            {{36, 114, -105}, {115, 115, 527}, {116, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 528}, {98, 122, 71}, },
            {{36, 115, -109}, {116, 116, 529}, {117, 122, 71}, },
            {{36, 95, -10}, {97, 120, 71}, {121, 121, 530}, {122, 122, 71}, },
            {{36, 100, -39}, {101, 101, 531}, {102, 122, 71}, },
            {{36, 115, -109}, {116, 116, 532}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 107, -118}, {108, 108, 533}, {109, 122, 71}, },
            {{36, 104, -52}, {105, 105, 534}, {106, 122, 71}, },
            {{36, 110, -37}, {111, 111, 535}, {112, 122, 71}, },
            {{36, 118, -331}, {119, 119, 536}, {120, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 100, -39}, {101, 101, 537}, {102, 122, 71}, },
            {{36, 109, -40}, {110, 110, 538}, {111, 122, 71}, },
            {{36, 107, -118}, {108, 108, 539}, {109, 122, 71}, },
            {{36, 107, -118}, {108, 108, 540}, {109, 122, 71}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{116, 116, 541}, },
            {{48, 57, 542}, {65, 70, 543}, {97, 102, 544}, },
            {{48, 102, -487}, },
            {{48, 102, -487}, },
            {{48, 57, 545}, {65, 70, 546}, {97, 102, 547}, },
            {{48, 102, -490}, },
            {{48, 102, -490}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{0, 41, 548}, {42, 42, 178}, {43, 46, 548}, {47, 47, 549}, {48, 65535, 548}, },
            {{0, 65535, -276}, },
            {{0, 65535, -436}, },
            {{0, 65535, -436}, },
            {{0, 65535, -438}, },
            {{0, 65535, -438}, },
            {{0, 65535, -436}, },
            {{0, 41, -370}, {42, 42, 501}, {43, 65535, -370}, },
            {{0, 41, -436}, {42, 42, 550}, {43, 46, 496}, {47, 47, 551}, {48, 65535, 496}, },
            {{0, 65535, -438}, },
            {{0, 65535, -438}, },
            {{0, 41, 361}, {42, 42, 552}, {43, 46, 361}, {47, 47, 553}, {48, 65535, 361}, },
            {{0, 8, 554}, {9, 9, 555}, {10, 10, 556}, {11, 12, 554}, {13, 13, 557}, {14, 31, 554}, {32, 32, 558}, {33, 41, 554}, {42, 42, 559}, {43, 46, 554}, {47, 47, 560}, {48, 65535, 554}, },
            {{0, 65535, -508}, },
            {{0, 8, 561}, {9, 9, 562}, {10, 10, 556}, {11, 12, 561}, {13, 13, 557}, {14, 31, 561}, {32, 32, 563}, {33, 41, 561}, {42, 42, 564}, {43, 46, 561}, {47, 47, 565}, {48, 65535, 561}, },
            {{0, 65535, -510}, },
            {{0, 65535, -508}, },
            {{0, 65535, -371}, },
            {{62, 62, 566}, },
            {{101, 101, 567}, },
            {{116, 116, 568}, },
            {{36, 115, -109}, {116, 116, 569}, {117, 122, 71}, },
            {{36, 104, -52}, {105, 105, 570}, {106, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 104, -52}, {105, 105, 571}, {106, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 109, -40}, {110, 110, 572}, {111, 122, 71}, },
            {{36, 104, -52}, {105, 105, 573}, {106, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 109, -40}, {110, 110, 574}, {111, 122, 71}, },
            {{36, 100, -39}, {101, 101, 575}, {102, 122, 71}, },
            {{36, 98, -204}, {99, 99, 576}, {100, 122, 71}, },
            {{36, 101, -44}, {102, 102, 577}, {103, 122, 71}, },
            {{36, 118, -331}, {119, 119, 578}, {120, 122, 71}, },
            {{36, 120, -469}, {121, 121, 579}, {122, 122, 71}, },
            {{36, 104, -52}, {105, 105, 580}, {106, 122, 71}, },
            {{36, 111, -113}, {112, 112, 581}, {113, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 100, -39}, {101, 101, 582}, {102, 122, 71}, },
            {{36, 104, -52}, {105, 105, 583}, {106, 122, 71}, },
            {{36, 109, -40}, {110, 110, 584}, {111, 122, 71}, },
            {{36, 109, -40}, {110, 110, 585}, {111, 122, 71}, },
            {{36, 104, -52}, {105, 105, 586}, {106, 122, 71}, },
            {{36, 109, -40}, {110, 110, 587}, {111, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 104, -52}, {105, 105, 588}, {106, 122, 71}, },
            {{36, 100, -39}, {101, 101, 589}, {102, 122, 71}, },
            {{121, 121, 590}, },
            {{48, 57, 591}, {65, 70, 592}, {97, 102, 593}, },
            {{48, 102, -544}, },
            {{48, 102, -544}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{0, 41, 561}, {42, 42, 564}, {43, 65535, 561}, },
            {{0, 65535, -367}, },
            {{0, 41, -442}, {42, 42, 559}, {43, 65535, -442}, },
            {{0, 65535, -504}, },
            {{0, 41, 548}, {42, 42, 564}, {43, 65535, -496}, },
            {{0, 65535, -436}, },
            {{0, 65535, -508}, },
            {{0, 65535, -508}, },
            {{0, 65535, -510}, },
            {{0, 65535, -510}, },
            {{0, 65535, -508}, },
            {{0, 41, -370}, {42, 42, 559}, {43, 65535, -370}, },
            {{0, 41, -508}, {42, 42, 594}, {43, 46, 554}, {47, 47, 595}, {48, 65535, 554}, },
            {{0, 65535, -550}, },
            {{0, 65535, -510}, },
            {{0, 65535, -510}, },
            {{0, 41, 272}, {42, 42, 564}, {43, 65535, -180}, },
            {{0, 41, 561}, {42, 42, 596}, {43, 46, 561}, {47, 47, 597}, {48, 65535, 561}, },
            {},
            {{120, 120, 598}, },
            {{101, 101, 599}, },
            {{36, 122, -10}, },
            {{36, 110, -37}, {111, 111, 600}, {112, 122, 71}, },
            {{36, 109, -40}, {110, 110, 601}, {111, 122, 71}, },
            {{36, 104, -52}, {105, 105, 602}, {106, 122, 71}, },
            {{36, 115, -109}, {116, 116, 603}, {117, 122, 71}, },
            {{36, 115, -109}, {116, 116, 604}, {117, 122, 71}, },
            {{36, 110, -37}, {111, 111, 605}, {112, 122, 71}, },
            {{36, 100, -39}, {101, 101, 606}, {102, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 104, -52}, {105, 105, 607}, {106, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 608}, {98, 122, 71}, },
            {{36, 100, -39}, {101, 101, 609}, {102, 122, 71}, },
            {{36, 99, -245}, {100, 100, 610}, {101, 122, 71}, },
            {{36, 109, -40}, {110, 110, 611}, {111, 122, 71}, },
            {{36, 117, -231}, {118, 118, 612}, {119, 122, 71}, },
            {{36, 104, -52}, {105, 105, 613}, {106, 122, 71}, },
            {{36, 115, -109}, {116, 116, 614}, {117, 122, 71}, },
            {{36, 115, -109}, {116, 116, 615}, {117, 122, 71}, },
            {{36, 109, -40}, {110, 110, 616}, {111, 122, 71}, },
            {{36, 122, -10}, },
            {{70, 102, -252}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{36, 122, -161}, },
            {{0, 65535, -552}, },
            {{0, 65535, -562}, },
            {{0, 65535, -554}, },
            {{0, 65535, -508}, },
            {{99, 99, 617}, },
            {{114, 114, 618}, },
            {{36, 109, -40}, {110, 110, 619}, {111, 122, 71}, },
            {{36, 115, -109}, {116, 116, 620}, {117, 122, 71}, },
            {{36, 115, -109}, {116, 116, 621}, {117, 122, 71}, },
            {{36, 110, -37}, {111, 111, 622}, {112, 122, 71}, },
            {{36, 114, -105}, {115, 115, 623}, {116, 122, 71}, },
            {{36, 101, -44}, {102, 102, 624}, {103, 122, 71}, },
            {{36, 104, -52}, {105, 105, 625}, {106, 122, 71}, },
            {{36, 115, -109}, {116, 116, 626}, {117, 122, 71}, },
            {{36, 113, -47}, {114, 114, 627}, {115, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 117, -231}, {118, 118, 628}, {119, 122, 71}, },
            {{36, 110, -37}, {111, 111, 629}, {112, 122, 71}, },
            {{36, 95, -10}, {97, 121, 71}, {122, 122, 630}, },
            {{36, 98, -204}, {99, 99, 631}, {100, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 117, -231}, {118, 118, 632}, {119, 122, 71}, },
            {{101, 101, 633}, },
            {{48, 57, 634}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 110, -37}, {111, 111, 635}, {112, 122, 71}, },
            {{36, 113, -47}, {114, 114, 636}, {115, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 109, -40}, {110, 110, 637}, {111, 122, 71}, },
            {{36, 98, -204}, {99, 99, 638}, {100, 122, 71}, },
            {{36, 113, -47}, {114, 114, 639}, {115, 122, 71}, },
            {{36, 110, -37}, {111, 111, 640}, {112, 122, 71}, },
            {{36, 106, -143}, {107, 107, 641}, {108, 122, 71}, },
            {{36, 100, -39}, {101, 101, 642}, {102, 122, 71}, },
            {{36, 103, -49}, {104, 104, 643}, {105, 122, 71}, },
            {{36, 110, -37}, {111, 111, 644}, {112, 122, 71}, },
            {{112, 112, 645}, },
            {{48, 57, 634}, {58, 58, 646}, },
            {{36, 113, -47}, {114, 114, 647}, {115, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 117, -231}, {118, 118, 648}, {119, 122, 71}, },
            {{36, 103, -49}, {104, 104, 649}, {105, 122, 71}, },
            {{36, 95, -10}, {97, 97, 650}, {98, 122, 71}, },
            {{36, 106, -143}, {107, 107, 651}, {108, 122, 71}, },
            {{36, 100, -39}, {101, 101, 652}, {102, 122, 71}, },
            {{36, 99, -245}, {100, 100, 653}, {101, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 106, -143}, {107, 107, 654}, {108, 122, 71}, },
            {{116, 116, 655}, },
            {},
            {{36, 122, -10}, },
            {{36, 110, -37}, {111, 111, 656}, {112, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 120, -469}, {121, 121, 657}, {122, 122, 71}, },
            {{36, 100, -39}, {101, 101, 658}, {102, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 100, -39}, {101, 101, 659}, {102, 122, 71}, },
            {{105, 105, 660}, },
            {{36, 106, -143}, {107, 107, 661}, {108, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{111, 111, 662}, },
            {{36, 100, -39}, {101, 101, 663}, {102, 122, 71}, },
            {{110, 110, 664}, },
            {{36, 122, -10}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, 0, 0, 0, -1, -1, -1, 93, 77, 74, 71, 67, 68, 89, 87, 61, 88, 70, 90, 96, 96, 69, 64, 82, 73, 80, -1, 93, 65, -1, 66, 76, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 62, 75, 63, -1, 79, -1, 98, -1, -1, -1, -1, -1, -1, 93, -1, 93, 93, -1, 93, 93, -1, -1, 0, -1, 96, 96, -1, -1, 72, 84, 83, -1, -1, 78, 81, 85, -1, -1, -1, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, -1, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 38, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 58, 93, 93, 93, 93, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 91, 91, -1, 91, 91, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, -1, 92, -1, -1, 0, 0, 0, 0, 97, 96, 96, 96, -1, -1, 86, -1, -1, -1, -1, -1, -1, 93, 93, 93, 93, 93, 93, 93, 93, 93, 60, 31, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 20, 93, 93, 93, 93, 43, 44, 47, 93, 93, 93, 93, 48, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, -1, -1, -1, -1, 97, 91, 91, 91, -1, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, -1, -1, -1, -1, -1, 0, 0, 0, -1, 97, -1, 97, -1, -1, -1, -1, -1, -1, -1, -1, 93, 93, 93, 93, 17, 29, 93, 19, 93, 32, 33, 93, 93, 93, 11, 93, 93, 93, 93, 93, 57, 37, 93, 93, 93, 93, 21, 93, 93, 93, 93, 56, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 15, 93, 59, -1, -1, -1, -1, 97, 97, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, 91, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 97, -1, -1, -1, -1, -1, -1, -1, -1, 93, 93, 93, 93, 30, 13, 93, 93, 93, 93, 93, 93, 2, 22, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 93, 18, 93, 93, 93, 93, 53, 93, 93, 93, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 93, -1, -1, 94, 93, 93, 93, 93, 93, 93, 93, 93, 23, 93, 93, 93, 93, 93, 93, 93, 93, 3, 93, 93, 93, 93, 93, 4, 49, 93, 7, 93, 93, 54, 93, 93, 93, 93, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, 93, 93, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, 93, 93, 16, 93, 34, 93, 93, 26, 93, 93, 93, 93, 93, 93, 93, 93, 6, 93, 93, 93, 93, 93, 93, 25, 93, 93, -1, -1, -1, -1, 91, 91, 91, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, 93, -1, -1, 1, 93, 93, 93, 93, 93, 93, 93, 41, 93, 45, 93, 93, 93, 93, 93, 93, 93, 93, 93, 10, 97, 91, 91, 91, 0, 0, -1, 0, -1, -1, 93, 93, 93, 93, 93, 93, 14, 93, 93, 24, 5, 93, 93, 93, 93, 9, 93, -1, -1, 12, 28, 93, 93, 27, 39, 93, 93, 93, 93, 93, 93, 93, 93, -1, -1, 93, 36, 93, 93, 93, 93, 93, 93, 52, 93, -1, 94, 35, 93, 42, 93, 93, 51, 8, 93, -1, 93, 46, 50, 55, -1, 93, -1, 40, 94, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
