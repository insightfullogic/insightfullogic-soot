/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

/* THIS FILE IS AUTOMATICALLY GENERATED USING soot/make_singletons. DO NOT EDIT! */

package soot;
import soot.jimple.toolkits.typing.TypeAssigner;
import soot.xml.*;
import soot.baf.*;
import soot.baf.internal.*;
import soot.baf.toolkits.base.*;
import soot.coffi.*;
import soot.dava.*;
import soot.dava.internal.asg.*;
import soot.dava.internal.AST.*;
import soot.dava.internal.javaRep.*;
import soot.dava.internal.SET.*;
import soot.dava.toolkits.base.AST.*;
import soot.dava.toolkits.base.DavaMonitor.*;
import soot.dava.toolkits.base.finders.*;
import soot.dava.toolkits.base.misc.*;
import soot.grimp.*;
import soot.grimp.internal.*;
import soot.grimp.toolkits.base.*;
import soot.jimple.*;
import soot.jimple.internal.*;
import soot.jimple.parser.*;
import soot.jimple.parser.analysis.*;
import soot.jimple.parser.lexer.*;
import soot.jimple.parser.node.*;
import soot.jimple.parser.parser.*;
import soot.jimple.spark.*;
import soot.jimple.spark.builder.*;
import soot.jimple.spark.internal.*;
import soot.jimple.spark.pag.*;
import soot.jimple.spark.sets.*;
import soot.jimple.spark.solver.*;
import soot.jimple.spark.fieldrw.*;
import soot.jimple.toolkits.annotation.arraycheck.*;
import soot.jimple.toolkits.annotation.nullcheck.*;
import soot.jimple.toolkits.annotation.callgraph.*;
import soot.jimple.toolkits.annotation.parity.*;
import soot.jimple.toolkits.annotation.methods.*;
import soot.jimple.toolkits.annotation.fields.*;
import soot.jimple.toolkits.annotation.qualifiers.*;
import soot.jimple.toolkits.annotation.profiling.*;
import soot.jimple.toolkits.annotation.tags.*;
import soot.jimple.toolkits.annotation.defs.*;
import soot.jimple.toolkits.annotation.liveness.*;
import soot.jimple.toolkits.base.*;
import soot.jimple.toolkits.graph.*;
import soot.jimple.toolkits.invoke.*;
import soot.jimple.toolkits.pointer.*;
import soot.jimple.toolkits.pointer.nativemethods.*;
import soot.jimple.toolkits.pointer.representations.*;
import soot.jimple.toolkits.pointer.util.*;
import soot.jimple.toolkits.scalar.*;
import soot.jimple.toolkits.scalar.pre.*;
import soot.jimple.toolkits.typing.integer.*;
import soot.jimple.toolkits.callgraph.*;
import soot.options.*;
import soot.tagkit.*;
import soot.toolkits.graph.*;
import soot.toolkits.scalar.*;
import soot.util.*;
import soot.util.queue.*;
import soot.shimple.*;
import soot.shimple.toolkits.scalar.*;
import soot.relations.*;
import soot.toolkits.graph.interaction.*;
import soot.util.cfgcmd.*;
import soot.toolkits.exceptions.*;

/** A class to group together all the global variables in Soot. */
public class Singletons {
    public final class Global {
        private Global() {}
    }
    private Global g = new Global();

    private JBuddyProfiler instanceJBuddyProfiler;
    public JBuddyProfiler JBuddyProfiler() {
        if( instanceJBuddyProfiler == null ) instanceJBuddyProfiler = new JBuddyProfiler( g );
        return instanceJBuddyProfiler;
    }

    private PhaseOptions instancePhaseOptions;
    public PhaseOptions PhaseOptions() {
        if( instancePhaseOptions == null ) instancePhaseOptions = new PhaseOptions( g );
        return instancePhaseOptions;
    }

    private VirtualCalls instanceVirtualCalls;
    public VirtualCalls VirtualCalls() {
        if( instanceVirtualCalls == null ) instanceVirtualCalls = new VirtualCalls( g );
        return instanceVirtualCalls;
    }

    private FieldTagger instanceFieldTagger;
    public FieldTagger FieldTagger() {
        if( instanceFieldTagger == null ) instanceFieldTagger = new FieldTagger( g );
        return instanceFieldTagger;
    }

    private SharedBitSetCache instanceSharedBitSetCache;
    public SharedBitSetCache SharedBitSetCache() {
        if( instanceSharedBitSetCache == null ) instanceSharedBitSetCache = new SharedBitSetCache( g );
        return instanceSharedBitSetCache;
    }

    private Options instanceOptions;
    public Options Options() {
        if( instanceOptions == null ) instanceOptions = new Options( g );
        return instanceOptions;
    }

    private CHATransformer instanceCHATransformer;
    public CHATransformer CHATransformer() {
        if( instanceCHATransformer == null ) instanceCHATransformer = new CHATransformer( g );
        return instanceCHATransformer;
    }

    private SlowPseudoTopologicalOrderer instanceSlowPseudoTopologicalOrderer;
    public SlowPseudoTopologicalOrderer SlowPseudoTopologicalOrderer() {
        if( instanceSlowPseudoTopologicalOrderer == null ) instanceSlowPseudoTopologicalOrderer = new SlowPseudoTopologicalOrderer( g );
        return instanceSlowPseudoTopologicalOrderer;
    }

    private SynchronizerManager instanceSynchronizerManager;
    public SynchronizerManager SynchronizerManager() {
        if( instanceSynchronizerManager == null ) instanceSynchronizerManager = new SynchronizerManager( g );
        return instanceSynchronizerManager;
    }

    private ClassHierarchy instanceClassHierarchy;
    public ClassHierarchy ClassHierarchy() {
        if( instanceClassHierarchy == null ) instanceClassHierarchy = new ClassHierarchy( g );
        return instanceClassHierarchy;
    }

    private Main instanceMain;
    public Main Main() {
        if( instanceMain == null ) instanceMain = new Main( g );
        return instanceMain;
    }

    private TagManager instanceTagManager;
    public TagManager TagManager() {
        if( instanceTagManager == null ) instanceTagManager = new TagManager( g );
        return instanceTagManager;
    }

    private Environment instanceEnvironment;
    public Environment Environment() {
        if( instanceEnvironment == null ) instanceEnvironment = new Environment( g );
        return instanceEnvironment;
    }

    private TypeConstants instanceTypeConstants;
    public TypeConstants TypeConstants() {
        if( instanceTypeConstants == null ) instanceTypeConstants = new TypeConstants( g );
        return instanceTypeConstants;
    }

    private NativeMethodDriver instanceNativeMethodDriver;
    public NativeMethodDriver NativeMethodDriver() {
        if( instanceNativeMethodDriver == null ) instanceNativeMethodDriver = new NativeMethodDriver( g );
        return instanceNativeMethodDriver;
    }

    private Util instanceUtil;
    public Util Util() {
        if( instanceUtil == null ) instanceUtil = new Util( g );
        return instanceUtil;
    }

    private SourceLocator instanceSourceLocator;
    public SourceLocator SourceLocator() {
        if( instanceSourceLocator == null ) instanceSourceLocator = new SourceLocator( g );
        return instanceSourceLocator;
    }

    private CONSTANT_Utf8_collector instanceCONSTANT_Utf8_collector;
    public CONSTANT_Utf8_collector CONSTANT_Utf8_collector() {
        if( instanceCONSTANT_Utf8_collector == null ) instanceCONSTANT_Utf8_collector = new CONSTANT_Utf8_collector( g );
        return instanceCONSTANT_Utf8_collector;
    }

    private AbruptEdgeFinder instanceAbruptEdgeFinder;
    public AbruptEdgeFinder AbruptEdgeFinder() {
        if( instanceAbruptEdgeFinder == null ) instanceAbruptEdgeFinder = new AbruptEdgeFinder( g );
        return instanceAbruptEdgeFinder;
    }

    private Aggregator instanceAggregator;
    public Aggregator Aggregator() {
        if( instanceAggregator == null ) instanceAggregator = new Aggregator( g );
        return instanceAggregator;
    }

    private ArrayBoundsChecker instanceArrayBoundsChecker;
    public ArrayBoundsChecker ArrayBoundsChecker() {
        if( instanceArrayBoundsChecker == null ) instanceArrayBoundsChecker = new ArrayBoundsChecker( g );
        return instanceArrayBoundsChecker;
    }

    private ArrayElement instanceArrayElement;
    public ArrayElement ArrayElement() {
        if( instanceArrayElement == null ) instanceArrayElement = new ArrayElement( g );
        return instanceArrayElement;
    }

    private ArrayNullTagAggregator instanceArrayNullTagAggregator;
    public ArrayNullTagAggregator ArrayNullTagAggregator() {
        if( instanceArrayNullTagAggregator == null ) instanceArrayNullTagAggregator = new ArrayNullTagAggregator( g );
        return instanceArrayNullTagAggregator;
    }

    private ASTWalker instanceASTWalker;
    public ASTWalker ASTWalker() {
        if( instanceASTWalker == null ) instanceASTWalker = new ASTWalker( g );
        return instanceASTWalker;
    }

    private BafInputRep instanceBafInputRep;
    public BafInputRep BafInputRep() {
        if( instanceBafInputRep == null ) instanceBafInputRep = new BafInputRep( g );
        return instanceBafInputRep;
    }

    private Baf instanceBaf;
    public Baf Baf() {
        if( instanceBaf == null ) instanceBaf = new Baf( g );
        return instanceBaf;
    }

    private BooleanType instanceBooleanType;
    public BooleanType BooleanType() {
        if( instanceBooleanType == null ) instanceBooleanType = new BooleanType( g );
        return instanceBooleanType;
    }

    private BusyCodeMotion instanceBusyCodeMotion;
    public BusyCodeMotion BusyCodeMotion() {
        if( instanceBusyCodeMotion == null ) instanceBusyCodeMotion = new BusyCodeMotion( g );
        return instanceBusyCodeMotion;
    }

    private ByteType instanceByteType;
    public ByteType ByteType() {
        if( instanceByteType == null ) instanceByteType = new ByteType( g );
        return instanceByteType;
    }

    private CastCheckEliminatorDumper instanceCastCheckEliminatorDumper;
    public CastCheckEliminatorDumper CastCheckEliminatorDumper() {
        if( instanceCastCheckEliminatorDumper == null ) instanceCastCheckEliminatorDumper = new CastCheckEliminatorDumper( g );
        return instanceCastCheckEliminatorDumper;
    }

    private CharType instanceCharType;
    public CharType CharType() {
        if( instanceCharType == null ) instanceCharType = new CharType( g );
        return instanceCharType;
    }

    private ClassFieldAnalysis instanceClassFieldAnalysis;
    public ClassFieldAnalysis ClassFieldAnalysis() {
        if( instanceClassFieldAnalysis == null ) instanceClassFieldAnalysis = new ClassFieldAnalysis( g );
        return instanceClassFieldAnalysis;
    }

    private ClassInputRep instanceClassInputRep;
    public ClassInputRep ClassInputRep() {
        if( instanceClassInputRep == null ) instanceClassInputRep = new ClassInputRep( g );
        return instanceClassInputRep;
    }

    private CommonSubexpressionEliminator instanceCommonSubexpressionEliminator;
    public CommonSubexpressionEliminator CommonSubexpressionEliminator() {
        if( instanceCommonSubexpressionEliminator == null ) instanceCommonSubexpressionEliminator = new CommonSubexpressionEliminator( g );
        return instanceCommonSubexpressionEliminator;
    }

    private ConditionalBranchFolder instanceConditionalBranchFolder;
    public ConditionalBranchFolder ConditionalBranchFolder() {
        if( instanceConditionalBranchFolder == null ) instanceConditionalBranchFolder = new ConditionalBranchFolder( g );
        return instanceConditionalBranchFolder;
    }

    private ConstantPropagatorAndFolder instanceConstantPropagatorAndFolder;
    public ConstantPropagatorAndFolder ConstantPropagatorAndFolder() {
        if( instanceConstantPropagatorAndFolder == null ) instanceConstantPropagatorAndFolder = new ConstantPropagatorAndFolder( g );
        return instanceConstantPropagatorAndFolder;
    }

    private ConstructorFolder instanceConstructorFolder;
    public ConstructorFolder ConstructorFolder() {
        if( instanceConstructorFolder == null ) instanceConstructorFolder = new ConstructorFolder( g );
        return instanceConstructorFolder;
    }

    private CopyPropagator instanceCopyPropagator;
    public CopyPropagator CopyPropagator() {
        if( instanceCopyPropagator == null ) instanceCopyPropagator = new CopyPropagator( g );
        return instanceCopyPropagator;
    }

    private CriticalEdgeRemover instanceCriticalEdgeRemover;
    public CriticalEdgeRemover CriticalEdgeRemover() {
        if( instanceCriticalEdgeRemover == null ) instanceCriticalEdgeRemover = new CriticalEdgeRemover( g );
        return instanceCriticalEdgeRemover;
    }

    private CycleFinder instanceCycleFinder;
    public CycleFinder CycleFinder() {
        if( instanceCycleFinder == null ) instanceCycleFinder = new CycleFinder( g );
        return instanceCycleFinder;
    }

    private Dava instanceDava;
    public Dava Dava() {
        if( instanceDava == null ) instanceDava = new Dava( g );
        return instanceDava;
    }

    private DavaPrinter instanceDavaPrinter;
    public DavaPrinter DavaPrinter() {
        if( instanceDavaPrinter == null ) instanceDavaPrinter = new DavaPrinter( g );
        return instanceDavaPrinter;
    }

    private XMLPrinter instanceXMLPrinter;
    public XMLPrinter XMLPrinter() {
        if( instanceXMLPrinter == null ) instanceXMLPrinter = new XMLPrinter( g );
        return instanceXMLPrinter;
    }

    private Printer instancePrinter;
    public Printer Printer() {
        if( instancePrinter == null ) instancePrinter = new Printer( g );
        return instancePrinter;
    }

    private DeadAssignmentEliminator instanceDeadAssignmentEliminator;
    public DeadAssignmentEliminator DeadAssignmentEliminator() {
        if( instanceDeadAssignmentEliminator == null ) instanceDeadAssignmentEliminator = new DeadAssignmentEliminator( g );
        return instanceDeadAssignmentEliminator;
    }

    private DependenceTagAggregator instanceDependenceTagAggregator;
    public DependenceTagAggregator DependenceTagAggregator() {
        if( instanceDependenceTagAggregator == null ) instanceDependenceTagAggregator = new DependenceTagAggregator( g );
        return instanceDependenceTagAggregator;
    }

    private Double2ndHalfType instanceDouble2ndHalfType;
    public Double2ndHalfType Double2ndHalfType() {
        if( instanceDouble2ndHalfType == null ) instanceDouble2ndHalfType = new Double2ndHalfType( g );
        return instanceDouble2ndHalfType;
    }

    private DoubleType instanceDoubleType;
    public DoubleType DoubleType() {
        if( instanceDoubleType == null ) instanceDoubleType = new DoubleType( g );
        return instanceDoubleType;
    }

    private DoubleWordType instanceDoubleWordType;
    public DoubleWordType DoubleWordType() {
        if( instanceDoubleWordType == null ) instanceDoubleWordType = new DoubleWordType( g );
        return instanceDoubleWordType;
    }

    private DumbPointerAnalysis instanceDumbPointerAnalysis;
    public DumbPointerAnalysis DumbPointerAnalysis() {
        if( instanceDumbPointerAnalysis == null ) instanceDumbPointerAnalysis = new DumbPointerAnalysis( g );
        return instanceDumbPointerAnalysis;
    }

    private EmptyPointsToSet instanceEmptyPointsToSet;
    public EmptyPointsToSet EmptyPointsToSet() {
        if( instanceEmptyPointsToSet == null ) instanceEmptyPointsToSet = new EmptyPointsToSet( g );
        return instanceEmptyPointsToSet;
    }

    private ErroneousType instanceErroneousType;
    public ErroneousType ErroneousType() {
        if( instanceErroneousType == null ) instanceErroneousType = new ErroneousType( g );
        return instanceErroneousType;
    }

    private ExceptionFinder instanceExceptionFinder;
    public ExceptionFinder ExceptionFinder() {
        if( instanceExceptionFinder == null ) instanceExceptionFinder = new ExceptionFinder( g );
        return instanceExceptionFinder;
    }

    private FieldRWTagger instanceFieldRWTagger;
    public FieldRWTagger FieldRWTagger() {
        if( instanceFieldRWTagger == null ) instanceFieldRWTagger = new FieldRWTagger( g );
        return instanceFieldRWTagger;
    }

    private FloatType instanceFloatType;
    public FloatType FloatType() {
        if( instanceFloatType == null ) instanceFloatType = new FloatType( g );
        return instanceFloatType;
    }

    private FullObjectSet instanceFullObjectSet;
    public FullObjectSet FullObjectSet() {
        if( instanceFullObjectSet == null ) instanceFullObjectSet = new FullObjectSet( g );
        return instanceFullObjectSet;
    }

    private Grimp instanceGrimp;
    public Grimp Grimp() {
        if( instanceGrimp == null ) instanceGrimp = new Grimp( g );
        return instanceGrimp;
    }

    private IfFinder instanceIfFinder;
    public IfFinder IfFinder() {
        if( instanceIfFinder == null ) instanceIfFinder = new IfFinder( g );
        return instanceIfFinder;
    }

    private IntType instanceIntType;
    public IntType IntType() {
        if( instanceIntType == null ) instanceIntType = new IntType( g );
        return instanceIntType;
    }

    private JavaInputRep instanceJavaInputRep;
    public JavaInputRep JavaInputRep() {
        if( instanceJavaInputRep == null ) instanceJavaInputRep = new JavaInputRep( g );
        return instanceJavaInputRep;
    }

    private JavaIoFileDescriptorNative instanceJavaIoFileDescriptorNative;
    public JavaIoFileDescriptorNative JavaIoFileDescriptorNative() {
        if( instanceJavaIoFileDescriptorNative == null ) instanceJavaIoFileDescriptorNative = new JavaIoFileDescriptorNative( g );
        return instanceJavaIoFileDescriptorNative;
    }

    private JavaIoFileInputStreamNative instanceJavaIoFileInputStreamNative;
    public JavaIoFileInputStreamNative JavaIoFileInputStreamNative() {
        if( instanceJavaIoFileInputStreamNative == null ) instanceJavaIoFileInputStreamNative = new JavaIoFileInputStreamNative( g );
        return instanceJavaIoFileInputStreamNative;
    }

    private JavaIoFileOutputStreamNative instanceJavaIoFileOutputStreamNative;
    public JavaIoFileOutputStreamNative JavaIoFileOutputStreamNative() {
        if( instanceJavaIoFileOutputStreamNative == null ) instanceJavaIoFileOutputStreamNative = new JavaIoFileOutputStreamNative( g );
        return instanceJavaIoFileOutputStreamNative;
    }

    private JavaIoFileSystemNative instanceJavaIoFileSystemNative;
    public JavaIoFileSystemNative JavaIoFileSystemNative() {
        if( instanceJavaIoFileSystemNative == null ) instanceJavaIoFileSystemNative = new JavaIoFileSystemNative( g );
        return instanceJavaIoFileSystemNative;
    }

    private JavaIoObjectInputStreamNative instanceJavaIoObjectInputStreamNative;
    public JavaIoObjectInputStreamNative JavaIoObjectInputStreamNative() {
        if( instanceJavaIoObjectInputStreamNative == null ) instanceJavaIoObjectInputStreamNative = new JavaIoObjectInputStreamNative( g );
        return instanceJavaIoObjectInputStreamNative;
    }

    private JavaIoObjectOutputStreamNative instanceJavaIoObjectOutputStreamNative;
    public JavaIoObjectOutputStreamNative JavaIoObjectOutputStreamNative() {
        if( instanceJavaIoObjectOutputStreamNative == null ) instanceJavaIoObjectOutputStreamNative = new JavaIoObjectOutputStreamNative( g );
        return instanceJavaIoObjectOutputStreamNative;
    }

    private JavaIoObjectStreamClassNative instanceJavaIoObjectStreamClassNative;
    public JavaIoObjectStreamClassNative JavaIoObjectStreamClassNative() {
        if( instanceJavaIoObjectStreamClassNative == null ) instanceJavaIoObjectStreamClassNative = new JavaIoObjectStreamClassNative( g );
        return instanceJavaIoObjectStreamClassNative;
    }

    private JavaLangClassLoaderNative instanceJavaLangClassLoaderNative;
    public JavaLangClassLoaderNative JavaLangClassLoaderNative() {
        if( instanceJavaLangClassLoaderNative == null ) instanceJavaLangClassLoaderNative = new JavaLangClassLoaderNative( g );
        return instanceJavaLangClassLoaderNative;
    }

    private JavaLangClassLoaderNativeLibraryNative instanceJavaLangClassLoaderNativeLibraryNative;
    public JavaLangClassLoaderNativeLibraryNative JavaLangClassLoaderNativeLibraryNative() {
        if( instanceJavaLangClassLoaderNativeLibraryNative == null ) instanceJavaLangClassLoaderNativeLibraryNative = new JavaLangClassLoaderNativeLibraryNative( g );
        return instanceJavaLangClassLoaderNativeLibraryNative;
    }

    private JavaLangClassNative instanceJavaLangClassNative;
    public JavaLangClassNative JavaLangClassNative() {
        if( instanceJavaLangClassNative == null ) instanceJavaLangClassNative = new JavaLangClassNative( g );
        return instanceJavaLangClassNative;
    }

    private JavaLangDoubleNative instanceJavaLangDoubleNative;
    public JavaLangDoubleNative JavaLangDoubleNative() {
        if( instanceJavaLangDoubleNative == null ) instanceJavaLangDoubleNative = new JavaLangDoubleNative( g );
        return instanceJavaLangDoubleNative;
    }

    private JavaLangFloatNative instanceJavaLangFloatNative;
    public JavaLangFloatNative JavaLangFloatNative() {
        if( instanceJavaLangFloatNative == null ) instanceJavaLangFloatNative = new JavaLangFloatNative( g );
        return instanceJavaLangFloatNative;
    }

    private JavaLangObjectNative instanceJavaLangObjectNative;
    public JavaLangObjectNative JavaLangObjectNative() {
        if( instanceJavaLangObjectNative == null ) instanceJavaLangObjectNative = new JavaLangObjectNative( g );
        return instanceJavaLangObjectNative;
    }

    private JavaLangPackageNative instanceJavaLangPackageNative;
    public JavaLangPackageNative JavaLangPackageNative() {
        if( instanceJavaLangPackageNative == null ) instanceJavaLangPackageNative = new JavaLangPackageNative( g );
        return instanceJavaLangPackageNative;
    }

    private JavaLangReflectArrayNative instanceJavaLangReflectArrayNative;
    public JavaLangReflectArrayNative JavaLangReflectArrayNative() {
        if( instanceJavaLangReflectArrayNative == null ) instanceJavaLangReflectArrayNative = new JavaLangReflectArrayNative( g );
        return instanceJavaLangReflectArrayNative;
    }

    private JavaLangReflectConstructorNative instanceJavaLangReflectConstructorNative;
    public JavaLangReflectConstructorNative JavaLangReflectConstructorNative() {
        if( instanceJavaLangReflectConstructorNative == null ) instanceJavaLangReflectConstructorNative = new JavaLangReflectConstructorNative( g );
        return instanceJavaLangReflectConstructorNative;
    }

    private JavaLangReflectFieldNative instanceJavaLangReflectFieldNative;
    public JavaLangReflectFieldNative JavaLangReflectFieldNative() {
        if( instanceJavaLangReflectFieldNative == null ) instanceJavaLangReflectFieldNative = new JavaLangReflectFieldNative( g );
        return instanceJavaLangReflectFieldNative;
    }

    private JavaLangReflectMethodNative instanceJavaLangReflectMethodNative;
    public JavaLangReflectMethodNative JavaLangReflectMethodNative() {
        if( instanceJavaLangReflectMethodNative == null ) instanceJavaLangReflectMethodNative = new JavaLangReflectMethodNative( g );
        return instanceJavaLangReflectMethodNative;
    }

    private JavaLangReflectProxyNative instanceJavaLangReflectProxyNative;
    public JavaLangReflectProxyNative JavaLangReflectProxyNative() {
        if( instanceJavaLangReflectProxyNative == null ) instanceJavaLangReflectProxyNative = new JavaLangReflectProxyNative( g );
        return instanceJavaLangReflectProxyNative;
    }

    private JavaLangRuntimeNative instanceJavaLangRuntimeNative;
    public JavaLangRuntimeNative JavaLangRuntimeNative() {
        if( instanceJavaLangRuntimeNative == null ) instanceJavaLangRuntimeNative = new JavaLangRuntimeNative( g );
        return instanceJavaLangRuntimeNative;
    }

    private JavaLangSecurityManagerNative instanceJavaLangSecurityManagerNative;
    public JavaLangSecurityManagerNative JavaLangSecurityManagerNative() {
        if( instanceJavaLangSecurityManagerNative == null ) instanceJavaLangSecurityManagerNative = new JavaLangSecurityManagerNative( g );
        return instanceJavaLangSecurityManagerNative;
    }

    private JavaLangShutdownNative instanceJavaLangShutdownNative;
    public JavaLangShutdownNative JavaLangShutdownNative() {
        if( instanceJavaLangShutdownNative == null ) instanceJavaLangShutdownNative = new JavaLangShutdownNative( g );
        return instanceJavaLangShutdownNative;
    }

    private JavaLangStrictMathNative instanceJavaLangStrictMathNative;
    public JavaLangStrictMathNative JavaLangStrictMathNative() {
        if( instanceJavaLangStrictMathNative == null ) instanceJavaLangStrictMathNative = new JavaLangStrictMathNative( g );
        return instanceJavaLangStrictMathNative;
    }

    private JavaLangStringNative instanceJavaLangStringNative;
    public JavaLangStringNative JavaLangStringNative() {
        if( instanceJavaLangStringNative == null ) instanceJavaLangStringNative = new JavaLangStringNative( g );
        return instanceJavaLangStringNative;
    }

    private JavaLangSystemNative instanceJavaLangSystemNative;
    public JavaLangSystemNative JavaLangSystemNative() {
        if( instanceJavaLangSystemNative == null ) instanceJavaLangSystemNative = new JavaLangSystemNative( g );
        return instanceJavaLangSystemNative;
    }

    private JavaLangThreadNative instanceJavaLangThreadNative;
    public JavaLangThreadNative JavaLangThreadNative() {
        if( instanceJavaLangThreadNative == null ) instanceJavaLangThreadNative = new JavaLangThreadNative( g );
        return instanceJavaLangThreadNative;
    }

    private JavaLangThrowableNative instanceJavaLangThrowableNative;
    public JavaLangThrowableNative JavaLangThrowableNative() {
        if( instanceJavaLangThrowableNative == null ) instanceJavaLangThrowableNative = new JavaLangThrowableNative( g );
        return instanceJavaLangThrowableNative;
    }

    private JavaNetInetAddressImplNative instanceJavaNetInetAddressImplNative;
    public JavaNetInetAddressImplNative JavaNetInetAddressImplNative() {
        if( instanceJavaNetInetAddressImplNative == null ) instanceJavaNetInetAddressImplNative = new JavaNetInetAddressImplNative( g );
        return instanceJavaNetInetAddressImplNative;
    }

    private JavaNetInetAddressNative instanceJavaNetInetAddressNative;
    public JavaNetInetAddressNative JavaNetInetAddressNative() {
        if( instanceJavaNetInetAddressNative == null ) instanceJavaNetInetAddressNative = new JavaNetInetAddressNative( g );
        return instanceJavaNetInetAddressNative;
    }

    private JavaSecurityAccessControllerNative instanceJavaSecurityAccessControllerNative;
    public JavaSecurityAccessControllerNative JavaSecurityAccessControllerNative() {
        if( instanceJavaSecurityAccessControllerNative == null ) instanceJavaSecurityAccessControllerNative = new JavaSecurityAccessControllerNative( g );
        return instanceJavaSecurityAccessControllerNative;
    }

    private JavaUtilJarJarFileNative instanceJavaUtilJarJarFileNative;
    public JavaUtilJarJarFileNative JavaUtilJarJarFileNative() {
        if( instanceJavaUtilJarJarFileNative == null ) instanceJavaUtilJarJarFileNative = new JavaUtilJarJarFileNative( g );
        return instanceJavaUtilJarJarFileNative;
    }

    private JavaUtilResourceBundleNative instanceJavaUtilResourceBundleNative;
    public JavaUtilResourceBundleNative JavaUtilResourceBundleNative() {
        if( instanceJavaUtilResourceBundleNative == null ) instanceJavaUtilResourceBundleNative = new JavaUtilResourceBundleNative( g );
        return instanceJavaUtilResourceBundleNative;
    }

    private JavaUtilTimeZoneNative instanceJavaUtilTimeZoneNative;
    public JavaUtilTimeZoneNative JavaUtilTimeZoneNative() {
        if( instanceJavaUtilTimeZoneNative == null ) instanceJavaUtilTimeZoneNative = new JavaUtilTimeZoneNative( g );
        return instanceJavaUtilTimeZoneNative;
    }

    private JavaUtilZipCRC32Native instanceJavaUtilZipCRC32Native;
    public JavaUtilZipCRC32Native JavaUtilZipCRC32Native() {
        if( instanceJavaUtilZipCRC32Native == null ) instanceJavaUtilZipCRC32Native = new JavaUtilZipCRC32Native( g );
        return instanceJavaUtilZipCRC32Native;
    }

    private JavaUtilZipInflaterNative instanceJavaUtilZipInflaterNative;
    public JavaUtilZipInflaterNative JavaUtilZipInflaterNative() {
        if( instanceJavaUtilZipInflaterNative == null ) instanceJavaUtilZipInflaterNative = new JavaUtilZipInflaterNative( g );
        return instanceJavaUtilZipInflaterNative;
    }

    private JavaUtilZipZipEntryNative instanceJavaUtilZipZipEntryNative;
    public JavaUtilZipZipEntryNative JavaUtilZipZipEntryNative() {
        if( instanceJavaUtilZipZipEntryNative == null ) instanceJavaUtilZipZipEntryNative = new JavaUtilZipZipEntryNative( g );
        return instanceJavaUtilZipZipEntryNative;
    }

    private JavaUtilZipZipFileNative instanceJavaUtilZipZipFileNative;
    public JavaUtilZipZipFileNative JavaUtilZipZipFileNative() {
        if( instanceJavaUtilZipZipFileNative == null ) instanceJavaUtilZipZipFileNative = new JavaUtilZipZipFileNative( g );
        return instanceJavaUtilZipZipFileNative;
    }

    private JimpleInputRep instanceJimpleInputRep;
    public JimpleInputRep JimpleInputRep() {
        if( instanceJimpleInputRep == null ) instanceJimpleInputRep = new JimpleInputRep( g );
        return instanceJimpleInputRep;
    }

    private Jimple instanceJimple;
    public Jimple Jimple() {
        if( instanceJimple == null ) instanceJimple = new Jimple( g );
        return instanceJimple;
    }

    private LabeledBlockFinder instanceLabeledBlockFinder;
    public LabeledBlockFinder LabeledBlockFinder() {
        if( instanceLabeledBlockFinder == null ) instanceLabeledBlockFinder = new LabeledBlockFinder( g );
        return instanceLabeledBlockFinder;
    }

    private LazyCodeMotion instanceLazyCodeMotion;
    public LazyCodeMotion LazyCodeMotion() {
        if( instanceLazyCodeMotion == null ) instanceLazyCodeMotion = new LazyCodeMotion( g );
        return instanceLazyCodeMotion;
    }

    private LineNumberTagAggregator instanceLineNumberTagAggregator;
    public LineNumberTagAggregator LineNumberTagAggregator() {
        if( instanceLineNumberTagAggregator == null ) instanceLineNumberTagAggregator = new LineNumberTagAggregator( g );
        return instanceLineNumberTagAggregator;
    }

    private LoadStoreOptimizer instanceLoadStoreOptimizer;
    public LoadStoreOptimizer LoadStoreOptimizer() {
        if( instanceLoadStoreOptimizer == null ) instanceLoadStoreOptimizer = new LoadStoreOptimizer( g );
        return instanceLoadStoreOptimizer;
    }

    private LocalNameStandardizer instanceLocalNameStandardizer;
    public LocalNameStandardizer LocalNameStandardizer() {
        if( instanceLocalNameStandardizer == null ) instanceLocalNameStandardizer = new LocalNameStandardizer( g );
        return instanceLocalNameStandardizer;
    }

    private LocalPacker instanceLocalPacker;
    public LocalPacker LocalPacker() {
        if( instanceLocalPacker == null ) instanceLocalPacker = new LocalPacker( g );
        return instanceLocalPacker;
    }

    private LocalSplitter instanceLocalSplitter;
    public LocalSplitter LocalSplitter() {
        if( instanceLocalSplitter == null ) instanceLocalSplitter = new LocalSplitter( g );
        return instanceLocalSplitter;
    }

    private Long2ndHalfType instanceLong2ndHalfType;
    public Long2ndHalfType Long2ndHalfType() {
        if( instanceLong2ndHalfType == null ) instanceLong2ndHalfType = new Long2ndHalfType( g );
        return instanceLong2ndHalfType;
    }

    private LongType instanceLongType;
    public LongType LongType() {
        if( instanceLongType == null ) instanceLongType = new LongType( g );
        return instanceLongType;
    }

    private MonitorConverter instanceMonitorConverter;
    public MonitorConverter MonitorConverter() {
        if( instanceMonitorConverter == null ) instanceMonitorConverter = new MonitorConverter( g );
        return instanceMonitorConverter;
    }

    private NopEliminator instanceNopEliminator;
    public NopEliminator NopEliminator() {
        if( instanceNopEliminator == null ) instanceNopEliminator = new NopEliminator( g );
        return instanceNopEliminator;
    }

    private NullConstant instanceNullConstant;
    public NullConstant NullConstant() {
        if( instanceNullConstant == null ) instanceNullConstant = new NullConstant( g );
        return instanceNullConstant;
    }

    private NullPointerChecker instanceNullPointerChecker;
    public NullPointerChecker NullPointerChecker() {
        if( instanceNullPointerChecker == null ) instanceNullPointerChecker = new NullPointerChecker( g );
        return instanceNullPointerChecker;
    }

    private NullType instanceNullType;
    public NullType NullType() {
        if( instanceNullType == null ) instanceNullType = new NullType( g );
        return instanceNullType;
    }

    private PackageNamer instancePackageNamer;
    public PackageNamer PackageNamer() {
        if( instancePackageNamer == null ) instancePackageNamer = new PackageNamer( g );
        return instancePackageNamer;
    }

    private PackManager instancePackManager;
    public PackManager PackManager() {
        if( instancePackManager == null ) instancePackManager = new PackManager( g );
        return instancePackManager;
    }

    private PeepholeOptimizer instancePeepholeOptimizer;
    public PeepholeOptimizer PeepholeOptimizer() {
        if( instancePeepholeOptimizer == null ) instancePeepholeOptimizer = new PeepholeOptimizer( g );
        return instancePeepholeOptimizer;
    }

    private ProfilingGenerator instanceProfilingGenerator;
    public ProfilingGenerator ProfilingGenerator() {
        if( instanceProfilingGenerator == null ) instanceProfilingGenerator = new ProfilingGenerator( g );
        return instanceProfilingGenerator;
    }

    private RectangularArrayFinder instanceRectangularArrayFinder;
    public RectangularArrayFinder RectangularArrayFinder() {
        if( instanceRectangularArrayFinder == null ) instanceRectangularArrayFinder = new RectangularArrayFinder( g );
        return instanceRectangularArrayFinder;
    }

    private RefType instanceRefType;
    public RefType RefType() {
        if( instanceRefType == null ) instanceRefType = new RefType( g );
        return instanceRefType;
    }

    private Scene instanceScene;
    public Scene Scene() {
        if( instanceScene == null ) instanceScene = new Scene( g );
        return instanceScene;
    }

    private SequenceFinder instanceSequenceFinder;
    public SequenceFinder SequenceFinder() {
        if( instanceSequenceFinder == null ) instanceSequenceFinder = new SequenceFinder( g );
        return instanceSequenceFinder;
    }

    private Shimple instanceShimple;
    public Shimple Shimple() {
        if( instanceShimple == null ) instanceShimple = new Shimple( g );
        return instanceShimple;
    }

    private ShimpleTransformer instanceShimpleTransformer;
    public ShimpleTransformer ShimpleTransformer() {
        if( instanceShimpleTransformer == null ) instanceShimpleTransformer = new ShimpleTransformer( g );
        return instanceShimpleTransformer;
    }

    private SConstantPropagatorAndFolder instanceSConstantPropagatorAndFolder;
    public SConstantPropagatorAndFolder SConstantPropagatorAndFolder() {
        if( instanceSConstantPropagatorAndFolder == null ) instanceSConstantPropagatorAndFolder = new SConstantPropagatorAndFolder( g );
        return instanceSConstantPropagatorAndFolder;
    }

    private ShortType instanceShortType;
    public ShortType ShortType() {
        if( instanceShortType == null ) instanceShortType = new ShortType( g );
        return instanceShortType;
    }

    private SideEffectTagger instanceSideEffectTagger;
    public SideEffectTagger SideEffectTagger() {
        if( instanceSideEffectTagger == null ) instanceSideEffectTagger = new SideEffectTagger( g );
        return instanceSideEffectTagger;
    }

    private SparkTransformer instanceSparkTransformer;
    public SparkTransformer SparkTransformer() {
        if( instanceSparkTransformer == null ) instanceSparkTransformer = new SparkTransformer( g );
        return instanceSparkTransformer;
    }

    private BDDSparkTransformer instanceBDDSparkTransformer;
    public BDDSparkTransformer BDDSparkTransformer() {
        if( instanceBDDSparkTransformer == null ) instanceBDDSparkTransformer = new BDDSparkTransformer( g );
        return instanceBDDSparkTransformer;
    }

    private StaticInliner instanceStaticInliner;
    public StaticInliner StaticInliner() {
        if( instanceStaticInliner == null ) instanceStaticInliner = new StaticInliner( g );
        return instanceStaticInliner;
    }

    private StaticMethodBinder instanceStaticMethodBinder;
    public StaticMethodBinder StaticMethodBinder() {
        if( instanceStaticMethodBinder == null ) instanceStaticMethodBinder = new StaticMethodBinder( g );
        return instanceStaticMethodBinder;
    }

    private StmtAddressType instanceStmtAddressType;
    public StmtAddressType StmtAddressType() {
        if( instanceStmtAddressType == null ) instanceStmtAddressType = new StmtAddressType( g );
        return instanceStmtAddressType;
    }

    private SunMiscSignalHandlerNative instanceSunMiscSignalHandlerNative;
    public SunMiscSignalHandlerNative SunMiscSignalHandlerNative() {
        if( instanceSunMiscSignalHandlerNative == null ) instanceSunMiscSignalHandlerNative = new SunMiscSignalHandlerNative( g );
        return instanceSunMiscSignalHandlerNative;
    }

    private SunMiscSignalNative instanceSunMiscSignalNative;
    public SunMiscSignalNative SunMiscSignalNative() {
        if( instanceSunMiscSignalNative == null ) instanceSunMiscSignalNative = new SunMiscSignalNative( g );
        return instanceSunMiscSignalNative;
    }

    private SwitchFinder instanceSwitchFinder;
    public SwitchFinder SwitchFinder() {
        if( instanceSwitchFinder == null ) instanceSwitchFinder = new SwitchFinder( g );
        return instanceSwitchFinder;
    }

    private SynchronizedBlockFinder instanceSynchronizedBlockFinder;
    public SynchronizedBlockFinder SynchronizedBlockFinder() {
        if( instanceSynchronizedBlockFinder == null ) instanceSynchronizedBlockFinder = new SynchronizedBlockFinder( g );
        return instanceSynchronizedBlockFinder;
    }

    private ThrowFinder instanceThrowFinder;
    public ThrowFinder ThrowFinder() {
        if( instanceThrowFinder == null ) instanceThrowFinder = new ThrowFinder( g );
        return instanceThrowFinder;
    }

    private ThrowNullConverter instanceThrowNullConverter;
    public ThrowNullConverter ThrowNullConverter() {
        if( instanceThrowNullConverter == null ) instanceThrowNullConverter = new ThrowNullConverter( g );
        return instanceThrowNullConverter;
    }

    private Timers instanceTimers;
    public Timers Timers() {
        if( instanceTimers == null ) instanceTimers = new Timers( g );
        return instanceTimers;
    }

    private TryContentsFinder instanceTryContentsFinder;
    public TryContentsFinder TryContentsFinder() {
        if( instanceTryContentsFinder == null ) instanceTryContentsFinder = new TryContentsFinder( g );
        return instanceTryContentsFinder;
    }

    private TypeAssigner instanceTypeAssigner;
    public TypeAssigner TypeAssigner() {
        if( instanceTypeAssigner == null ) instanceTypeAssigner = new TypeAssigner( g );
        return instanceTypeAssigner;
    }

    private UnconditionalBranchFolder instanceUnconditionalBranchFolder;
    public UnconditionalBranchFolder UnconditionalBranchFolder() {
        if( instanceUnconditionalBranchFolder == null ) instanceUnconditionalBranchFolder = new UnconditionalBranchFolder( g );
        return instanceUnconditionalBranchFolder;
    }

    private UnknownType instanceUnknownType;
    public UnknownType UnknownType() {
        if( instanceUnknownType == null ) instanceUnknownType = new UnknownType( g );
        return instanceUnknownType;
    }

    private UnreachableCodeEliminator instanceUnreachableCodeEliminator;
    public UnreachableCodeEliminator UnreachableCodeEliminator() {
        if( instanceUnreachableCodeEliminator == null ) instanceUnreachableCodeEliminator = new UnreachableCodeEliminator( g );
        return instanceUnreachableCodeEliminator;
    }

    private UnusedLocalEliminator instanceUnusedLocalEliminator;
    public UnusedLocalEliminator UnusedLocalEliminator() {
        if( instanceUnusedLocalEliminator == null ) instanceUnusedLocalEliminator = new UnusedLocalEliminator( g );
        return instanceUnusedLocalEliminator;
    }

    private UnusuableType instanceUnusuableType;
    public UnusuableType UnusuableType() {
        if( instanceUnusuableType == null ) instanceUnusuableType = new UnusuableType( g );
        return instanceUnusuableType;
    }

    private UselessTryRemover instanceUselessTryRemover;
    public UselessTryRemover UselessTryRemover() {
        if( instanceUselessTryRemover == null ) instanceUselessTryRemover = new UselessTryRemover( g );
        return instanceUselessTryRemover;
    }

    private VoidType instanceVoidType;
    public VoidType VoidType() {
        if( instanceVoidType == null ) instanceVoidType = new VoidType( g );
        return instanceVoidType;
    }

    private WordType instanceWordType;
    public WordType WordType() {
        if( instanceWordType == null ) instanceWordType = new WordType( g );
        return instanceWordType;
    }

    private FieldReadTagAggregator instanceFieldReadTagAggregator;
    public FieldReadTagAggregator FieldReadTagAggregator() {
        if( instanceFieldReadTagAggregator == null ) instanceFieldReadTagAggregator = new FieldReadTagAggregator( g );
        return instanceFieldReadTagAggregator;
    }

    private FieldWriteTagAggregator instanceFieldWriteTagAggregator;
    public FieldWriteTagAggregator FieldWriteTagAggregator() {
        if( instanceFieldWriteTagAggregator == null ) instanceFieldWriteTagAggregator = new FieldWriteTagAggregator( g );
        return instanceFieldWriteTagAggregator;
    }

    private FieldTagAggregator instanceFieldTagAggregator;
    public FieldTagAggregator FieldTagAggregator() {
        if( instanceFieldTagAggregator == null ) instanceFieldTagAggregator = new FieldTagAggregator( g );
        return instanceFieldTagAggregator;
    }

    private EntryPoints instanceEntryPoints;
    public EntryPoints EntryPoints() {
        if( instanceEntryPoints == null ) instanceEntryPoints = new EntryPoints( g );
        return instanceEntryPoints;
    }

    private CallGraphTagger instanceCallGraphTagger;
    public CallGraphTagger CallGraphTagger() {
        if( instanceCallGraphTagger == null ) instanceCallGraphTagger = new CallGraphTagger( g );
        return instanceCallGraphTagger;
    }

    private NullPointerColorer instanceNullPointerColorer;
    public NullPointerColorer NullPointerColorer() {
        if( instanceNullPointerColorer == null ) instanceNullPointerColorer = new NullPointerColorer( g );
        return instanceNullPointerColorer;
    }

    private ParityTagger instanceParityTagger;
    public ParityTagger ParityTagger() {
        if( instanceParityTagger == null ) instanceParityTagger = new ParityTagger( g );
        return instanceParityTagger;
    }

    private UnreachableMethodsTagger instanceUnreachableMethodsTagger;
    public UnreachableMethodsTagger UnreachableMethodsTagger() {
        if( instanceUnreachableMethodsTagger == null ) instanceUnreachableMethodsTagger = new UnreachableMethodsTagger( g );
        return instanceUnreachableMethodsTagger;
    }

    private UnreachableFieldsTagger instanceUnreachableFieldsTagger;
    public UnreachableFieldsTagger UnreachableFieldsTagger() {
        if( instanceUnreachableFieldsTagger == null ) instanceUnreachableFieldsTagger = new UnreachableFieldsTagger( g );
        return instanceUnreachableFieldsTagger;
    }

    private TightestQualifiersTagger instanceTightestQualifiersTagger;
    public TightestQualifiersTagger TightestQualifiersTagger() {
        if( instanceTightestQualifiersTagger == null ) instanceTightestQualifiersTagger = new TightestQualifiersTagger( g );
        return instanceTightestQualifiersTagger;
    }

    private ParameterAliasTagger instanceParameterAliasTagger;
    public ParameterAliasTagger ParameterAliasTagger() {
        if( instanceParameterAliasTagger == null ) instanceParameterAliasTagger = new ParameterAliasTagger( g );
        return instanceParameterAliasTagger;
    }

    private ReachingDefsTagger instanceReachingDefsTagger;
    public ReachingDefsTagger ReachingDefsTagger() {
        if( instanceReachingDefsTagger == null ) instanceReachingDefsTagger = new ReachingDefsTagger( g );
        return instanceReachingDefsTagger;
    }

    private LiveVarsTagger instanceLiveVarsTagger;
    public LiveVarsTagger LiveVarsTagger() {
        if( instanceLiveVarsTagger == null ) instanceLiveVarsTagger = new LiveVarsTagger( g );
        return instanceLiveVarsTagger;
    }

    private CFGPrinter instanceCFGPrinter;
    public CFGPrinter CFGPrinter() {
        if( instanceCFGPrinter == null ) instanceCFGPrinter = new CFGPrinter( g );
        return instanceCFGPrinter;
    }

    private InteractionHandler instanceInteractionHandler;
    public InteractionHandler InteractionHandler() {
        if( instanceInteractionHandler == null ) instanceInteractionHandler = new InteractionHandler( g );
        return instanceInteractionHandler;
    }

    private PhaseDumper instancePhaseDumper;
    public PhaseDumper PhaseDumper() {
        if( instancePhaseDumper == null ) instancePhaseDumper = new PhaseDumper( g );
        return instancePhaseDumper;
    }

    private AltClassLoader instanceAltClassLoader;
    public AltClassLoader AltClassLoader() {
        if( instanceAltClassLoader == null ) instanceAltClassLoader = new AltClassLoader( g );
        return instanceAltClassLoader;
    }

    private ThrowableSet.Manager instanceThrowableSetManager;
    public ThrowableSet.Manager ThrowableSetManager() {
        if( instanceThrowableSetManager == null ) instanceThrowableSetManager = new ThrowableSet.Manager( g );
        return instanceThrowableSetManager;
    }

    private UnitThrowAnalysis instanceUnitThrowAnalysis;
    public UnitThrowAnalysis UnitThrowAnalysis() {
        if( instanceUnitThrowAnalysis == null ) instanceUnitThrowAnalysis = new UnitThrowAnalysis( g );
        return instanceUnitThrowAnalysis;
    }

    private PedanticThrowAnalysis instancePedanticThrowAnalysis;
    public PedanticThrowAnalysis PedanticThrowAnalysis() {
        if( instancePedanticThrowAnalysis == null ) instancePedanticThrowAnalysis = new PedanticThrowAnalysis( g );
        return instancePedanticThrowAnalysis;
    }

    private TrapTightener instanceTrapTightener;
    public TrapTightener TrapTightener() {
        if( instanceTrapTightener == null ) instanceTrapTightener = new TrapTightener( g );
        return instanceTrapTightener;
    }

    private CallGraphGrapher instanceCallGraphGrapher;
    public CallGraphGrapher CallGraphGrapher() {
        if( instanceCallGraphGrapher == null ) instanceCallGraphGrapher = new CallGraphGrapher( g );
        return instanceCallGraphGrapher;
    }

}
