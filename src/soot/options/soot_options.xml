<?xml version = '1.0' encoding = 'ISO-8859-1' ?>
<?xml-stylesheet type="text/xsl" href="soot_options.xsl"  ?>
<options>
	<section>
		<name>General Options</name>
		<boolopt>
			<name>Help</name>
			<alias>h</alias>
			<alias>help</alias>
			<short_desc>display help and exit</short_desc>
			<long_desc>This option displays the textual help message and exits immediately without doing any further processing</long_desc>
		</boolopt>
		<boolopt>
			<name>Version</name>
			<alias>version</alias>
			<short_desc>output version information and exit</short_desc>
			<long_desc>This option outputs the Soot version information and exits immediately without doing any further processing</long_desc>
		</boolopt>
		<boolopt>
			<name>Verbose</name>
			<alias>v</alias>
			<alias>verbose</alias>
			<short_desc>verbose mode</short_desc>
			<long_desc>Verbose mode.</long_desc>
		</boolopt>
		<boolopt>
			<name>Application Mode</name>
			<alias>app</alias>
			<short_desc>runs in application mode</short_desc>
			<long_desc>This option ...</long_desc>
		</boolopt>
                <boolopt>
			<name>Whole-Program Mode</name>
			<alias>w</alias>
			<alias>whole-program</alias>
			<short_desc>runs in whole-program mode</short_desc>
			<long_desc>This option ...</long_desc>
                </boolopt>
                <boolopt>
			<name>Debug</name>
			<alias>debug</alias>
			<short_desc>prints various Soot debugging info</short_desc>
			<long_desc>This option ...</long_desc>
                </boolopt>
	</section>
	<section>
		<name>Input Options</name>
		<stropt>
			<name>Soot Classpath</name>
			<alias>cp</alias>
			<alias>soot-class-path</alias>
			<alias>soot-classpath</alias>
			<short_desc>uses given PATH as the classpath for finding classes for Soot processing</short_desc>
			<long_desc>Use PATH to resolve types.</long_desc>
		</stropt>
		<multiopt>
			<name>Input Source Precedence</name>
			<alias>src-prec</alias>
			<value>
				<name>Class File</name>
				<alias>c</alias>
				<alias>class</alias>
				<short_desc>Use class for source of Soot</short_desc>
				<default/>
			</value>
			<value>
				<name>Jimple File</name>
				<alias>J</alias>
				<alias>jimple</alias>
				<short_desc>Use Jimple for source of Soot</short_desc>
			</value>
			<short_desc>sets the source precedence for Soot</short_desc>
			<long_desc>By default, Soot will resolve classes from .class files. If a class cannot be resolved from a .class file, Soot will attempt to resolve it from a .jimple file. Setting this option to jimple specifies the opposite policy: classes are resolved from .jimple files, and only if this fails will an attempt be made to resolve them from .class files.</long_desc>
		</multiopt>
		<boolopt>
			<name>Allow Phantom References</name>
			<alias>allow-phantom-refs</alias>
			<short_desc>allow unresolved classes; may cause errors</short_desc>
			<long_desc>This option ...</long_desc>
		</boolopt>
	</section>
	<section>
		<name>Output Options</name>
		<stropt>
			<name>Output Directory</name>
			<alias>d</alias>
			<alias>output-dir</alias>
			<short_desc>store produced files in PATH</short_desc>
			<long_desc>Specifies that the outputted files are to be stored in PATH. This may be relative to the working directory.</long_desc>
		</stropt>
		<multiopt>
			<name>Output Format</name>
			<alias>f</alias>
			<alias>output-format</alias>
			<value>
				<name>Jimp File</name>
				<alias>j</alias>
				<alias>jimp</alias>
				<short_desc>produce .jimp (abbreviated .jimple) files</short_desc>
                                <long_desc>Produces .jimp files. These contain an abbreviated textual form for soot's Jimple internal representation. Can contain ambiguous references.</long_desc>
			</value>
			<value>
				<name>Jimple File</name>
				<alias>J</alias>
				<alias>jimple</alias>
				<short_desc>produce .jimple code</short_desc>
                                <long_desc>Produces .jimple files that contain a textual representation for types in soot's Jimple internal representation.</long_desc>
			</value>
			<value>
				<name>Baf File</name>
				<alias>B</alias>
				<alias>baf</alias>
				<short_desc>produce .baf code</short_desc>
                                <long_desc>Produces .baf files that contain a textual representation for types in soot's Baf internal representation.</long_desc>
			</value>
			<value>
				<name>Abbreviated Baf File</name>
				<alias>b</alias>
				<short_desc>produce .b (abbreviated .baf) files</short_desc>
                                <long_desc>Produces .b files. These contain an abbreviated textual form for soot's Baf internal representation. It is easier to read than its non-abbreviated counterpart, but can also contain ambiguities; for instance, method signatures are not uniquely determined.</long_desc>
			</value>
			<value>
				<name>Grimp File</name>
				<alias>g</alias>
				<alias>grimp</alias>
				<short_desc>produce .grimp (abbreviated .grimple) files</short_desc>
                                <long_desc>Produces .grimp files. These contain an abbreviated textual form for soot's Grimp internal representation. Can contain ambiguous references.</long_desc>
			</value>
			<value>
				<name>Grimple File</name>
				<alias>G</alias>
				<alias>grimple</alias>
				<short_desc>produce .grimple files</short_desc>
                                <long_desc>Produces .grimple files that contain a textual representation for types in soot's Grimp internal representation.</long_desc>
			</value>
			<value>
				<name>Xml File</name>
				<alias>X</alias>
				<alias>xml</alias>
				<short_desc>produce .xml files</short_desc>
                                <long_desc>Produces .xml files of classes based on the Jimple statements.</long_desc>
			</value>
			<value>
				<name>No Output File</name>
				<alias>n</alias>
				<alias>none</alias>
				<short_desc>produces no output</short_desc>
			</value>
			<value>
				<name>Jasmin File</name>
				<alias>s</alias>
				<alias>jasmin</alias>
				<short_desc>produce .jasmin files</short_desc>
                                <long_desc>Produces .jasmin files as output. These can be understood by the jasmin bytecode assembler tool.</long_desc>
			</value>
			<value>
				<name>Class File</name>
				<alias>c</alias>
				<alias>class</alias>
				<default/>
				<short_desc>produce .class files</short_desc>
                                <long_desc>Produces Java .class files executable under any Java Virtual Machine.</long_desc>
			</value>
			<value>
				<name>Dava Decompiled File</name>
				<alias>d</alias>
				<alias>dava</alias>
				<short_desc>produce dava decompiled .java files</short_desc>
			</value>
			<short_desc>sets the output format for Soot</short_desc>
			<long_desc>This option ...</long_desc>
		</multiopt>
		<boolopt>
			<name>Via Grimp</name>
			<alias>via-grimp</alias>
			<short_desc>convert jimple to bytecode via grimp instead of via baf</short_desc>
			<long_desc>This option ...</long_desc>
		</boolopt>
		<boolopt>
			<name>Save Tags to XML</name>
			<alias>xml-attributes</alias>
			<short_desc>Save tags to XML attributes for Eclipse</short_desc>
			<long_desc>This option ...</long_desc>
		</boolopt>
	</section>
	<section>
		<name>Processing Options</name>
		<phaseopt>
			<name>Phase Options</name>
			<alias>p</alias>
			<alias>phase-option</alias>
			<short_desc>set run-time option KEY to VALUE for PHASE-NAME</short_desc>
			<long_desc>Sets run-time option KEY to VALUE for PHASE-NAME (default for VALUE is true).</long_desc>
			<phase>
				<name>Jimple Body Creation</name>
				<alias>jb</alias>
                                <class>JBOptions</class>
                                <long_desc>This phase is active during JimpleBody creation; Soot will always start by creating JimpleBody's from a method source - either coffi, for reading .class files, or the jimple parser, for reading .jimple files.</long_desc>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>true</default>
					<short_desc/>
					<long_desc/>
				</boolopt>
				<boolopt>
					<name>Use Original Names</name>
					<alias>use-original-names</alias>
					<short_desc/>
					<long_desc>  Soot attempts to find and use the original
names from the method source.  If this is not specified, Soot gives
standard names to local variables, according to the variable type.
</long_desc>
				</boolopt>
				<sub_phase>
					<name>Local Splitter</name>
					<alias>jb.ls</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Pre-typing Aggregator</name>
					<alias>jb.a1</alias>
                                        <long_desc>This phase handles the aggregation of stack variables for Jimple. For a full description of aggregation, see [VRGH$^+$00]. Briefly, aggregation finds instances where some expression has a single use; it replaces the use with the expression itself.</long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
					<boolopt>
						<name>Only Stack Locals</name>
						<alias>only-stack-locals</alias>
						<long_desc>Aggregate values stored in stack locals only.</long_desc>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Pre-typing Unused Local Eliminator</name>
					<alias>jb.ule1</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Type Assigner</name>
					<alias>jb.tr</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Post-typing Aggregator</name>
					<alias>jb.a2</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
					<boolopt>
						<name>Only Stack Locals</name>
						<alias>only-stack-locals</alias>
						<long_desc>Aggregate values stored in stack locals only.</long_desc>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Post-typing Unused Local Eliminator</name>
					<alias>jb.ule2</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Unsplit-originals Local Packer</name>
					<alias>jb.ulp</alias>
					<long_desc>
This phase only executes when the `use-original-names&apos; option is chosen
for the `jb&apos; phase.  It unsplits the locals according to the original names
found for them.</long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Unsplit Original Locals</name>
						<alias>unsplit-original-locals</alias>
						<default>true</default>
						<short_desc/>
						<long_desc>
Calls the LocalPacker to implement 
the use-original-names option.

                        </long_desc>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Local Name Standardizer</name>
					<alias>jb.lns</alias>
					<long_desc>
This phase assigns standard names to local variables.  It only
executes when `use-original-names&apos; is not chosen.

                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Only Stack Locals</name>
						<alias>only-stack-locals</alias>
						<short_desc/>
						<long_desc>Standardizes only stack local variables&apos; names.</long_desc>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Copy Propagator</name>
					<alias>jb.cp</alias>
					<long_desc>
This phase provides a cascaded copy propagator.  It is executed only
when `<tt>no-cp</tt>&apos; is not chosen in the `<tt>jb</tt>&apos; phase.
    
If it encounters situations of the form: A: a = ...; B: ... x = a;
C:... use (x); where a has only one definition, and x has only one
definition (B), then it can propagate immediately without checking
between B and C for redefinitions of a (namely A) because they cannot
occur.  In this case the propagator is global.
        
Otherwise, if a has multiple definitions then it only checks for
redefinitions of constants and copies in extended basic blocks.
        
From bytecode, we get some number of declared locals; we call these
``regular locals&apos;&apos;.  In Jimple, we have converted the stack elements
to locals.  The new locals thus introduced are called ``stack
locals&apos;&apos;. These locals have names which usually begin with <dollar/>.  

The default behaviour in this phase is to propagate only on the
`stack&apos; locals.

                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Only Regular Locals</name>
						<alias>only-regular-locals</alias>
						<short_desc/>
						<long_desc>Copy propagation only occurs on the ``regular&apos;&apos; locals.</long_desc>
					</boolopt>
					<boolopt>
						<name>Only Stack Locals</name>
						<alias>only-stack-locals</alias>
						<default>true</default>
						<short_desc/>
						<long_desc>Copy propagation only occurs on the ``stack&apos;&apos; locals.
                        </long_desc>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Dead Assignment Eliminator</name>
					<alias>jb.dae</alias>
					<long_desc>
This phase eliminates assignment statements (to locals) with no uses.
                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Only Stack Locals</name>
						<alias>only-stack-locals</alias>
						<default>true</default>
						<short_desc/>
						<long_desc>Only eliminates dead assignments to stack locals.</long_desc>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Unused Local Eliminator</name>
					<alias>jb.cp-ule</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Local Packer</name>
					<alias>jb.lp</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>false</default>
					</boolopt>
					<boolopt>
						<name>Unsplit Original Locals</name>
						<alias>unsplit-original-locals</alias>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Nop Eliminator</name>
					<alias>jb.ne</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Unreachable Code Eliminator</name>
					<alias>jb.uce</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
			</phase>
			<radio_phase>
				<name>Call Graph</name>
				<alias>cg</alias>
                                <class>CGOptions</class>
                                <short_desc>Build a call graph</short_desc>
                                <long_desc>The purpose of this pack is to compute
a call graph. When this pack finishes, a call graph is available in the Scene.
The different phases in this pack are different ways to construct the call
graph. Exactly one phase in this pack may be enabled; Soot will raise an error otherwise.
</long_desc>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>true</default>
				</boolopt>
                                <boolopt>
                                        <name>Safe forName</name>
                                        <alias>safe-forname</alias>
                                        <default>false</default>
                                        <short_desc>Handle Class.forName() calls conservatively</short_desc>
                                        <long_desc>When a program calls
Class.forName(), the named class is resolved, and its static initializer
executed. In many cases, it cannot be determined statically which
class will be loaded, and which static initializer executed. When this
option is set to true, Soot will conservatively assume that any static
initializer could be executed. This may make the call graph very large.
When this option is set to false, any calls to Class.forName() for which
the class cannot be determined statically are not assumed to call any
static initializers.
</long_desc>
                                </boolopt>
                                <boolopt>
                                        <name>Verbose</name>
                                        <alias>verbose</alias>
                                        <default>false</default>
                                        <short_desc>Print warnings about where the call graph may be incomplete</short_desc>
                                        <long_desc>Due to the effects of native methods and reflection, it may not always be possible to construct a fully conservative call graph. Setting this option to true causes Soot to point out the parts of the call graph that may be incomplete, so that they can be checked by hand.
                                        </long_desc>
                                </boolopt>
				<sub_phase>
					<name>Class Hierarchy Analysis</name>
					<alias>cg.cha</alias>
                                        <class>CHAOptions</class>
                                        <short_desc>Build a call graph using Class Hierarchy Analysis</short_desc>
                                        <long_desc>This phase generates uses Class Hierarchy Analysis to generate a call graph.</long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
					<boolopt>
						<name>Verbose</name>
						<alias>verbose</alias>
                                                <default>false</default>
                                                <short_desc>Print statistics about the resulting call graph</short_desc>
                                                <long_desc>Setting this option to true causes Soot to print out statistics about the call graph computed by this phase, such as the number of methods determined to be reachable.</long_desc>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Spark</name>
					<class>SparkOptions</class>
					<alias>cg.spark</alias>
                                        <short_desc>Spark points-to analysis framework</short_desc>
                                        <long_desc>Spark is a flexible points-to analysis framework. Aside from building a call graph, it also generates information about the targets of pointers. For details about Spark, please see <a href="http://www.sable.mcgill.ca/publications/thesis/">Ondrej Lhotak's M.Sc. thesis</a>.</long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<section>
						<name>Spark General Options</name>
						<boolopt>
							<name>Verbose</name>
							<alias>verbose</alias>
							<default>false</default>
                                                        <short_desc>Print detailed information about the execution of Spark</short_desc>
							<long_desc>
When this option is set to true, Spark prints detailed information about its execution.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Ignore Types Entirely</name>
							<alias>ignore-types</alias>
							<default>false</default>
                                                        <short_desc>Make Spark completely ignore declared types of variables</short_desc>
							<long_desc>
When this option is set to true, all parts of Spark completely ignore
declared types of variables and casts.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Force Garbages Collections</name>
							<alias>force-gc</alias>
							<default>false</default>
                                                        <short_desc>Force garbage collection for measuring memory usage</short_desc>
							<long_desc>
When this option is set to true, calls to System.gc() will be made at
various points to allow memory usage to be measured.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Pre Jimplify</name>
							<alias>pre-jimplify</alias>
							<default>false</default>
                                                        <short_desc>Jimplify all methods before starting Spark</short_desc>
							<long_desc>
When this option is set to true, Spark converts all available methods to Jimple
before starting the points-to analysis. This allows the Jimplification
time to be separated from the points-to time. However, it increases the
total time and memory requirement, because all methods are Jimplified,
rather than only those deemed reachable by the points-to analysis.
        </long_desc>
						</boolopt>
					</section>
					<section>
						<name>Spark Pointer Assignment Graph Building Options</name>
						<boolopt>
							<name>VTA</name>
							<alias>vta</alias>
							<default>false</default>
                                                        <short_desc>Emulate Variable Type Analysis</short_desc>
							<long_desc>
Setting VTA to true has the effect of setting ignoreBaseObjects,
typesForSites, and simplifySCCs to true to simulate Variable Type
Analysis, described in <a href="http://www.sable.mcgill.ca/publications/papers/">our OOPSLA 2000 paper</a>. Note that the
algorithm differs from the original VTA in that it handles array
elements more precisely.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>RTA</name>
							<alias>rta</alias>
							<default>false</default>
                                                        <short_desc>Emulate Rapid Type Analysis</short_desc>
							<long_desc>
Setting RTA to true sets typesForSites to true, and causes Spark to use
a single points-to set for all variables, giving <a href="http://doi.acm.org/10.1145/236337.236371">Rapid Type
Analysis</a>.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Field Based</name>
							<alias>field-based</alias>
							<default>false</default>
                                                        <short_desc>Use a field-based rather than field-sensitive representation</short_desc>
							<long_desc>
When this option is set to true, fields are represented by variable
(Green) nodes, and the object that the field belongs to is ignored
(all objects are lumped together), giving a field-based analysis. Otherwise, fields are represented by
field reference (Red) nodes, and the objects that they belong to are
distinguished, giving a field-sensitive analysis.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Types For Sites</name>
							<alias>types-for-sites</alias>
							<default>false</default>
                                                        <short_desc>Represent objects by their actual type rather than allocation site</short_desc>
							<long_desc>
When this option is set to true, types rather than allocation sites are
used as the elements of the points-to sets.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Merge String Buffer</name>
							<alias>merge-stringbuffer</alias>
							<default>true</default>
                                                        <short_desc>Represent all StringBuffers as one object</short_desc>
							<long_desc>
When this option is set to true, all allocation sites creating
<tt>java.lang.StringBuffer</tt> objects are grouped together as a single
allocation site.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Simulate Natives</name>
							<alias>simulate-natives</alias>
							<default>true</default>
                                                        <short_desc>Simulate effects of native methods in standard class library</short_desc>
							<long_desc>
When this option is set to true, effects of native methods in the standard Java class library are simulated.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Simple Edges Bidirectional</name>
							<alias>simple-edges-bidirectional</alias>
							<default>false</default>
                                                        <short_desc>Equality-based analysis between variable nodes</short_desc>
							<long_desc>
When this option is set to true, all edges connecting variable (Green)
nodes are made bidirectional, as in <a href="http://doi.acm.org/10.1145/237721.237727">Steensgaard&apos;s analysis</a>.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>On Fly Call Graph</name>
							<alias>on-fly-cg</alias>
							<default>true</default>
                                                        <short_desc>Build call graph as receiver types become known</short_desc>
							<long_desc>
When this option is set to true, the call graph is computed on-the-fly
as points-to information is computed. Otherwise, an initial
CHA approximation to the call graph is used.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Parms As Fields</name>
							<alias>parms-as-fields</alias>
							<default>false</default>
                                                        <short_desc>Represent method parameters as fields of this</short_desc>
							<long_desc>
When this option is set to true, parameters to methods are represented
as fields (Red nodes) of the this object; otherwise, parameters are
represented as variable (Green) nodes.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Returns As Fields</name>
							<alias>returns-as-fields</alias>
							<default>false</default>
                                                        <short_desc>Represent method return values as fields of this</short_desc>
							<long_desc>
When this option is set to true, return values from methods are
represented as fields (Red nodes) of the this object; otherwise,
return values are represented as variable (Green) nodes.
        </long_desc>
						</boolopt>
					</section>
					<section>
						<name>Spark Pointer Assignment Graph Simplification Options</name>
						<boolopt>
							<name>Simplify Offline</name>
							<alias>simplify-offline</alias>
							<default>false</default>
                                                        <short_desc>Collapse single-entry subgraphs of the PAG</short_desc>
							<long_desc>
When this option is set to true, variable (Green) nodes which forming
single-entry subgraphs (so they must have the same points-to set) are
merged together before propagation begins.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Simplify SCCs</name>
							<alias>simplify-sccs</alias>
							<default>false</default>
                                                        <short_desc>Collapse strongly-connected components of the PAG</short_desc>
							<long_desc>
When this option is set to true, variable (Green) nodes which form
strongly-connected components (so they must have the same points-to set)
are merged together before propagation begins.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Ignore Types For SCCs</name>
							<alias>ignore-types-for-sccs</alias>
							<default>false</default>
                                                        <short_desc>Ignore declared types when determining node equivalence for SCCs</short_desc>
							<long_desc>
When this option is set to true, when collapsing strongly-connected
components, nodes forming SCCs are collapsed regardless of their declared type.
The collapsed SCC is given the most general type of all the nodes in the
component.

When this option is set to false, only edges connecting nodes of the
same type are considered when detecting SCCs.

This option has no effect unless <tt>simplify-sccs</tt> is true.
        </long_desc>
						</boolopt>
					</section>
					<section>
						<name>Spark Points-To Set Flowing Options</name>
						<multiopt>
							<name>Propagator</name>
							<alias>propagator</alias>
							<value>
								<name>Iter</name>
								<alias>iter</alias>
<short_desc>Simple iterative algorithm</short_desc>
<long_desc>
Iter is a simple, iterative algorithm, which propagates everything until the
graph does not change.
</long_desc>
							</value>
							<value>
								<name>Worklist</name>
								<alias>worklist</alias>
								<default/>
<short_desc>Fast, worklist-based algorithm</short_desc>
<long_desc>
Worklist is a worklist-based algorithm that tries
to do as little work as possible. This is currently the fastest algorithm.
</long_desc>

							</value>
							<value>
								<name>Cycle</name>
								<alias>cycle</alias>
                                                                <short_desc>Unfinished on-the-fly cycle detection algorithm</short_desc>
                                                                <long_desc>This algorithm finds cycles in the PAG on-the-fly. It is not yet finished.</long_desc>
							</value>
							<value>
								<name>Merge</name>
								<alias>merge</alias>
<short_desc>Unfinished field reference merging algorithms</short_desc>
<long_desc>
Merge is an algorithm that merges all concrete field (yellow) nodes with their corresponding
field reference (red) nodes. This algorithm is not yet finished.
</long_desc>
							</value>
							<value>
								<name>Alias</name>
								<alias>alias</alias>
<short_desc>Alias-edge based algorithm</short_desc>
<long_desc>
Alias is an alias-edge based algorithm. This algorithm tends to take
the least memory for very large problems, because it does not represent
explicitly points-to sets of fields of heap objects.
</long_desc>

							</value>
							<value>
								<name>None</name>
								<alias>none</alias>
                                                                <short_desc>Disable propagation</short_desc>
<long_desc>
None means that propagation is not done; the graph is only built and
simplified. This is useful if an external solver is being used to perform the
propagation.
</long_desc>
							</value>
                                                        <short_desc>Select algorihm to use for propagation</short_desc>
							<long_desc>
This option tells Spark which propagation algorithm to use.
        </long_desc>
						</multiopt>
						<multiopt>
							<name>Set Implementation</name>
							<alias>set-impl</alias>
							<value>
								<name>Hash set</name>
								<alias>hash</alias>
                                                                <short_desc>Use Java HashSet</short_desc>

<long_desc>
Hash is an implementation based on Java&apos;s built-in hash-set.
</long_desc>
							</value>
							<value>
								<name>Bit-vector</name>
								<alias>bit</alias>
<short_desc>Bit vector</short_desc>
<long_desc>
Bit is an implementation using a bit vector.
</long_desc>
							</value>
							<value>
								<name>Hybrid</name>
								<alias>hybrid</alias>
<short_desc>Hybrid representation using bit vector for large sets</short_desc>
<long_desc>
Hybrid is an implementation that keeps an explicit list of up to
16 elements, and switches to using a bit-vector when the set gets
larger than this.
</long_desc>
							</value>
							<value>
								<name>Sorted array</name>
								<alias>array</alias>
                                                                <short_desc>Sorted array representation</short_desc>
                                                                <long_desc>
Array is an implementation that keeps the elements of the points-to set
in an array that is always maintained in sorted order. Set membership is
tested using binary search, and set union and intersection are computed
using an algorithm based on the merge step from merge sort.
</long_desc>
							</value>
							<value>
								<name>Double</name>
								<alias>double</alias>
								<default/>
<short_desc>Double set representation for incremental propagation</short_desc>
<long_desc>
Double is an implementation that itself uses a pair of sets for
each points-to set. The first set in the pair stores new pointed-to
objects that have not yet been propagated, while the second set stores
old pointed-to objects that have been propagated and need not be
reconsidered. This allows the propagation algorithms to be incremental,
often speeding them up significantly.
</long_desc>
							</value>
							<value>
								<name>Shared bit-vector</name>
								<alias>shared</alias>
                                                                <short_desc>Shared bit-vector representation</short_desc>
                                                                <long_desc>This is a bit-vector representation, in which duplicate bit-vectors are found and stored only once to save memory.</long_desc>

							</value>
                                                        <short_desc>Select points-to set implementation</short_desc>
							<long_desc>
Selects an implementation of a points-to set that Spark should use.
</long_desc>
						</multiopt>
						<multiopt>
							<name>Double Set Old</name>
							<alias>double-set-old</alias>
							<value>
								<name>Hash set</name>
								<alias>hash</alias>
                                                                <short_desc>Use Java HashSet</short_desc>

<long_desc>
Hash is an implementation based on Java&apos;s built-in hash-set.
</long_desc>
							</value>
							<value>
								<name>Bit-vector</name>
								<alias>bit</alias>
<short_desc>Bit vector</short_desc>
<long_desc>
Bit is an implementation using a bit vector.
</long_desc>
							</value>
							<value>
								<name>Hybrid</name>
								<alias>hybrid</alias>
                                                                <default/>
<short_desc>Hybrid representation using bit vector for large sets</short_desc>
<long_desc>
Hybrid is an implementation that keeps an explicit list of up to
16 elements, and switches to using a bit-vector when the set gets
larger than this.
</long_desc>
							</value>
							<value>
								<name>Sorted array</name>
								<alias>array</alias>
                                                                <short_desc>Sorted array representation</short_desc>
                                                                <long_desc>
Array is an implementation that keeps the elements of the points-to set
in an array that is always maintained in sorted order. Set membership is
tested using binary search, and set union and intersection are computed
using an algorithm based on the merge step from merge sort.
</long_desc>
							</value>
							<value>
								<name>Shared bit-vector</name>
								<alias>shared</alias>
                                                                <short_desc>Shared bit-vector representation</short_desc>
                                                                <long_desc>This is a bit-vector representation, in which duplicate bit-vectors are found and stored only once to save memory.</long_desc>

							</value>
                                                        <short_desc>Select implementation of points-to set for old part of double set</short_desc>
							<long_desc>
Selects an implementation for the sets of old objects in the double
points-to set implementation.

This option has no effect unless <tt>set-impl</tt> is set to double.
        </long_desc>
						</multiopt>
						<multiopt>
							<name>Double Set New</name>
							<alias>double-set-new</alias>
							<value>
								<name>Hash set</name>
								<alias>hash</alias>
                                                                <short_desc>Use Java HashSet</short_desc>

<long_desc>
Hash is an implementation based on Java&apos;s built-in hash-set.
</long_desc>
							</value>
							<value>
								<name>Bit-vector</name>
								<alias>bit</alias>
<short_desc>Bit vector</short_desc>
<long_desc>
Bit is an implementation using a bit vector.
</long_desc>
							</value>
							<value>
								<name>Hybrid</name>
								<alias>hybrid</alias>
                                                                <default/>
<short_desc>Hybrid representation using bit vector for large sets</short_desc>
<long_desc>
Hybrid is an implementation that keeps an explicit list of up to
16 elements, and switches to using a bit-vector when the set gets
larger than this.
</long_desc>
							</value>
							<value>
								<name>Sorted array</name>
								<alias>array</alias>
                                                                <short_desc>Sorted array representation</short_desc>
                                                                <long_desc>
Array is an implementation that keeps the elements of the points-to set
in an array that is always maintained in sorted order. Set membership is
tested using binary search, and set union and intersection are computed
using an algorithm based on the merge step from merge sort.
</long_desc>
							</value>
							<value>
								<name>Shared bit-vector</name>
								<alias>shared</alias>
                                                                <short_desc>Shared bit-vector representation</short_desc>
                                                                <long_desc>This is a bit-vector representation, in which duplicate bit-vectors are found and stored only once to save memory.</long_desc>

							</value>
                                                        <short_desc>Select implementation of points-to set for new part of double set</short_desc>
							<long_desc>
Selects an implementation for the sets of new objects in the double
points-to set implementation.

This option has no effect unless setImpl is set to double.
        </long_desc>
						</multiopt>
					</section>
					<section>
						<name>Spark Output Options</name>
						<boolopt>
							<name>Dump HTML</name>
							<alias>dump-html</alias>
							<default>false</default>
                                                        <short_desc>Dump pointer assignment graph to HTML for debugging</short_desc>
							<long_desc>
When this option is set to true, a browseable HTML representation of the
pointer assignment graph is output to a file called <tt>pag.jar</tt> after the analysis completes. Note
that this representation is typically very large.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Dump PAG</name>
							<alias>dump-pag</alias>
							<default>false</default>
                                                        <short_desc>Dump pointer assignment graph for other solvers</short_desc>
							<long_desc>
When this option is set to true, a representation of the pointer assignment graph
suitable for processing with other solvers (such as the BDD-based solver) is
output before the analysis begins.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Dump Solution</name>
							<alias>dump-solution</alias>
							<default>false</default>
                                                        <short_desc>Dump final solution for comparison with other solvers</short_desc>
							<long_desc>
When this option is set to true, a representation of the resulting points-to
sets is dumped. The format is similar to that of the <tt>dump-pag</tt>
option, and is therefore suitable for comparison with the results of other
solvers.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Topological Sort</name>
							<alias>topo-sort</alias>
							<default>false</default>
                                                        <short_desc>Sort variable nodes in dump</short_desc>
							<long_desc>
When this option is set to true, the representation dumped by the dump-pag option
is dumped with the variable (green) nodes in (pseudo-)topological order.

This option has no effect unless dump-pag is true.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Dump Types</name>
							<alias>dump-types</alias>
							<default>true</default>
                                                        <short_desc>Include declared types in dump</short_desc>
							<long_desc>
When this option is set to true, the representation dumped by the dump-pag option
includes type information for all nodes.

This option has no effect unless dump-pag is true.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Class Method Var</name>
							<alias>class-method-var</alias>
							<default>true</default>
                                                        <short_desc>In dump, label variables by class and method</short_desc>
							<long_desc>
When this option is set to true, the representation dumped by the dump-pag option
represents nodes by numbering each class, method, and variable within
the method separately, rather than assigning a single integer to each
node.

This option has no effect unless dump-pag is true.
Setting class-method-var to true has the effect of setting topo-sort to false.
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Dump Answer</name>
							<alias>dump-answer</alias>
							<default>false</default>
                                                        <short_desc>Dump computed reaching types for comparison with other solvers</short_desc>
							<long_desc>
When this option is set to true, the computed reaching types for each variable are
dumped to a file, so that they can be compared with the results of
other analyses (such as the old VTA).
        </long_desc>
						</boolopt>
						<boolopt>
							<name>Add Tags</name>
							<alias>add-tags</alias>
							<default>false</default>
                                                        <short_desc>Output points-to results in tags for viewing with the Jimple</short_desc>
							<long_desc>
        When this option is set to true, the results of the analysis are encoded inside
tags, and printed with the resulting Jimple code.

        </long_desc>
						</boolopt>
						<boolopt>
							<name>Calculate Set Mass</name>
							<alias>set-mass</alias>
							<default>false</default>
                                                        <short_desc>Calculate statistics about points-to set sizes</short_desc>
							<long_desc>
When this option is set to true, Spark computes and prints various
cryptic statistics about the size of the points-to sets computed.
        </long_desc>
						</boolopt>
					</section>
				</sub_phase>
			</radio_phase>
			<phase>
				<name>Whole Shimple Transformation Pack</name>
				<alias>wstp</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>true</default>
				</boolopt>
			</phase>
			<phase>
				<name>Whole Shimple Optimization Pack</name>
				<alias>wsop</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>false</default>
				</boolopt>
			</phase>
			<phase>
				<name>Whole-Jimple Transformation Pack</name>
				<alias>wjtp</alias>
				<long_desc>
Soot can do whole-program analyses.  For the current version of Soot,
this means that Jimple bodies are created for each method in the
application, and analyses run on this set of Jimple bodies.  The
application consists of one class, specified on the command-line, plus
all classes referenced (directly or indirectly) by it.  It excludes
classes in <tt>java.*</tt>, <tt>javax.*</tt>, and <tt>sun.*</tt>.  This mode is
triggered by the <tt>-</tt><tt>-app</tt> option.

In whole-program mode, Soot will always apply the contents of the
Whole-Jimple Transformation Pack to each method under analysis.  This
occurs after all Jimple bodies have been created.  This pack is called
<tt>wjtp</tt>.  In an
unmodified version of Soot, the only transformation in <tt>wjtp</tt> is the
Spark pointer analysis kit. Spark has many options, which are
listed at <a href="http://www.sable.mcgill.ca/soot/tutorial/phase-options/spark.ps">spark.ps</a>.

                        </long_desc>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>true</default>
					<short_desc/>
					<long_desc/>
				</boolopt>
			</phase>
			<phase>
				<name>Whole-Jimple Optimization Pack</name>
				<alias>wjop</alias>
				<long_desc>
To run optimizing transformations on the whole program, use the <tt>-W</tt>
command-line option.  This tells Soot that the Whole-Jimple
Optimization Pack is to be applied (phase name <tt>wjop</tt>).

The default behaviour of this Pack has static method binding disabled
and static inlining enabled.  To reverse this, give the options
<tt>-p wjop.smb enabled:true -p wjop.si disabled</tt>.

                        </long_desc>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
					<default>false</default>
					<short_desc/>
					<long_desc/>
				</boolopt>
				<sub_phase>
					<name>Static Method Binding</name>
					<class>SMBOptions</class>
					<alias>wjop.smb</alias>
					<long_desc>
Static method binding uses CHA or VTA to statically bind 
monomorphic call sites. That is, smb takes the call graph returned
by CHA or VTA; if the analysis result shows that any virtual invoke
statement in the Jimple bodies actually only calls one method, then a
static copy of the method is made, and the virtual invoke is changed
to a static invoke.

                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Insert Null Checks</name>
						<alias>insert-null-checks</alias>
						<default>true</default>
						<short_desc/>
						<long_desc>
The receiver object is checked for nullness before the
target method is invoked.  If the target is null, then a NullPointer
exception is thrown.
                        </long_desc>
					</boolopt>
					<boolopt>
						<name>Insert Redundant Casts</name>
						<alias>insert-redundant-casts</alias>
						<default>true</default>
						<short_desc/>
						<long_desc>
Inserts extra casts for the verifier.  The verifier will
complain if the target uses `this&apos; (so we have to pass an extra
parameter), and the argument passed to the method is not the same
type.  For instance, <tt>Bottle.price<uscore/>static</tt> is a method which takes a
Cost object, and Cost is an interface implemented by Bottle.  We must
then cast the Cost to a Bottle before passing it to <tt>price<uscore/>static</tt>.
                        </long_desc>
					</boolopt>
					<multiopt>
						<name>Allow Modifier Changes</name>
						<alias>allowed-modifier-changes</alias>
						<value>
							<name>Unsafe</name>
							<alias>unsafe</alias>
							<short_desc/>
							<default/>
						</value>
						<value>
							<name>Safe</name>
							<alias>safe</alias>
							<short_desc/>
						</value>
						<value>
							<name>None</name>
							<alias>none</alias>
							<short_desc/>
						</value>
						<short_desc/>
						<long_desc>
Determines what changes in visibility modifiers
are allowed.  ``unsafe&apos;&apos; modifies the visibility on code so that
all inlining is permitted; some IllegalAccessErrors may be missed.
``safe&apos;&apos; preserves the exact meaning of the analysed program, 
and ``none&apos;&apos; changes no modifiers whatsoever.
                        </long_desc>
					</multiopt>
				</sub_phase>
				<sub_phase>
					<name>Static Inlining</name>
					<class>SIOptions</class>
					<alias>wjop.si</alias>
					<long_desc>
The StaticInliner takes an call graph returned by CHA or VTA and visits
all call sites in the application in a bottom-up fashion, inlining 
invoke statements which is determined to be monomorphic by analysis result.
Note that the modifier ``static&apos;&apos; is supposed to be compared to a
(not-currently-implemented) profile-guided inliner.
 
                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Insert Null Checks</name>
						<alias>insert-null-checks</alias>
						<default>true</default>
						<short_desc/>
						<long_desc>As in <tt>StaticMethodBinder</tt>.</long_desc>
					</boolopt>
					<boolopt>
						<name>Insert Redundant Casts</name>
						<alias>insert-redundant-casts</alias>
						<default>true</default>
						<short_desc/>
						<long_desc>As in <tt>StaticMethodBinder</tt>.</long_desc>
					</boolopt>
					<multiopt>
						<name>Allow Modifier Changes</name>
						<alias>allowed-modifier-changes</alias>
						<value>
							<name>Unsafe</name>
							<alias>unsafe</alias>
							<short_desc/>
							<default/>
						</value>
						<value>
							<name>Safe</name>
							<alias>safe</alias>
							<short_desc/>
						</value>
						<value>
							<name>None</name>
							<alias>none</alias>
							<short_desc/>
						</value>
						<short_desc/>
						<long_desc>As in <tt>StaticMethodBinder</tt>.</long_desc>
					</multiopt>
					<flopt>
						<name>Expansion Factor</name>
						<alias>expansion-factor</alias>
						<default>3</default>
						<short_desc/>
						<long_desc>
Determines the maximum allowed expansion of a method.  Inlining
will cause the method to grow by a factor of no more than
expansion-factor.
                        </long_desc>
					</flopt>
					<intopt>
						<name>Max Container Size</name>
						<alias>max-container-size</alias>
						<default>5000</default>
						<short_desc/>
						<long_desc>
Determines the maximum number of Jimple statements for a container
method.  If a method has more than this number of Jimple statements,
then no methods will be inlined into it.
                        </long_desc>
					</intopt>
					<intopt>
						<name>Max Inlinee Size</name>
						<alias>max-inlinee-size</alias>
						<default>20</default>
						<short_desc/>
						<long_desc>
Determines the maximum number of Jimple statements for an inlinee
method.  If a method has more than this number of Jimple statements,
then it will not be inlined into other methods.
                        </long_desc>
					</intopt>
				</sub_phase>
			</phase>
			<phase>
				<name>Whole Jimple Annotation Pack</name>
				<alias>wjap</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                    <default>true</default>
					<long_desc>
Some analyses donot transform Jimple body directly, but annotate
statements or values with tags. Whole-Jimple annotation pack provides
a place for annotation-oriented analysis in a whole program mode.
					</long_desc>
				</boolopt>
				<sub_phase>
					<name>Rectangular Array Finder</name>
					<alias>wjap.ra</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc> Find array variables always pointing to rectangular two-dimentional array objects. </short_desc>
						<long_desc> 
In Java, a multi-dimentional array is an array of arrays, which means
the shape of the array can be ragged. However, many applications use
rectangular arrays. Such information is very helpful in proving 
safe array bounds checks. Rectangular array finder traverses Jimple
statements based on static call graph, and finds array variables 
always holding rectangular two-dimentional array objects. 
The analysis results are used by array bounds check elimination (jap.abc).
This phase does not change the program.
						</long_desc>
					</boolopt>
				</sub_phase>
			</phase>
			<phase>
				<name>Shimple Transformation Pack</name>
				<alias>stp</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>true</default>
				</boolopt>
			</phase>
			<phase>
				<name>Shimple Optimization Pack</name>
				<alias>sop</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>false</default>
				</boolopt>
			</phase>
			<phase>
				<name>Jimple Transformations Pack</name>
				<alias>jtp</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>true</default>
					<short_desc/>
					<long_desc>
Soot will always apply the contents of the Jimple transformation pack
to each method under analysis.  This pack is called <tt>jtp</tt>.  There are
no transformations in this pack in an unmodified version of Soot.
                    </long_desc>
				</boolopt>
			</phase>
			<phase>
				<name>Jimple Optimizations Pack</name>
				<alias>jop</alias>
				<long_desc>
When Soot is given the <tt>-O</tt> command-line option, the 
<tt>JimpleOptimizationPack</tt> is applied to every JimpleBody in an
application class.  This section lists the default transformations in
the <tt>JimpleOptimizationPack</tt>.
                        </long_desc>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>false</default>
					<short_desc/>
					<long_desc/>
				</boolopt>
				<sub_phase>
					<name>Common Subexpression Elimination</name>
					<alias>jop.cse</alias>
					<long_desc>
Runs an available expressions analysis on a body, then eliminates
common subexpressions.

This implementation is especially slow, as it does not run on basic
blocks.  A better implementation (which wouldn&apos;t catch every single
common subexpression, but would get most) would use basic blocks
instead.

It is also slow because the flow universe is explicitly created; it
need not be.  A better implementation would implicitly compute the kill
sets at every node.

Because of the current slowness, this transformation is not enabled in
the default settings.  To enable it, specify <tt>-p jop.cse
enabled:true</tt> on the command line.

                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Naive Side Effect Tester</name>
						<alias>naive-side-effect</alias>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Busy Code Motion</name>
					<alias>jop.bcm</alias>
					<class>BCMOptions</class>
					<long_desc>
Busy Code Motion is a straightforward implementation of Partial
Redundancy Elimination. This implementation is not very aggressive.
The Lazy Code Motion
is an improved version of the Busy Code Motion, and should be used
instead of it.

Busy Code Motion is not enabled by default. To enable it, specify
<tt>-p jop.bcm enabled:true</tt> on the command line.

                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Naive Side Effect Tester</name>
						<alias>naive-side-effect</alias>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Lazy Code Motion</name>
					<class>LCMOptions</class>
					<alias>jop.lcm</alias>
					<long_desc>
Lazy Code Motion is the enhanced version of the Busy Code Motion, a
Partial Redundancy Eliminator. Before doing Partial Redundancy Elimination,
this optimization performs loop inversion (turning <tt>while</tt> loops
into <tt>do while</tt> loops inside an <tt>if</tt> statement).
This allows the Partial Redundancy Eliminator
to optimize loop invariants of <tt>while</tt> loops.

By default, this transformation is disabled. To enable it, specify
<tt>-p jop.lcm enabled:true</tt> on the command line.

                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<multiopt>
						<name>Safe</name>
						<alias>safe</alias>
						<value>
							<name>Safe</name>
							<alias>safe</alias>
							<short_desc/>
							<default/>
						</value>
						<value>
							<name>Medium</name>
							<alias>medium</alias>
							<short_desc/>
						</value>
						<value>
							<name>Unsafe</name>
							<alias>unsafe</alias>
							<short_desc/>
						</value>
						<short_desc/>
						<long_desc>This option
controls how fields and exception-throwing statements are
treated.
<tt>safe</tt> is safe, but only considers additions,
subtractions and multiplications.
<tt>medium</tt> is unsafe in multi-threaded environment, as
already performed field accesses are reused.
<tt>unsafe</tt> moves exception-throwing statements, and
reorders them. They are potentially moved out of
<tt>try-catch</tt>-blocks.
</long_desc>
					</multiopt>
					<boolopt>
						<name>Unroll</name>
						<alias>unroll</alias>
						<short_desc/>
						<long_desc>if <tt>true</tt>,
loop inversion is performed before doing the
transformation.
</long_desc>
						<default>true</default>
					</boolopt>
					<boolopt>
						<name>Naive Side Effect Tester</name>
						<alias>naive-side-effect</alias>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Copy Propogator</name>
					<class>CPOptions</class>
					<alias>jop.cp</alias>
					<long_desc>
The default behaviour here is to propagate on all locals.
                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Only Regular Locals</name>
						<alias>only-regular-locals</alias>
						<short_desc/>
						<long_desc>Copy propagation only occurs on the ``regular&apos;&apos; locals.</long_desc>
					</boolopt>
					<boolopt>
						<name>Only Stack Locals</name>
						<alias>only-stack-locals</alias>
						<short_desc/>
						<long_desc>Copy propagation only occurs on the ``stack&apos;&apos; locals.</long_desc>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Constant Propagator and Folder</name>
					<alias>jop.cpf</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc>
This phase does constant propagation and folding.
Constant folding is the compile-time evaluation of constant
expressions (i.e. 2 * 3). 
                        </long_desc>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Conditional Branch Folder</name>
					<alias>jop.cbf</alias>
					<long_desc>
Statically evaluates the condition-expression of Jimple 
<tt>IfStmt</tt>s.  If the condition is identically `true&apos; or `false&apos;,
changes the conditional branch instruction to a `goto&apos; statement.

                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Dead Assignment Eliminator</name>
					<alias>jop.dae</alias>
					<long_desc>
This phase eliminates assignment statements (to locals) with no uses.

In this incarnation, the default value for <tt>only-stack-locals</tt>
is <tt>false</tt>.

                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Only Stack Locals</name>
						<alias>only-stack-locals</alias>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Unreachable Code Eliminator 1</name>
					<alias>jop.uce1</alias>
					<long_desc>
Removes unreachable codes and empty traps.
                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Unreachable Code Eliminator 2</name>
					<alias>jop.uce2</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Unconditional Branch Folder 1</name>
					<alias>jop.ubf1</alias>
					<long_desc>
Removes unnecessary `goto&apos; statements from a JimpleBody.

If a <tt>GotoStmt</tt>&apos;s target is the next instruction, then it is
removed.  If a <tt>GotoStmt</tt> <tt>x</tt>&apos;s target is another <tt>GotoStmt</tt>,
with target <tt>y</tt>, then <tt>x</tt>&apos;s target can be changed to <tt>y</tt>&apos;s target.

If some <tt>IfStmt</tt>&apos;s target is a <tt>GotoStmt</tt>, then the
<tt>IfStmt</tt>&apos;s target can be updated to the <tt>GotoStmt</tt>&apos;s target.
        
(These situations could result from other optimizations; after folding
branches, we might generate more unreachable code.)

                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Unconditional Branch Folder 2</name>
					<alias>jop.ubf2</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Unused Local Eliminator</name>
					<alias>jop.ule</alias>
					<long_desc>
Removes locals with no uses in the method body.
                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
			</phase>
			<phase>
				<name>Jimple Annotation Pack</name>
				<alias>jap</alias>
				<long_desc>
Soot has a number of phase options to configure the annotation process.
Array bounds check and null pointer check detection have 
separate phases and phase options.
                        </long_desc>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>true</default>
				</boolopt>
				<sub_phase>
					<name>Null Pointer Check Options</name>
					<class>NPCOptions</class>
					<alias>jap.npc</alias>
					<long_desc>
The null pointer check analysis has the phase name <tt>jtp.npc</tt>. 
It has one phase option (aside from the default <tt>disabled</tt> option). 
                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Only Array Ref</name>
						<alias>only-array-ref</alias>
						<short_desc/>
						<long_desc>
  By default, all bytecodes that need null pointer checks 
  are annotated with the analysis result. When this option 
  is set to true, Soot will annotate only array-referencing 
  bytecodes with null pointer check information; other bytecodes, 
  such as <tt>getfield</tt> and <tt>putfield</tt>, will not be annotated. 
                        </long_desc>
					</boolopt>
					<boolopt>
						<name>Profiling</name>
						<alias>profiling</alias>
						<short_desc>Insert profiling instructions counting the number of safe null pointer accesses.</short_desc>
						<long_desc>
If this option is true, the analysis inserts profiling instructions
counting the number of eliminated safe null pointer checks at runtime.
This is only for profiling purpose.
						</long_desc>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Array Bound Check Options</name>
					<class>ABCOptions</class>
					<alias>jap.abc</alias>
					<long_desc>
The array bounds check analysis has the phase name <tt>jtp.abc</tt>. 
If whole-program analysis is required, an extra
phase <tt>wjap.ra</tt> for finding rectangular arrays occurs.
                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>With All</name>
						<alias>with-all</alias>
						<short_desc/>
						<long_desc>
A macro.  Instead of typing a long string of phase options, this option 
will turn on all options of the phase ``<tt>jap.abc</tt>&apos;&apos;.
                        </long_desc>
					</boolopt>
					<boolopt>
						<name>With Field References</name>
						<alias>with-fieldref</alias>
						<short_desc/>
						<long_desc>
The analysis treats field references (static and instance) as common
subexpressions. The restrictions from the `<tt>with-arrayref</tt>&apos; option also
apply. 
                        </long_desc>
					</boolopt>
					<boolopt>
						<name>With Array References</name>
						<alias>with-arrayref</alias>
						<short_desc/>
						<long_desc>
With this option enabled, array
references can be considered as common subexpressions; however, we are
more conservative when writing into an array, because array
objects may be aliased. NOTE: We also assume that the application in a
single-threaded program or in a synchronized block. That is, an
array element may not be changed by other threads between two array
references.
                        </long_desc>
					</boolopt>
					<boolopt>
						<name>With Common Sub-expressions</name>
						<alias>with-cse</alias>
						<short_desc/>
						<long_desc>
The analysis will consider common subexpressions.  For example,
  consider the situation where <tt>r1</tt> is assigned <tt>a*b</tt>; later,
  <tt>r2</tt> is assigned <tt>a*b</tt>, where both <tt>a</tt> and <tt>b</tt> have
  not been changed between the two statements. The analysis can
  conclude that <tt>r2</tt> has the same value as <tt>r1</tt>. Experiments
  show that this option can improve the result slightly.
                        </long_desc>
					</boolopt>
					<boolopt>
						<name>With Class Field</name>
						<alias>with-classfield</alias>
						<short_desc/>
						<long_desc>
This option makes the analysis work on the class level. The algorithm 
analyzes `final&apos; or `private&apos; class fields first. It can recognize
the fields that hold array objects with constant length.  In an application 
using lots of array fields, this option can improve the analysis results 
dramatically. 

                        </long_desc>
					</boolopt>
					<boolopt>
						<name>With Rectangular Array</name>
						<alias>with-rectarray</alias>
						<short_desc/>
						<long_desc>
This option is used together with "wjap.ra" to make Soot run the whole-program
analysis for rectangular array objects. This analysis is based on the
call graph, and it usually takes a long time. If the application uses
rectangular arrays, these options can improve the analysis
result.
                        </long_desc>
					</boolopt>
					<boolopt>
						<name>Profiling</name>
						<alias>profiling</alias>
						<short_desc>Profile the results of array bounds check analysis.</short_desc>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Profiling Generator</name>
					<alias>jap.profiling</alias>
					<class>ProfilingOptions</class>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Not Main Entry</name>
						<alias>notmainentry</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Side effect tagger</name>
					<alias>jap.sea</alias>
					<class>SETOptions</class>
                                        <long_desc>Uses the active invoke graph to
produce side-effect attributes as described in the Spark thesis, chapter 6.
</long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Build naive dependence graph</name>
						<alias>naive</alias>
						<default>false</default>
						<short_desc/>
						<long_desc>When set to true, the
dependence graph is built with a node for each statement, without merging the
nodes for equivalent statements. The purpose of this switch is to make it possible
to measure the effect of merging nodes for equivalent statements on the size
of the dependence graph.</long_desc>
					</boolopt>
				</sub_phase>
                                <sub_phase>
					<name>Field Read/Write Tagger</name>
                                        <class>FRWOptions</class>
					<alias>jap.fieldrw</alias>
					<long_desc>
Uses the active invoke graph to produce tags indicating which fields may
be read or written by each statement, including invoke statements.
                        </long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<intopt>
						<name>Maximum number of fields</name>
						<alias>threshold</alias>
                                                <default>100</default>
						<short_desc/>
						<long_desc>
If a statement reads/writes more than this number of fields, no tag will be
produced for it, in order to keep the size of the tags reasonable.
                        </long_desc>
					</intopt>
				</sub_phase>
				<sub_phase>
					<name>Call Graph Tagger</name>
					<alias>jap.cgtagger</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
			</phase>
			<phase>
				<name>Grimp Body Creation</name>
				<alias>gb</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>true</default>
					<short_desc/>
					<long_desc/>
				</boolopt>
				<sub_phase>
					<name>Aggregator 1</name>
					<alias>gb.a1</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Only Stack Locals</name>
						<alias>only-stack-locals</alias>
						<default>true</default>
						<short_desc/>
						<long_desc>Aggregate values stored in stack locals only.</long_desc>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Constructor Folder</name>
					<alias>gb.cf</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Aggregator 2</name>
					<alias>gb.a2</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
					<boolopt>
						<name>Only Stack Locals</name>
						<alias>only-stack-locals</alias>
						<default>true</default>
						<short_desc/>
						<long_desc>Aggregate values stored in stack locals only.</long_desc>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Unused Local Eliminator</name>
					<alias>gb.ule</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
			</phase>
			<phase>
				<name>Grimp Optimization Pack</name>
				<alias>gop</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>false</default>
				</boolopt>
			</phase>
			<phase>
				<name>Baf Body Creation</name>
				<alias>bb</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>true</default>
				</boolopt>
				<sub_phase>
					<name>Load Store Optimizer</name>
					<alias>bb.lso</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
					<boolopt>
						<name>Debug</name>
						<alias>debug</alias>
					</boolopt>
					<boolopt>
						<name>Inter</name>
						<alias>inter</alias>
					</boolopt>
					<boolopt>
						<name>sl</name>
						<alias>sl</alias>
						<default>true</default>
					</boolopt>
					<boolopt>
						<name>sl2</name>
						<alias>sl2</alias>
					</boolopt>
					<boolopt>
						<name>sll</name>
						<alias>sll</alias>
						<default>true</default>
					</boolopt>
					<boolopt>
						<name>sll2</name>
						<alias>sll2</alias>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Peephole Optimizer</name>
					<alias>bb.pho</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Unused Local Eliminator</name>
					<alias>bb.ule</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Local Packer</name>
					<alias>bb.lp</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
                                                <default>true</default>
					</boolopt>
					<boolopt>
						<name>Unsplit Original Locals</name>
						<alias>unsplit-original-locals</alias>
					</boolopt>
				</sub_phase>
			</phase>
			<phase>
				<name>Baf Optimization Pack</name>
				<alias>bop</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>false</default>
				</boolopt>
			</phase>
			<phase>
				<name>Tag</name>
				<alias>tag</alias>
				<boolopt>
					<name>Enabled</name>
					<alias>enabled</alias>
                                        <default>true</default>
				</boolopt>
				<sub_phase>
					<name>Line Number Tag Aggregator</name>
					<alias>tag.ln</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Array Bounds and Null Pointer Check Tag Aggregator</name>
					<alias>tag.an</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
				<sub_phase>
					<name>Dependence Tag Aggregator</name>
					<alias>tag.dep</alias>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
                                <sub_phase>
					<name>Field Read/Write Tag Aggregator</name>
					<alias>tag.fieldrw</alias>
                                        <long_desc>Aggregates field read/write
tags produced by the Field Read/Write Tagger, phase <tt>jap.fieldrw</tt>.</long_desc>
					<boolopt>
						<name>Enabled</name>
						<alias>enabled</alias>
						<default>false</default>
						<short_desc/>
						<long_desc/>
					</boolopt>
				</sub_phase>
			</phase>
		</phaseopt>
		<macroopt>
			<name>Optimize</name>
			<alias>O</alias>
			<alias>optimize</alias>
			<expansion>-p</expansion>
                        <expansion>gb.a1</expansion>
                        <expansion>only-stack-locals:false</expansion>
			<expansion>-p</expansion>
                        <expansion>gb.a2</expansion>
                        <expansion>only-stack-locals:false</expansion>
			<expansion>-p</expansion>
                        <expansion>bop</expansion>
                        <expansion>enabled:true</expansion>
			<expansion>-p</expansion>
                        <expansion>gop</expansion>
                        <expansion>enabled:true</expansion>
			<expansion>-p</expansion>
                        <expansion>jop</expansion>
                        <expansion>enabled:true</expansion>
			<expansion>-p</expansion>
                        <expansion>sop</expansion>
                        <expansion>enabled:true</expansion>
			<short_desc>perform scalar optimizations on the classfiles</short_desc>
			<long_desc>Perform scalar optimizations on the classfiles.</long_desc>
		</macroopt>
		<macroopt>
			<name>Whole Program Optimize</name>
			<alias>W</alias>
			<alias>whole-optimize</alias>
			<expansion>-p</expansion>
                        <expansion>wjop</expansion>
                        <expansion>enabled:true</expansion>
                        <expansion>-w</expansion>
			<short_desc>perform whole program optimizations on the classfiles</short_desc>
			<long_desc>Perform whole program optimizations on the classfiles; this also enables -O.</long_desc>
		</macroopt>
		<boolopt>
			<name>Via Shimple</name>
			<alias>via-shimple</alias>
			<short_desc>enables phases operating on Shimple SSA representation</short_desc>
			<long_desc>This option ... </long_desc>
		</boolopt>
	</section>
	<section>
		<name>Single File Mode Options</name>
		<listopt>
			<name>Process Path</name>
			<alias>process-path</alias>
			<short_desc>process all classes on the PATH</short_desc>
			<long_desc>Process all classes in PATH. All the classes found in PATH will be loaded and transformed in single-file mode.
</long_desc>
		</listopt>
	</section>
	<section>
		<name>Application Mode Options</name>
		<listopt>
			<name>Include Package</name>
			<alias>i</alias>
			<alias>include</alias>
			<short_desc>marks classfiles in PACKAGE (e.g. java.util.)as application classes</short_desc>
			<long_desc>Marks the classfiles in PACKAGE (e.g. java.util.) as application classes. This option can be used to transform library types which by default are not transformed by soot.</long_desc>
		</listopt>
		<listopt>
			<name>Exclude Package</name>
			<alias>x</alias>
			<alias>exclude</alias>
			<short_desc>marks classfiles in PACKAGE (e.g. java.) as context classes</short_desc>
			<long_desc>Marks classfiles in PACKAGE (e.g. java.) as context classes. Jimple is not produced for context classes, but the SootClass, SootField and SootMethod signature objects are created.</long_desc>
		</listopt>
		<listopt>
			<name>Dynamic Classes</name>
			<alias>dynamic-classes</alias>
			<short_desc>marks CLASSES (separated by colons) as potentially dynamic classes</short_desc>
			<long_desc>This option ...</long_desc>
		</listopt>
		<listopt>
			<name>Dynamic Path</name>
			<alias>dynamic-path</alias>
			<short_desc>marks all class files in PATH as potentially dynamic classes</short_desc>
			<long_desc>Marks all class files in PATH as potentially dynamic classes. This allows aggressive optimization of applications for which the set of dynamic classes that can be loaded is known at compile time.</long_desc>
		</listopt>
		<listopt>
			<name>Dynamic Package</name>
			<alias>dynamic-package</alias>
			<short_desc>marks classfiles in PACKAGES (separated by commas) as potentially dynamic classes</short_desc>
			<long_desc>Marks all class files belonging to a package listed in PACKAGES (or one of its subpackages) as potentially dynamic classes.</long_desc>
		</listopt>
	</section>
	<section>
		<name>Input Attribute Options</name>
		<boolopt>
			<name>Keep Line Number</name>
			<alias>keep-line-number</alias>
			<short_desc>keep line number tables</short_desc>
			<long_desc>Preserves the line number tables of class files through transformations.</long_desc>
		</boolopt>
		<boolopt>
			<name>Keep Bytecode Offset</name>
			<alias>keep-bytecode-offset</alias>
			<alias>keep-offset</alias>
			<short_desc>attach bytecode offset to jimple statement</short_desc>
			<long_desc>Preserves the bytecode offset tables of class files through transformations.</long_desc>
		</boolopt>
	</section>
	<section>
		<name>Annotation Options</name>
		<macroopt>
			<name>Null Pointer Annotation</name>
			<alias>annot-nullpointer</alias>
			<expansion>-p</expansion>
                        <expansion>jap.npc</expansion>
                        <expansion>enabled:true</expansion>
                        <expansion>-p</expansion>
                        <expansion>tag.an</expansion>
                        <expansion>enabled:true</expansion>
			<short_desc>turn on the annotation for null pointer</short_desc>
			<long_desc>This option ...</long_desc>
		</macroopt>
		<macroopt>
			<name>Array Bounds Annotation</name>
			<alias>annot-arraybounds</alias>
			<expansion>-p</expansion>
                        <expansion>wjap.ra</expansion>
                        <expansion>enabled:true</expansion>
                        <expansion>-p</expansion>
                        <expansion>jap.abc</expansion>
                        <expansion>enabled:true</expansion>
                        <expansion>-p</expansion>
                        <expansion>tag.an</expansion>
                        <expansion>enabled:true</expansion>
			<short_desc>turn on the annotation for array bounds check</short_desc>
			<long_desc>This option ...</long_desc>
		</macroopt>
		<macroopt>
			<name>Side effect annotation</name>
			<alias>annot-side-effect</alias>
                        <expansion>-w</expansion>
			<expansion>-p</expansion>
                        <expansion>jap.sea</expansion>
                        <expansion>enabled:true</expansion>
                        <expansion>-p</expansion>
                        <expansion>tag.dep</expansion>
                        <expansion>enabled:true</expansion>
			<short_desc>turn on side-effect attributes</short_desc>
			<long_desc>This option ...</long_desc>
		</macroopt>
		<macroopt>
			<name>Field read/write annotation</name>
			<alias>annot-fieldrw</alias>
                        <expansion>-w</expansion>
			<expansion>-p</expansion>
                        <expansion>jap.fieldrw</expansion>
                        <expansion>enabled:true</expansion>
                        <expansion>-p</expansion>
                        <expansion>tag.fieldrw</expansion>
                        <expansion>enabled:true</expansion>
			<short_desc>turn on field read/write attributes</short_desc>
			<long_desc>This option ...</long_desc>
		</macroopt>
	</section>
	<section>
		<name>Miscellaneous Options</name>
		<boolopt>
			<name>Time</name>
			<alias>time</alias>
			<short_desc>print out time statistics about tranformations</short_desc>
			<long_desc>Print out time statistics about transformations.</long_desc>
		</boolopt>
		<boolopt>
			<name>Subtract Garbage Collection Time</name>
			<alias>subtract-gc</alias>
			<short_desc>attempt to subtract the gc from the time stats</short_desc>
			<long_desc>Attempt to subtract garbage-collection time from the time stats.</long_desc>
		</boolopt>
	</section>
</options>
