/**
 * Implementation of util.NativeHelper.
 *
 * @author Feng Qian
 */
package soot.jimple.toolkits.pointer;

import soot.*;
import soot.jimple.*;
import soot.jimple.toolkits.pointer.constraints.*;
import soot.jimple.toolkits.pointer.representations.*;
import soot.jimple.toolkits.pointer.util.*;

import java.util.*;

public abstract class MyNativeHelper 
  extends NativeHelper implements TypeConstants{

  /* list to hold generated constraint expressions */
  public static LinkedList constraints;

  /************* implementation of NativeHelper ***************/
  protected 
    void assignImpl(ReferenceVariable lhs, ReferenceVariable rhs) {
    constraints.addLast(new ConstraintExpression((ConstraintVariable)lhs,
						 (ConstraintVariable)rhs));
  }
  
  protected 
    void assignObjectToImpl(ReferenceVariable lhs, AbstractObject obj) {
    constraints.addLast(new ConstraintExpression((ConstraintVariable)lhs,
						 obj));
  }

  /* Also cloning returns the original variable, it is conservative
   * for points-to analyses.
   */
  protected 
    ReferenceVariable cloneObjectImpl(ReferenceVariable source) {
    return source;
  }

  /* It implements the newInstance0 method of java.lang.Class. 
   * The 'cls' must have the type 'java.lang.Class'.
   * It may not be possible to know what 'cls' is. Give dummy
   * variable 'java.lang.Object' type is conservative.
   */ 
  protected 
    ReferenceVariable newInstanceOfImpl(ReferenceVariable cls) {
    ConstraintVariable dummy = DummyVariable.produce(OBJECTCLASS);
    constraints.addLast(new ConstraintExpression(dummy, 
				       Environment.getLeastObject()));
    return dummy;
  }

  /* We can get more accurate declaring type info from field signature.
   * The static field may imply a call of <clinit>, but we do not have to
   * worry about this in native method because the method get called 
   * before.
   */
  protected 
    ReferenceVariable staticFieldImpl(String fieldsig) {
    return DummyVariable.produce(fieldsig, OBJECTCLASS);
  }

  /* Makes a dummy variable for a temporary field 
   */
  protected 
    ReferenceVariable tempFieldImpl(String fieldsig){
    return DummyVariable.produce(fieldsig, OBJECTCLASS);
  } 

  /* Makes a dummy variable for a temporary variable.
   */
  protected
    ReferenceVariable tempVariableImpl(){
    return DummyVariable.produce(OBJECTCLASS);
  }
}
