/**
 * Wrapper over NativeMethodDriver, this is implementation-dependent.
 *
 * @author Feng Qian
 */

package soot.jimple.toolkits.pointer;

import soot.jimple.toolkits.pointer.util.*;
import soot.jimple.toolkits.pointer.representations.*;
import soot.jimple.toolkits.pointer.constraints.*;
import soot.*;
import java.util.*;

public class MyNativeMethodWrapper {

  private static MyNativeHelper myhelper;

  public static void initialize(MyNativeHelper helper){
    myhelper = helper;
    NativeHelper.register(myhelper);
  }

  public static void collect(SootMethod method,
			     LinkedList constraintList){

    myhelper.constraints = constraintList;
   
    /* we can make reference variable for each parameter, 
     * although a native method may not be statis, but it can not have
     * more than one target.
     */
    ReferenceVariable thisVar = MethodThis.produce(method);
    ReferenceVariable returnVar = MethodReturn.produce(method);
    
    int paramcount = method.getParameterCount();
    ReferenceVariable params[] = new ReferenceVariable[paramcount];
    for (int i=0; i<paramcount; i++) {
      params[i] = MethodParameter.produce(method, i);
    }

    NativeMethodDriver.process(method, thisVar, returnVar, params);
			       
    myhelper.constraints = null;
  }

}
