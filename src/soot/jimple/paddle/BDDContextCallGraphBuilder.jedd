/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;

/** Converts context-insensitive call edges into context-sensitive ones
 * for each reachable method context.
 * @author Ondrej Lhotak
 */
public class BDDContextCallGraphBuilder extends AbsContextCallGraphBuilder 
{ 
    BDDContextCallGraphBuilder( Rctxt_method in, Qsrcc_srcm_stmt_kind_tgtc_tgtm out,
            AbsCallGraph cicg ) {
        super( in, out, cicg );
    }
    public void update() {
        <ctxt, method> methods = in.get();
        // get all edges out of all the methods, ignoring context
        Rsrcc_srcm_stmt_kind_tgtc_tgtm edges = cicg.edgesOutOf(
            new Rctxt_methodBDD(
                (ctxt=>) methods{} >< new { null=>ctxt } {} ) );
        // add in the contexts as source contexts
        out.add( (srcc=>) edges.get(){srcm} >< (ctxt=>srcc) methods{method} );
    }
}

