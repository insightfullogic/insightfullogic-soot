/* Soot - a J*va Optimization Framework
 * Copyright (C) 2003 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.util.*;
import soot.jimple.paddle.bdddomains.*;
import java.util.*;

/** A BDD implementation of the class hierarchy.
 * @author Ondrej Lhotak
 */

public final class BDDHierarchy {
    /** Compute and return the subtype relation containing all pairs s, t
     *  such that s is a subtype of t.
     */
    public <subt, supt> subtypeRelation() { 
        update();
        return closure | (anyst=>subt, type=>supt) anySub;
    }

    /** Update hierarchy for any types that have been newly added since it was
     *  built.
     */
    public void update() {
        updateTypes();
        updateClosure();
    }

    private void updateTypes() {
        ArrayNumberer tn = Scene.v().getTypeNumberer();
        for( int i = maxType+1; i <= tn.size(); i++ ) {
            processNewType( (Type) tn.get(i) );
        }
    }

    /* End of public methods. */

    /** Identity relation: for all t, t is a subtype of t. */ 
    private <subt:T1, supt:T2> identity = 0B;

    /** Extends relation: s extends t, where s, t are classes and s is declared
     *  to extend t.
     */
    private <subt:T1, supt:T2> extend = 0B;
    public <subt, supt> extend() { return extend; }

    /** Implements relation: s implements t, where s, t are classes and
     *  s is declared to implement t.
     */
    private <subt:T1, supt:T2> implement = 0B;

    /** Array relation: s is a subtype of t when s is an array, and t is its
     *  direct supertype. The direct supertype of an array is the array of
     *  Object with the same number of dimensions. The direct supertype of
     *  an array of Object is the array of Object with one less dimension.
     *  The direct supertype of Object[] is Object.
     */
    private <subt:T1, supt:T2> array = 0B;
    public <subt, supt> array() { return array; }

    private <arrayt:T3, elemt> arrayElem = 0B;

    /** If s is AnySubType(t), and u is a subtype of t, contains the pair
     *  s:anyst, u:type.
     */
    private <anyst:T1, type:T2> anySub = 0B;
    public <anyst, type> anySub() { return anySub; }
    private <anyst, type> oldAnySub = 0B;

    /** NullType is a subtype of everything. */
    private <subt, supt> nullType = 0B;

    /** The computed subtype relation. Contains all pairs s:subt, t:supt
     *  for which s is a subtype of t.
     */
    private <subt:T1, supt:T2> closure = 0B;

    private <type> concreteNonArray = 0B;
    private <type> concrete = 0B;
    public <type> concrete() {
        updateTypes();
        return concrete;
    }


    private RefType jlo = RefType.v("java.lang.Object");
    private RefType jis = RefType.v("java.io.Serializable");
    private RefType jlc = RefType.v("java.lang.Cloneable");
    /** Return the array of Object with dimensions dimensions, or Object if
     *  dimensions is 0.
     */
    private Type array(int dimensions, Type base) {
        Type ret;
        if( dimensions == 0 ) ret = base;
        else ret = ArrayType.v(base, dimensions);
        Scene.v().getTypeNumberer().add(ret);
        return ret;
    }

    private int maxType = 0;
    /** Given a type never seen before, add the relation between it and its
     *  direct supertype to the hierarchy.
     */
    private void processNewType( Type t ) {
        if( t instanceof RefType ) {
            RefType rt = (RefType) t;
            SootClass sc = rt.getSootClass();
            if( sc == null ) return;
            identity |= new{ rt=>subt, rt=>supt };
            if( sc.hasSuperclass() ) {
                extend |= new{ rt=>subt,
                                  sc.getSuperclass().getType()=>supt };
            }
            for( Iterator ifaceIt = sc.getInterfaces().iterator(); ifaceIt.hasNext(); ) {
                final SootClass iface = (SootClass) ifaceIt.next();
                implement |= new{ rt=>subt, iface.getType()=>supt };
            }
            if( sc.isConcrete() ) {
                concrete |= new{rt=>type};
                concreteNonArray |= new{rt=>type};
            }
        } else if( t instanceof ArrayType ) {
            identity |= new{ t=>subt, t=>supt };
            ArrayType at = (ArrayType) t;
            if( at.baseType instanceof PrimType ) {
                array |= new{ at=>subt, array(at.numDimensions-1, jlo)=>supt }
                        |new{ at=>subt, array(at.numDimensions-1, jis)=>supt }
                        |new{ at=>subt, array(at.numDimensions-1, jlc)=>supt };
            } else if( at.baseType instanceof RefType ) {
                RefType rt = (RefType) at.baseType;
                if( rt.equals( jlo ) ) {
                    array |= new{ at=>subt, array(at.numDimensions-1, jlo)=>supt }
                            |new{ at=>subt, array(at.numDimensions-1, jis)=>supt }
                            |new{ at=>subt, array(at.numDimensions-1, jlc)=>supt };
                } else {
                    array |= new{ at=>subt, array(at.numDimensions, jlo)=>supt };
                }
            } else throw new RuntimeException( "unhandled: "+at.baseType );
            arrayElem |= new{at=>arrayt, at.getArrayElementType()=>elemt};
            concrete |= new{at=>type};
        } else if( t instanceof AnySubType ) {
            AnySubType as = (AnySubType) t;
            anySub |= new{ as=>anyst, as.getBase()=>type };
            anySub |= new{ as=>anyst, NullType.v()=>type };
        } else if( t instanceof NullType ) {
            identity |= new{ t=>subt, t=>supt };
        }
        nullType |= new{NullType.v()=>subt, t=>supt};
        if( t.getNumber() > maxType ) maxType = t.getNumber();
    }
    
    /** Compute transitive closure to get subtype relationship. */
    private void updateClosure() {
        // Add all base subtype relations into closure. 
        boolean closureChanged = (closure != 
            (closure |= extend | implement | array | identity | nullType));

        // Close closure.
        if( closureChanged )
            while( closure != ( closure |=
                closure {subt} <> (subt=>T3) closure {supt} ) );

        // Close anySub. That is, whenever s is AnySubType(t), and
        // u is a subtype of t, s could be u, so add s:anyst, u:type
        // to anySub.
        if( anySub != oldAnySub || closureChanged ) {
            anySub |= anySub {type} <> (supt=>T3)(subt=>type) closure {supt};
            anySub = anySub{type} >< concreteNonArray{type};

            // Add anySub into closure, closing it with closure first.
            closure |= (anyst=>subt) anySub {type} <> (supt=>T3) closure {subt};
        }
        oldAnySub = anySub;
        while(closure != (
            closure |=            (closure{subt}
                 <>(arrayt=>subt)arrayElem{elemt}){supt}
                         <>(arrayt=>supt)arrayElem{elemt}));
    }
}

