/* Soot - a J*va Optimization Framework
 * Copyright (C) 2004 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.util.*;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import java.util.*;

/** Instantiates the pointer flow edges of methods in specific contexts.
 * @author Ondrej Lhotak
 */
public class BDDMethodPAGContextifier extends AbsMethodPAGContextifier
{ 
    public BDDMethodPAGContextifier(
        Rsrc_dst simple,
        Rsrc_fld_dst load,
        Rsrc_fld_dst store,
        Robj_var alloc,

        Rvar_method_type locals,
        Rvar_type globals,
        Robj_method_type localallocs,
        Robj_type globalallocs,

        Rctxt_method rcout,

        Qsrcc_src_dstc_dst csimple,
        Qsrcc_src_fld_dstc_dst cload,
        Qsrcc_src_fld_dstc_dst cstore,
        Qobjc_obj_varc_var calloc ) 
    {
        super(
            simple, load, store, alloc,
            locals, globals, localallocs, globalallocs,
            rcout,
            csimple, cload, cstore, calloc );
    }

    public void update() {
        localMap |= (type=>) locals.get();
        globalSet |= (type=>) globals.get();
        localallocMap |= (type=>) localallocs.get();
        globalallocSet |= (type=>) globalallocs.get();

        <src, dst> newSimple = simple.get();
        csimple.add((( newSimple{src}><
                       globalSet{var}){dst}><
                             globalSet{var}){}><
                 new{null=>srcc, null=>dstc}{} );
        mpagSimple |= newSimple{src}><localMap{var};
        mpagSimple |= newSimple{dst}><localMap{var};
        
        <src, fld, dst> newStore = store.get();
        cstore.add((( newStore {src}><
                      globalSet{var}){dst}><
                            globalSet{var}){}><
                new{null=>srcc, null=>dstc}{} );
        mpagStore |= newStore{src}><localMap{var};
        mpagStore |= newStore{dst}><localMap{var};
        
        <src, fld, dst> newLoad = load.get();
        cload.add((( newLoad  {src}><
                     globalSet{var}){dst}><
                           globalSet{var}){}><
               new{null=>srcc, null=>dstc}{} );
        mpagLoad |= newLoad{src}><localMap{var};
        mpagLoad |= newLoad{dst}><localMap{var};
        
        <var, obj> newAlloc = alloc.get();
        calloc.add((( newAlloc{var}><
                     globalSet{var}){obj}><
                      globalallocSet{obj}){}><
                  new{null=>varc, null=>objc}{} );
        mpagAlloc |= newAlloc{var}><localMap{var};
        mpagAlloc |= newAlloc{obj}><localallocMap{obj};
        
        <var> localSet = (method=>) localMap;
        <src, dst> localLocal = (var=>src)localSet{} >< (var=>dst)localSet{};

        <ctxt, method> contexts = rcout.get();

        <ctxt, src, dst> ctxtSimple = contexts{method}<>mpagSimple{method};
        csimple.add( (ctxt=>srcc) ctxtSimple{dst}><globalSet{var}{} 
                                               >< new{null=>dstc}{} );
        csimple.add( (ctxt=>dstc) ctxtSimple{src}><globalSet{var}{} 
                                               >< new{null=>srcc}{} );
        csimple.add( (ctxt=>srcc, ctxt=>dstc) ctxtSimple{src,dst} 
                                           >< localLocal{src,dst} );
        
        <ctxt, src, fld, dst> ctxtStore = contexts{method}<>mpagStore{method};
        cstore.add( (ctxt=>srcc) ctxtStore{dst}><globalSet{var}{} 
                                             >< new{null=>dstc}{} );
        cstore.add( (ctxt=>dstc) ctxtStore{src}><globalSet{var}{} 
                                             >< new{null=>srcc}{} );
        cstore.add( (ctxt=>srcc, ctxt=>dstc) ctxtStore{src,dst} 
                                         >< localLocal{src,dst} );
        
        <ctxt, src, fld, dst> ctxtLoad = contexts{method}<>mpagLoad{method};
        cload.add( (ctxt=>srcc) ctxtLoad{dst}><globalSet{var}{} 
                                           >< new{null=>dstc}{} );
        cload.add( (ctxt=>dstc) ctxtLoad{src}><globalSet{var}{} 
                                           >< new{null=>srcc}{} );
        cload.add( (ctxt=>srcc, ctxt=>dstc) ctxtLoad{src,dst} 
                                       >< localLocal{src,dst} );
        
        <var, obj> localLocalalloc = 
            (method=>)localMap{} >< (method=>)localallocMap{};
        <ctxt, var, obj> ctxtAlloc = contexts{method}<>mpagAlloc{method};
        calloc.add( (ctxt=>objc) ctxtAlloc{var}><globalSet{var}{} 
                                             >< new{null=>varc}{} );
        calloc.add( (ctxt=>varc) ctxtAlloc{obj}><globalallocSet{obj}{} 
                                                  >< new{null=>objc}{} );
        calloc.add( (ctxt=>varc, ctxt=>objc) ctxtAlloc{var,obj} 
                                    >< localLocalalloc{var,obj} );
    }

    private <var, method> localMap = 0B;
    private <var> globalSet = 0B;
    private <obj, method> localallocMap = 0B;
    private <obj> globalallocSet = 0B;

    private <method, src, dst> mpagSimple = 0B;
    private <method, src, fld, dst> mpagStore = 0B;
    private <method, src, fld, dst> mpagLoad = 0B;
    private <method, var, obj> mpagAlloc = 0B;
}

