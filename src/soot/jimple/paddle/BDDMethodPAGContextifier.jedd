/* Soot - a J*va Optimization Framework
 * Copyright (C) 2004 Ondrej Lhotak
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the
 * Free Software Foundation, Inc., 59 Temple Place - Suite 330,
 * Boston, MA 02111-1307, USA.
 */

package soot.jimple.paddle;
import soot.*;
import soot.util.*;
import soot.jimple.paddle.queue.*;
import soot.jimple.paddle.bdddomains.*;
import java.util.*;

/** Instantiates the pointer flow edges of methods in specific contexts.
 * @author Ondrej Lhotak
 */
public class BDDMethodPAGContextifier extends AbsMethodPAGContextifier
{ 
    public BDDMethodPAGContextifier(
        Rsrc_dst simple,
        Rsrc_fld_dst load,
        Rsrc_fld_dst store,
        Robj_var alloc,

        Rvar_method_type locals,
        Rvar_type globals,
        Robj_method_type localallocs,
        Robj_type globalallocs,

        Rctxt_method rcout,
        Rsrcm_stmt_kind_tgtm_src_dst parms,
        Rsrcm_stmt_kind_tgtm_src_dst rets,
        Rsrcc_srcm_stmt_kind_tgtc_tgtm calls,

        Qsrcc_src_dstc_dst csimple,
        Qsrcc_src_fld_dstc_dst cload,
        Qsrcc_src_fld_dstc_dst cstore,
        Qobjc_obj_varc_var calloc ) 
    {
        super(
            simple, load, store, alloc,
            locals, globals, localallocs, globalallocs,
            rcout, parms, rets, calls,
            csimple, cload, cstore, calloc );
    }

    public boolean update() {
        <srcc, src, dstc, dst> simpleOut = 0B;
        <srcc, src, fld, dstc, dst> loadOut = 0B;
        <srcc, src, fld, dstc, dst> storeOut = 0B;
        <objc, obj, varc, var> allocOut = 0B;

        localMap |= (type=>) locals.get();
        globalSet |= (type=>) globals.get();
        localallocMap |= (type=>) localallocs.get();
        globalallocSet |= (type=>) globalallocs.get();

        <src, dst> newSimple = simple.get();
        csimple.add  ((( newSimple{src}><
                         globalSet{var}){dst}><
                               globalSet{var}){}><
                   new{null=>srcc, null=>dstc}{} );
        mpagSimple |= newSimple{src}><localMap{var};
        mpagSimple |= newSimple{dst}><localMap{var};
        
        <src, fld, dst> newStore = store.get();
        cstore.add  ((( newStore {src}><
                        globalSet{var}){dst}><
                              globalSet{var}){}><
                  new{null=>srcc, null=>dstc}{} );
        mpagStore |= newStore{src}><localMap{var};
        mpagStore |= newStore{dst}><localMap{var};
        
        <src, fld, dst> newLoad = load.get();
        cload.add  ((( newLoad  {src}><
                       globalSet{var}){dst}><
                             globalSet{var}){}><
                 new{null=>srcc, null=>dstc}{} );
        mpagLoad |= newLoad{src}><localMap{var};
        mpagLoad |= newLoad{dst}><localMap{var};
        
        <var, obj> newAlloc = alloc.get();
        calloc.add  ((( newAlloc{var}><
                       globalSet{var}){obj}><
                        globalallocSet{obj}){}><
                    new{null=>varc, null=>objc}{} );
        mpagAlloc |= newAlloc{var}><localMap{var};
        mpagAlloc |= newAlloc{obj}><localallocMap{obj};
        
        <var> localSet = (method=>) localMap;

        <ctxt, method> contexts = rcout.get();

        <ctxt, src, dst> ctxtSimple = contexts{method}<>mpagSimple{method};
        simpleOut |= ( (ctxt=>srcc, ctxt=>dstc) ctxtSimple );
        
        <ctxt, src, fld, dst> ctxtStore = contexts{method}<>mpagStore{method};
        storeOut |= ( (ctxt=>srcc, ctxt=>dstc) ctxtStore );
        
        <ctxt, src, fld, dst> ctxtLoad = contexts{method}<>mpagLoad{method};
        loadOut |= ( (ctxt=>srcc, ctxt=>dstc) ctxtLoad );
        
        <ctxt, var, obj> ctxtAlloc = contexts{method}<>mpagAlloc{method};
        allocOut |= ( (ctxt=>varc, ctxt=>objc) ctxtAlloc );

        allParms |= parms.get();
        allRets |= rets.get();

        <srcc, srcm, stmt, kind, tgtc, tgtm> newCalls = calls.get();
        simpleOut |= (tgtc=>dstc) 
            newCalls{srcm, stmt, kind, tgtm} <>
            allParms{srcm, stmt, kind, tgtm};
        simpleOut |= (srcc=>dstc, tgtc=>srcc)
            newCalls{srcm, stmt, kind, tgtm} <>
             allRets{srcm, stmt, kind, tgtm};

        <srcc, src, dstc, dst> globalDsts = simpleOut{dst} >< globalSet{var};
        simpleOut -= globalDsts;
        simpleOut |= ((dstc=>) globalDsts){} >< new{null=>dstc}{};
        <srcc, src, dstc, dst> globalSrcs = simpleOut{src} >< globalSet{var};
        simpleOut -= globalSrcs;
        simpleOut |= ((srcc=>) globalSrcs){} >< new{null=>srcc}{};
        csimple.add(simpleOut);

        <srcc, src, fld, dstc, dst> globalStoreDsts = storeOut{dst} >< globalSet{var};
        storeOut -= globalStoreDsts;
        storeOut |= ((dstc=>) globalStoreDsts){} >< new{null=>dstc}{};
        <srcc, src, fld, dstc, dst> globalStoreSrcs = storeOut{src} >< globalSet{var};
        storeOut -= globalStoreSrcs;
        storeOut |= ((srcc=>) globalStoreSrcs){} >< new{null=>srcc}{};
        cstore.add(storeOut);

        <srcc, src, fld, dstc, dst> globalLoadDsts = loadOut{dst} >< globalSet{var};
        loadOut -= globalLoadDsts;
        loadOut |= ((dstc=>) globalLoadDsts){} >< new{null=>dstc}{};
        <srcc, src, fld, dstc, dst> globalLoadSrcs = loadOut{src} >< globalSet{var};
        loadOut -= globalLoadSrcs;
        loadOut |= ((srcc=>) globalLoadSrcs){} >< new{null=>srcc}{};
        cload.add(loadOut);

        <objc, obj, varc, var> globalAllocDsts = allocOut{var} >< globalSet{var};
        allocOut -= globalAllocDsts;
        allocOut |= ((varc=>) globalAllocDsts){} >< new{null=>varc}{};
        <objc, obj, varc, var> globalAllocSrcs = allocOut{obj} >< globalallocSet{obj};
        allocOut -= globalAllocSrcs;
        allocOut |= ((objc=>) globalAllocSrcs){} >< new{null=>objc}{};
        calloc.add(allocOut);
        return false;
    }

    private <var, method> localMap = 0B;
    private <var> globalSet = 0B;
    private <obj, method> localallocMap = 0B;
    private <obj> globalallocSet = 0B;

    private <method, src, dst> mpagSimple = 0B;
    private <method, src, fld, dst> mpagStore = 0B;
    private <method, src, fld, dst> mpagLoad = 0B;
    private <method, var, obj> mpagAlloc = 0B;

    private <srcm, stmt, kind, tgtm, src, dst> allParms = 0B;
    private <srcm, stmt, kind, tgtm, src, dst> allRets = 0B;
}

