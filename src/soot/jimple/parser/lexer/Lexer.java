/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package soot.jimple.parser.lexer;

import java.io.*;
import java.util.*;
import soot.jimple.parser.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("Unable to read lexer.dat.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

	int[][][] gotoTable = this.gotoTable[state.id()];
	int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 85:
                        {
                            Token token = new85(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 86:
                        {
                            Token token = new86(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 87:
                        {
                            Token token = new87(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 88:
                        {
                            Token token = new88(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 89:
                        {
                            Token token = new89(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 90:
                        {
                            Token token = new90(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 91:
                        {
                            Token token = new91(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 92:
                        {
                            Token token = new92(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 93:
                        {
                            Token token = new93(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(int line, int pos) { return new TAbstract(line, pos); }
    Token new1(int line, int pos) { return new TFinal(line, pos); }
    Token new2(int line, int pos) { return new TNative(line, pos); }
    Token new3(int line, int pos) { return new TPublic(line, pos); }
    Token new4(int line, int pos) { return new TProtected(line, pos); }
    Token new5(int line, int pos) { return new TPrivate(line, pos); }
    Token new6(int line, int pos) { return new TStatic(line, pos); }
    Token new7(int line, int pos) { return new TSynchronized(line, pos); }
    Token new8(int line, int pos) { return new TTransient(line, pos); }
    Token new9(int line, int pos) { return new TVolatile(line, pos); }
    Token new10(int line, int pos) { return new TClass(line, pos); }
    Token new11(int line, int pos) { return new TInterface(line, pos); }
    Token new12(int line, int pos) { return new TVoid(line, pos); }
    Token new13(int line, int pos) { return new TBoolean(line, pos); }
    Token new14(int line, int pos) { return new TByte(line, pos); }
    Token new15(int line, int pos) { return new TShort(line, pos); }
    Token new16(int line, int pos) { return new TChar(line, pos); }
    Token new17(int line, int pos) { return new TInt(line, pos); }
    Token new18(int line, int pos) { return new TLong(line, pos); }
    Token new19(int line, int pos) { return new TFloat(line, pos); }
    Token new20(int line, int pos) { return new TDouble(line, pos); }
    Token new21(int line, int pos) { return new TNullType(line, pos); }
    Token new22(int line, int pos) { return new TUnknown(line, pos); }
    Token new23(int line, int pos) { return new TExtends(line, pos); }
    Token new24(int line, int pos) { return new TImplements(line, pos); }
    Token new25(int line, int pos) { return new TBreakpoint(line, pos); }
    Token new26(int line, int pos) { return new TCase(line, pos); }
    Token new27(int line, int pos) { return new TCatch(line, pos); }
    Token new28(int line, int pos) { return new TCmp(line, pos); }
    Token new29(int line, int pos) { return new TCmpg(line, pos); }
    Token new30(int line, int pos) { return new TCmpl(line, pos); }
    Token new31(int line, int pos) { return new TDefault(line, pos); }
    Token new32(int line, int pos) { return new TEntermonitor(line, pos); }
    Token new33(int line, int pos) { return new TExitmonitor(line, pos); }
    Token new34(int line, int pos) { return new TGoto(line, pos); }
    Token new35(int line, int pos) { return new TIf(line, pos); }
    Token new36(int line, int pos) { return new TInstanceof(line, pos); }
    Token new37(int line, int pos) { return new TInterfaceinvoke(line, pos); }
    Token new38(int line, int pos) { return new TLengthof(line, pos); }
    Token new39(int line, int pos) { return new TLookupswitch(line, pos); }
    Token new40(int line, int pos) { return new TNeg(line, pos); }
    Token new41(int line, int pos) { return new TNew(line, pos); }
    Token new42(int line, int pos) { return new TNewarray(line, pos); }
    Token new43(int line, int pos) { return new TNewmultiarray(line, pos); }
    Token new44(int line, int pos) { return new TNop(line, pos); }
    Token new45(int line, int pos) { return new TRet(line, pos); }
    Token new46(int line, int pos) { return new TReturn(line, pos); }
    Token new47(int line, int pos) { return new TSpecialinvoke(line, pos); }
    Token new48(int line, int pos) { return new TStaticinvoke(line, pos); }
    Token new49(int line, int pos) { return new TTableswitch(line, pos); }
    Token new50(int line, int pos) { return new TThrow(line, pos); }
    Token new51(int line, int pos) { return new TThrows(line, pos); }
    Token new52(int line, int pos) { return new TVirtualinvoke(line, pos); }
    Token new53(int line, int pos) { return new TNull(line, pos); }
    Token new54(int line, int pos) { return new TComma(line, pos); }
    Token new55(int line, int pos) { return new TLBrace(line, pos); }
    Token new56(int line, int pos) { return new TRBrace(line, pos); }
    Token new57(int line, int pos) { return new TSemicolon(line, pos); }
    Token new58(int line, int pos) { return new TLBracket(line, pos); }
    Token new59(int line, int pos) { return new TRBracket(line, pos); }
    Token new60(int line, int pos) { return new TLParen(line, pos); }
    Token new61(int line, int pos) { return new TRParen(line, pos); }
    Token new62(int line, int pos) { return new TColon(line, pos); }
    Token new63(int line, int pos) { return new TDot(line, pos); }
    Token new64(int line, int pos) { return new TQuote(line, pos); }
    Token new65(int line, int pos) { return new TColonEquals(line, pos); }
    Token new66(int line, int pos) { return new TEquals(line, pos); }
    Token new67(int line, int pos) { return new TAnd(line, pos); }
    Token new68(int line, int pos) { return new TOr(line, pos); }
    Token new69(int line, int pos) { return new TXor(line, pos); }
    Token new70(int line, int pos) { return new TMod(line, pos); }
    Token new71(int line, int pos) { return new TCmpeq(line, pos); }
    Token new72(int line, int pos) { return new TCmpne(line, pos); }
    Token new73(int line, int pos) { return new TCmpgt(line, pos); }
    Token new74(int line, int pos) { return new TCmpge(line, pos); }
    Token new75(int line, int pos) { return new TCmplt(line, pos); }
    Token new76(int line, int pos) { return new TCmple(line, pos); }
    Token new77(int line, int pos) { return new TShl(line, pos); }
    Token new78(int line, int pos) { return new TShr(line, pos); }
    Token new79(int line, int pos) { return new TUshr(line, pos); }
    Token new80(int line, int pos) { return new TPlus(line, pos); }
    Token new81(int line, int pos) { return new TMinus(line, pos); }
    Token new82(int line, int pos) { return new TMult(line, pos); }
    Token new83(int line, int pos) { return new TDiv(line, pos); }
    Token new84(String text, int line, int pos) { return new TFullIdentifier(text, line, pos); }
    Token new85(String text, int line, int pos) { return new TQuotedName(text, line, pos); }
    Token new86(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new87(String text, int line, int pos) { return new TAtIdentifier(text, line, pos); }
    Token new88(String text, int line, int pos) { return new TBoolConstant(text, line, pos); }
    Token new89(String text, int line, int pos) { return new TIntegerConstant(text, line, pos); }
    Token new90(String text, int line, int pos) { return new TFloatConstant(text, line, pos); }
    Token new91(String text, int line, int pos) { return new TStringConstant(text, line, pos); }
    Token new92(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new93(String text, int line, int pos) { return new TComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 35, 7}, {36, 36, 8}, {37, 37, 9}, {38, 38, 10}, {39, 39, 11}, {40, 40, 12}, {41, 41, 13}, {42, 42, 14}, {43, 43, 15}, {44, 44, 16}, {45, 45, 17}, {46, 46, 18}, {47, 47, 19}, {48, 48, 20}, {49, 57, 21}, {58, 58, 22}, {59, 59, 23}, {60, 60, 24}, {61, 61, 25}, {62, 62, 26}, {64, 64, 27}, {65, 90, 28}, {91, 91, 29}, {92, 92, 30}, {93, 93, 31}, {94, 94, 32}, {95, 95, 33}, {97, 101, 34}, {102, 102, 35}, {103, 115, 34}, {116, 116, 36}, {117, 122, 34}, {123, 123, 37}, {124, 124, 38}, {125, 125, 39}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{61, 61, 40}, },
            {{0, 33, 41}, {34, 34, 42}, {35, 91, 43}, {92, 92, 44}, {93, 127, 45}, },
            {{45, 45, 46}, {73, 73, 47}, {78, 78, 48}, },
            {{36, 36, 49}, {46, 46, 50}, {48, 57, 51}, {65, 90, 52}, {92, 92, 53}, {95, 95, 54}, {97, 122, 55}, },
            {},
            {},
            {{0, 9, 56}, {11, 12, 56}, {14, 38, 56}, {40, 65535, 56}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{97, 97, 57}, {98, 98, 58}, {99, 99, 59}, {100, 100, 60}, {101, 101, 61}, {102, 102, 62}, {103, 103, 63}, {105, 105, 64}, {108, 108, 65}, {110, 110, 66}, {112, 112, 67}, {114, 114, 68}, {115, 115, 69}, {116, 116, 70}, {117, 117, 71}, {118, 118, 72}, },
            {{42, 42, 73}, {47, 47, 74}, },
            {{46, 46, 75}, {48, 55, 76}, {56, 57, 21}, {76, 76, 77}, {88, 88, 78}, {120, 120, 79}, },
            {{46, 46, 75}, {48, 57, 21}, {76, 76, 77}, },
            {{61, 61, 80}, },
            {},
            {{60, 60, 81}, {61, 61, 82}, {99, 99, 83}, {105, 105, 84}, },
            {{61, 61, 85}, },
            {{61, 61, 86}, {62, 62, 87}, },
            {{99, 99, 88}, {112, 112, 89}, {116, 116, 90}, },
            {{36, 122, -10}, },
            {},
            {{32, 32, 91}, {34, 34, 92}, {35, 35, 93}, {39, 39, 94}, {46, 46, 95}, {92, 92, 96}, {98, 98, 97}, {102, 102, 98}, {110, 110, 99}, {114, 114, 100}, {116, 116, 101}, {117, 117, 102}, },
            {},
            {},
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 103}, {98, 122, 55}, },
            {{36, 95, -10}, {97, 113, 55}, {114, 114, 104}, {115, 122, 55}, },
            {},
            {},
            {},
            {},
            {{0, 127, -8}, },
            {},
            {{0, 127, -8}, },
            {{32, 32, 105}, {34, 34, 106}, {35, 35, 107}, {39, 39, 108}, {46, 46, 109}, {92, 92, 110}, {98, 98, 111}, {102, 102, 112}, {110, 110, 113}, {114, 114, 114}, {116, 116, 115}, {117, 117, 116}, },
            {{0, 127, -8}, },
            {{73, 73, 47}, },
            {{110, 110, 117}, },
            {{97, 97, 118}, },
            {{36, 122, -10}, },
            {{36, 36, 119}, {65, 90, 120}, {92, 92, 121}, {95, 95, 122}, {97, 122, 123}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{32, 32, 124}, {34, 34, 125}, {35, 35, 126}, {39, 39, 127}, {46, 46, 128}, {92, 92, 129}, {98, 98, 130}, {102, 102, 131}, {110, 110, 132}, {114, 114, 133}, {116, 116, 134}, {117, 117, 135}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{0, 38, -13}, {39, 39, 136}, {40, 65535, 56}, },
            {{98, 98, 137}, },
            {{111, 111, 138}, {114, 114, 139}, {121, 121, 140}, },
            {{97, 97, 141}, {104, 104, 142}, {108, 108, 143}, {109, 109, 144}, },
            {{101, 101, 145}, {111, 111, 146}, },
            {{110, 110, 147}, {120, 120, 148}, },
            {{105, 105, 149}, {108, 108, 150}, },
            {{111, 111, 151}, },
            {{102, 102, 152}, {109, 109, 153}, {110, 110, 154}, },
            {{101, 101, 155}, {111, 111, 156}, },
            {{97, 97, 157}, {101, 101, 158}, {111, 111, 159}, {117, 117, 160}, },
            {{114, 114, 161}, {117, 117, 162}, },
            {{101, 101, 163}, },
            {{104, 104, 164}, {112, 112, 165}, {116, 116, 166}, {121, 121, 167}, },
            {{97, 97, 168}, {104, 104, 169}, {114, 114, 170}, },
            {{110, 110, 171}, },
            {{105, 105, 172}, {111, 111, 173}, },
            {{0, 41, 174}, {42, 42, 175}, {43, 65535, 174}, },
            {{0, 9, 176}, {11, 12, 176}, {14, 65535, 176}, },
            {{48, 57, 177}, },
            {{46, 76, -22}, },
            {},
            {{48, 57, 178}, {65, 70, 179}, {97, 102, 180}, },
            {{48, 102, -80}, },
            {},
            {},
            {},
            {{108, 108, 181}, },
            {{110, 110, 182}, },
            {},
            {},
            {{62, 62, 183}, },
            {{97, 97, 184}, },
            {{97, 97, 185}, },
            {{104, 104, 186}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{48, 57, 187}, {65, 70, 188}, {97, 102, 189}, },
            {{36, 95, -10}, {97, 107, 55}, {108, 108, 190}, {109, 122, 55}, },
            {{36, 95, -10}, {97, 116, 55}, {117, 117, 191}, {118, 122, 55}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{48, 57, 192}, {65, 70, 193}, {97, 102, 194}, },
            {{102, 102, 195}, },
            {{78, 78, 196}, },
            {{36, 36, 197}, {46, 46, 50}, {48, 57, 198}, {65, 90, 199}, {92, 92, 200}, {95, 95, 201}, {97, 122, 202}, },
            {{36, 122, -121}, },
            {{32, 32, 203}, {34, 34, 204}, {35, 35, 205}, {39, 39, 206}, {46, 46, 207}, {92, 92, 208}, {98, 98, 209}, {102, 102, 210}, {110, 110, 211}, {114, 114, 212}, {116, 116, 213}, {117, 117, 214}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{48, 57, 215}, {65, 70, 216}, {97, 102, 217}, },
            {},
            {{115, 115, 218}, },
            {{111, 111, 219}, },
            {{101, 101, 220}, },
            {{116, 116, 221}, },
            {{115, 115, 222}, {116, 116, 223}, },
            {{97, 97, 224}, },
            {{97, 97, 225}, },
            {{112, 112, 226}, },
            {{102, 102, 227}, },
            {{117, 117, 228}, },
            {{116, 116, 229}, },
            {{105, 105, 230}, {116, 116, 231}, },
            {{110, 110, 232}, },
            {{111, 111, 233}, },
            {{116, 116, 234}, },
            {},
            {{112, 112, 235}, },
            {{115, 115, 236}, {116, 116, 237}, },
            {{110, 110, 238}, },
            {{110, 110, 239}, {111, 111, 240}, },
            {{116, 116, 241}, },
            {{103, 103, 242}, {119, 119, 243}, },
            {{112, 112, 244}, },
            {{108, 108, 245}, },
            {{105, 105, 246}, {111, 111, 247}, },
            {{98, 98, 248}, },
            {{116, 116, 249}, },
            {{111, 111, 250}, },
            {{101, 101, 251}, },
            {{97, 97, 252}, },
            {{110, 110, 253}, },
            {{98, 98, 254}, },
            {{114, 114, 255}, },
            {{97, 97, 256}, },
            {{107, 107, 257}, },
            {{114, 114, 258}, },
            {{105, 105, 259}, {108, 108, 260}, },
            {{0, 65535, -75}, },
            {{0, 41, 261}, {42, 42, 175}, {43, 46, 261}, {47, 47, 262}, {48, 65535, 261}, },
            {{0, 65535, -76}, },
            {{48, 57, 177}, {69, 69, 263}, {70, 70, 264}, {101, 101, 265}, {102, 102, 266}, },
            {{48, 70, -80}, {76, 76, 77}, {97, 102, 180}, },
            {{48, 102, -180}, },
            {{48, 102, -180}, },
            {{105, 105, 267}, },
            {{105, 105, 268}, },
            {},
            {{117, 117, 269}, },
            {{114, 114, 270}, },
            {{105, 105, 271}, },
            {{48, 57, 272}, {65, 70, 273}, {97, 102, 274}, },
            {{48, 102, -189}, },
            {{48, 102, -189}, },
            {{36, 95, -10}, {97, 114, 55}, {115, 115, 275}, {116, 122, 55}, },
            {{36, 95, -10}, {97, 100, 55}, {101, 101, 276}, {102, 122, 55}, },
            {{48, 57, 277}, {65, 70, 278}, {97, 102, 279}, },
            {{48, 102, -194}, },
            {{48, 102, -194}, },
            {{105, 105, 280}, },
            {{70, 70, 281}, {102, 102, 282}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{32, 32, 283}, {34, 34, 284}, {35, 35, 285}, {39, 39, 286}, {46, 46, 287}, {92, 92, 288}, {98, 98, 289}, {102, 102, 290}, {110, 110, 291}, {114, 114, 292}, {116, 116, 293}, {117, 117, 294}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{48, 57, 295}, {65, 70, 296}, {97, 102, 297}, },
            {{48, 57, 298}, {65, 70, 299}, {97, 102, 300}, },
            {{48, 102, -217}, },
            {{48, 102, -217}, },
            {{116, 116, 301}, },
            {{108, 108, 302}, },
            {{97, 97, 303}, },
            {{101, 101, 304}, },
            {{101, 101, 305}, },
            {{99, 99, 306}, },
            {{114, 114, 307}, },
            {{115, 115, 308}, },
            {{103, 103, 309}, {108, 108, 310}, },
            {{97, 97, 311}, },
            {{98, 98, 312}, },
            {{101, 101, 313}, },
            {{116, 116, 314}, },
            {{101, 101, 315}, },
            {{97, 97, 316}, },
            {{97, 97, 317}, },
            {{111, 111, 318}, },
            {{108, 108, 319}, },
            {{116, 116, 320}, },
            {{101, 101, 321}, },
            {{103, 103, 322}, },
            {{103, 103, 323}, },
            {{107, 107, 324}, },
            {{105, 105, 325}, },
            {},
            {{97, 97, 326}, {109, 109, 327}, },
            {},
            {{108, 108, 328}, },
            {{118, 118, 329}, },
            {{116, 116, 330}, },
            {{108, 108, 331}, },
            {{117, 117, 332}, },
            {{114, 114, 333}, },
            {{99, 99, 334}, },
            {{116, 116, 335}, },
            {{99, 99, 336}, },
            {{108, 108, 337}, },
            {{111, 111, 338}, },
            {{110, 110, 339}, },
            {{110, 110, 340}, },
            {{116, 116, 341}, },
            {{100, 100, 342}, },
            {{97, 97, 343}, },
            {{0, 41, 344}, {42, 42, 345}, {43, 65535, 344}, },
            {},
            {{43, 43, 346}, {45, 45, 347}, {48, 57, 348}, },
            {},
            {{43, 57, -265}, },
            {},
            {{110, 110, 349}, },
            {{116, 116, 350}, },
            {{103, 103, 351}, },
            {{97, 97, 352}, },
            {{115, 115, 353}, },
            {{48, 57, 354}, {65, 70, 355}, {97, 102, 356}, },
            {{48, 102, -274}, },
            {{48, 102, -274}, },
            {{36, 100, -193}, {101, 101, 357}, {102, 122, 55}, },
            {{36, 122, -10}, },
            {{48, 57, 358}, {65, 70, 359}, {97, 102, 360}, },
            {{48, 102, -279}, },
            {{48, 102, -279}, },
            {{110, 110, 361}, },
            {},
            {},
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{48, 57, 362}, {65, 70, 363}, {97, 102, 364}, },
            {{48, 57, 365}, {65, 70, 366}, {97, 102, 367}, },
            {{48, 102, -297}, },
            {{48, 102, -297}, },
            {{48, 57, 368}, {65, 70, 369}, {97, 102, 370}, },
            {{48, 102, -300}, },
            {{48, 102, -300}, },
            {{114, 114, 371}, },
            {{101, 101, 372}, },
            {{107, 107, 373}, },
            {},
            {},
            {{104, 104, 374}, },
            {},
            {{115, 115, 375}, },
            {},
            {},
            {{117, 117, 376}, },
            {{108, 108, 377}, },
            {{114, 114, 378}, },
            {{109, 109, 379}, },
            {{110, 110, 380}, },
            {{108, 108, 381}, },
            {{116, 116, 382}, },
            {},
            {{101, 101, 383}, },
            {{97, 97, 384}, },
            {{114, 114, 385}, },
            {{116, 116, 386}, },
            {},
            {{117, 117, 387}, },
            {{118, 118, 388}, },
            {{114, 114, 389}, },
            {{117, 117, 390}, },
            {{95, 95, 391}, },
            {{97, 97, 392}, },
            {{101, 101, 393}, },
            {{105, 105, 394}, },
            {{114, 114, 395}, },
            {{116, 116, 396}, },
            {{105, 105, 397}, },
            {{105, 105, 398}, },
            {{104, 104, 399}, },
            {{101, 101, 400}, },
            {{119, 119, 401}, },
            {{115, 115, 402}, },
            {{111, 111, 403}, },
            {{117, 117, 404}, },
            {},
            {{116, 116, 405}, },
            {{0, 65535, -263}, },
            {{0, 41, 261}, {42, 42, 345}, {43, 65535, -177}, },
            {{48, 57, 348}, },
            {{48, 57, 348}, },
            {{48, 57, 348}, {70, 70, 264}, {102, 102, 266}, },
            {{105, 105, 406}, },
            {{62, 62, 407}, },
            {{104, 104, 408}, },
            {{109, 109, 409}, },
            {{58, 58, 410}, },
            {{48, 57, 411}, {65, 70, 412}, {97, 102, 413}, },
            {{48, 102, -356}, },
            {{48, 102, -356}, },
            {{36, 122, -10}, },
            {{48, 57, 414}, {65, 70, 415}, {97, 102, 416}, },
            {{48, 102, -360}, },
            {{48, 102, -360}, },
            {{105, 105, 417}, },
            {{48, 57, 418}, {65, 70, 419}, {97, 102, 420}, },
            {{48, 102, -364}, },
            {{48, 102, -364}, },
            {{48, 57, 421}, {65, 70, 422}, {97, 102, 423}, },
            {{48, 102, -367}, },
            {{48, 102, -367}, },
            {{48, 57, 424}, {65, 70, 425}, {97, 102, 426}, },
            {{48, 102, -370}, },
            {{48, 102, -370}, },
            {{97, 97, 427}, },
            {{97, 97, 428}, },
            {{112, 112, 429}, },
            {},
            {},
            {{108, 108, 430}, },
            {{101, 101, 431}, },
            {{109, 109, 432}, },
            {{111, 111, 433}, },
            {{100, 100, 434}, },
            {},
            {},
            {{109, 109, 435}, },
            {{110, 110, 436}, },
            {{102, 102, 437}, },
            {{104, 104, 438}, },
            {{112, 112, 439}, },
            {{101, 101, 440}, },
            {{114, 114, 441}, },
            {{108, 108, 442}, },
            {{116, 116, 443}, },
            {{116, 116, 444}, },
            {{99, 99, 445}, },
            {{99, 99, 446}, },
            {{110, 110, 447}, },
            {},
            {{97, 97, 448}, },
            {{99, 99, 449}, },
            {{114, 114, 450}, },
            {{115, 115, 451}, },
            {{115, 115, 452}, },
            {{105, 105, 453}, },
            {{119, 119, 454}, },
            {{97, 97, 455}, },
            {{105, 105, 456}, },
            {{116, 116, 457}, },
            {},
            {{116, 116, 458}, },
            {{101, 101, 459}, },
            {},
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{116, 116, 460}, },
            {{48, 57, 461}, {65, 70, 462}, {97, 102, 463}, },
            {{48, 102, -420}, },
            {{48, 102, -420}, },
            {{48, 57, 464}, {65, 70, 465}, {97, 102, 466}, },
            {{48, 102, -423}, },
            {{48, 102, -423}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{99, 99, 467}, },
            {{110, 110, 468}, },
            {{111, 111, 469}, },
            {{116, 116, 470}, },
            {},
            {{111, 111, 471}, },
            {{110, 110, 472}, },
            {{115, 115, 473}, },
            {{101, 101, 474}, },
            {{99, 99, 475}, },
            {{97, 97, 476}, },
            {{111, 111, 477}, },
            {{115, 115, 478}, },
            {},
            {{97, 97, 479}, },
            {{116, 116, 480}, },
            {{121, 121, 481}, },
            {{101, 101, 482}, },
            {{116, 116, 483}, },
            {},
            {},
            {{108, 108, 484}, },
            {{105, 105, 485}, },
            {{111, 111, 486}, },
            {{119, 119, 487}, },
            {},
            {{101, 101, 488}, },
            {{110, 110, 489}, },
            {{108, 108, 490}, },
            {{108, 108, 491}, },
            {{62, 62, 492}, },
            {{101, 101, 493}, },
            {{116, 116, 494}, },
            {{121, 121, 495}, },
            {{48, 57, 496}, {65, 70, 497}, {97, 102, 498}, },
            {{48, 102, -463}, },
            {{48, 102, -463}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{116, 116, 499}, },
            {},
            {{105, 105, 500}, },
            {},
            {{110, 110, 501}, },
            {{105, 105, 502}, },
            {},
            {{110, 110, 503}, },
            {{101, 101, 504}, },
            {{99, 99, 505}, },
            {{102, 102, 506}, },
            {{119, 119, 507}, },
            {{121, 121, 508}, },
            {{105, 105, 509}, },
            {{112, 112, 510}, },
            {},
            {{101, 101, 511}, },
            {{105, 105, 512}, },
            {{110, 110, 513}, },
            {{110, 110, 514}, },
            {{105, 105, 515}, },
            {{110, 110, 516}, },
            {},
            {{105, 105, 517}, },
            {{101, 101, 518}, },
            {},
            {{120, 120, 519}, },
            {{101, 101, 520}, },
            {{70, 102, -198}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {{36, 122, -121}, },
            {},
            {{110, 110, 521}, },
            {{105, 105, 522}, },
            {{116, 116, 523}, },
            {{116, 116, 524}, },
            {{111, 111, 525}, },
            {{101, 101, 526}, },
            {},
            {{105, 105, 527}, },
            {},
            {{97, 97, 528}, },
            {{101, 101, 529}, },
            {{100, 100, 530}, },
            {{110, 110, 531}, },
            {{118, 118, 532}, },
            {{105, 105, 533}, },
            {{116, 116, 534}, },
            {{116, 116, 535}, },
            {{110, 110, 536}, },
            {},
            {{99, 99, 537}, },
            {{114, 114, 538}, },
            {{116, 116, 539}, },
            {{116, 116, 540}, },
            {{111, 111, 541}, },
            {{115, 115, 542}, },
            {{102, 102, 543}, },
            {{105, 105, 544}, },
            {{116, 116, 545}, },
            {{114, 114, 546}, },
            {},
            {},
            {{118, 118, 547}, },
            {{111, 111, 548}, },
            {{122, 122, 549}, },
            {{99, 99, 550}, },
            {},
            {{118, 118, 551}, },
            {{101, 101, 552}, },
            {{48, 57, 553}, },
            {},
            {{111, 111, 554}, },
            {{114, 114, 555}, },
            {},
            {},
            {{110, 110, 556}, },
            {{99, 99, 557}, },
            {{114, 114, 558}, },
            {{111, 111, 559}, },
            {{107, 107, 560}, },
            {{101, 101, 561}, },
            {{104, 104, 562}, },
            {{111, 111, 563}, },
            {{112, 112, 564}, },
            {{48, 57, 553}, {58, 58, 565}, },
            {{114, 114, 566}, },
            {},
            {{118, 118, 567}, },
            {{104, 104, 568}, },
            {{97, 97, 569}, },
            {{107, 107, 570}, },
            {{101, 101, 571}, },
            {{100, 100, 572}, },
            {},
            {{107, 107, 573}, },
            {{116, 116, 574}, },
            {},
            {},
            {{111, 111, 575}, },
            {},
            {{121, 121, 576}, },
            {{101, 101, 577}, },
            {},
            {},
            {{101, 101, 578}, },
            {{105, 105, 579}, },
            {{107, 107, 580}, },
            {},
            {},
            {},
            {{111, 111, 581}, },
            {{101, 101, 582}, },
            {{110, 110, 583}, },
            {},
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 92, 92, 92, 92, -1, -1, -1, 86, 70, 67, 64, 60, 61, 82, 80, 54, 81, 63, 83, 89, 89, 62, 57, 75, 66, 73, -1, 86, 58, -1, 59, 69, 86, 86, 86, 86, 55, 68, 56, 72, -1, 91, -1, -1, -1, -1, -1, -1, 86, -1, 86, 86, -1, 86, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, 89, 89, -1, -1, 65, 77, 76, -1, -1, 71, 74, 78, -1, -1, -1, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, -1, 86, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 84, -1, 84, 84, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, -1, 85, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, 90, 89, 89, 89, -1, -1, 79, -1, -1, -1, -1, -1, -1, 86, 86, -1, -1, -1, -1, 90, 84, 84, 84, -1, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, -1, 40, 41, 44, -1, -1, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 93, -1, 90, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, 86, 86, -1, -1, -1, -1, 90, 90, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, 84, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, 26, -1, 16, -1, 29, 30, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, 18, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 27, 10, -1, -1, -1, -1, -1, 1, 19, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 86, -1, -1, 87, 86, 86, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 86, 86, 86, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, 3, 46, -1, 6, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 84, 84, 84, -1, 13, -1, 31, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, 22, -1, -1, 86, -1, -1, 90, 84, 84, 84, 0, -1, -1, -1, -1, -1, -1, 38, -1, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, 21, 4, -1, -1, -1, -1, 8, -1, -1, -1, 25, -1, -1, 24, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 33, -1, -1, -1, -1, -1, -1, 49, -1, -1, 87, 32, -1, 39, -1, -1, 48, 7, -1, -1, -1, 43, 47, 52, -1, -1, -1, 37, 87, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
