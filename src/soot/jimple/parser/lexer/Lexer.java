/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package soot.jimple.parser.lexer;

import java.io.*;
import java.util.*;
import soot.jimple.parser.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("Unable to read lexer.dat.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

        int[][][] gotoTable = this.gotoTable[state.id()];
        int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 85:
                        {
                            Token token = new85(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 86:
                        {
                            Token token = new86(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 87:
                        {
                            Token token = new87(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 88:
                        {
                            Token token = new88(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 89:
                        {
                            Token token = new89(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 90:
                        {
                            Token token = new90(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 91:
                        {
                            Token token = new91(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 92:
                        {
                            Token token = new92(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 93:
                        {
                            Token token = new93(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 94:
                        {
                            Token token = new94(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 95:
                        {
                            Token token = new95(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TIgnored(text, line, pos); }
    Token new1(int line, int pos) { return new TAbstract(line, pos); }
    Token new2(int line, int pos) { return new TFinal(line, pos); }
    Token new3(int line, int pos) { return new TNative(line, pos); }
    Token new4(int line, int pos) { return new TPublic(line, pos); }
    Token new5(int line, int pos) { return new TProtected(line, pos); }
    Token new6(int line, int pos) { return new TPrivate(line, pos); }
    Token new7(int line, int pos) { return new TStatic(line, pos); }
    Token new8(int line, int pos) { return new TSynchronized(line, pos); }
    Token new9(int line, int pos) { return new TTransient(line, pos); }
    Token new10(int line, int pos) { return new TVolatile(line, pos); }
    Token new11(int line, int pos) { return new TClass(line, pos); }
    Token new12(int line, int pos) { return new TInterface(line, pos); }
    Token new13(int line, int pos) { return new TVoid(line, pos); }
    Token new14(int line, int pos) { return new TBoolean(line, pos); }
    Token new15(int line, int pos) { return new TByte(line, pos); }
    Token new16(int line, int pos) { return new TShort(line, pos); }
    Token new17(int line, int pos) { return new TChar(line, pos); }
    Token new18(int line, int pos) { return new TInt(line, pos); }
    Token new19(int line, int pos) { return new TLong(line, pos); }
    Token new20(int line, int pos) { return new TFloat(line, pos); }
    Token new21(int line, int pos) { return new TDouble(line, pos); }
    Token new22(int line, int pos) { return new TNullType(line, pos); }
    Token new23(int line, int pos) { return new TUnknown(line, pos); }
    Token new24(int line, int pos) { return new TExtends(line, pos); }
    Token new25(int line, int pos) { return new TImplements(line, pos); }
    Token new26(int line, int pos) { return new TBreakpoint(line, pos); }
    Token new27(int line, int pos) { return new TCase(line, pos); }
    Token new28(int line, int pos) { return new TCatch(line, pos); }
    Token new29(int line, int pos) { return new TCmp(line, pos); }
    Token new30(int line, int pos) { return new TCmpg(line, pos); }
    Token new31(int line, int pos) { return new TCmpl(line, pos); }
    Token new32(int line, int pos) { return new TDefault(line, pos); }
    Token new33(int line, int pos) { return new TEntermonitor(line, pos); }
    Token new34(int line, int pos) { return new TExitmonitor(line, pos); }
    Token new35(int line, int pos) { return new TGoto(line, pos); }
    Token new36(int line, int pos) { return new TIf(line, pos); }
    Token new37(int line, int pos) { return new TInstanceof(line, pos); }
    Token new38(int line, int pos) { return new TInterfaceinvoke(line, pos); }
    Token new39(int line, int pos) { return new TLengthof(line, pos); }
    Token new40(int line, int pos) { return new TLookupswitch(line, pos); }
    Token new41(int line, int pos) { return new TNeg(line, pos); }
    Token new42(int line, int pos) { return new TNew(line, pos); }
    Token new43(int line, int pos) { return new TNewarray(line, pos); }
    Token new44(int line, int pos) { return new TNewmultiarray(line, pos); }
    Token new45(int line, int pos) { return new TNop(line, pos); }
    Token new46(int line, int pos) { return new TRet(line, pos); }
    Token new47(int line, int pos) { return new TReturn(line, pos); }
    Token new48(int line, int pos) { return new TSpecialinvoke(line, pos); }
    Token new49(int line, int pos) { return new TStaticinvoke(line, pos); }
    Token new50(int line, int pos) { return new TTableswitch(line, pos); }
    Token new51(int line, int pos) { return new TThrow(line, pos); }
    Token new52(int line, int pos) { return new TThrows(line, pos); }
    Token new53(int line, int pos) { return new TVirtualinvoke(line, pos); }
    Token new54(int line, int pos) { return new TNull(line, pos); }
    Token new55(int line, int pos) { return new TFrom(line, pos); }
    Token new56(int line, int pos) { return new TTo(line, pos); }
    Token new57(int line, int pos) { return new TWith(line, pos); }
    Token new58(int line, int pos) { return new TComma(line, pos); }
    Token new59(int line, int pos) { return new TLBrace(line, pos); }
    Token new60(int line, int pos) { return new TRBrace(line, pos); }
    Token new61(int line, int pos) { return new TSemicolon(line, pos); }
    Token new62(int line, int pos) { return new TLBracket(line, pos); }
    Token new63(int line, int pos) { return new TRBracket(line, pos); }
    Token new64(int line, int pos) { return new TLParen(line, pos); }
    Token new65(int line, int pos) { return new TRParen(line, pos); }
    Token new66(int line, int pos) { return new TColon(line, pos); }
    Token new67(int line, int pos) { return new TDot(line, pos); }
    Token new68(int line, int pos) { return new TQuote(line, pos); }
    Token new69(int line, int pos) { return new TColonEquals(line, pos); }
    Token new70(int line, int pos) { return new TEquals(line, pos); }
    Token new71(int line, int pos) { return new TAnd(line, pos); }
    Token new72(int line, int pos) { return new TOr(line, pos); }
    Token new73(int line, int pos) { return new TXor(line, pos); }
    Token new74(int line, int pos) { return new TMod(line, pos); }
    Token new75(int line, int pos) { return new TCmpeq(line, pos); }
    Token new76(int line, int pos) { return new TCmpne(line, pos); }
    Token new77(int line, int pos) { return new TCmpgt(line, pos); }
    Token new78(int line, int pos) { return new TCmpge(line, pos); }
    Token new79(int line, int pos) { return new TCmplt(line, pos); }
    Token new80(int line, int pos) { return new TCmple(line, pos); }
    Token new81(int line, int pos) { return new TShl(line, pos); }
    Token new82(int line, int pos) { return new TShr(line, pos); }
    Token new83(int line, int pos) { return new TUshr(line, pos); }
    Token new84(int line, int pos) { return new TPlus(line, pos); }
    Token new85(int line, int pos) { return new TMinus(line, pos); }
    Token new86(int line, int pos) { return new TMult(line, pos); }
    Token new87(int line, int pos) { return new TDiv(line, pos); }
    Token new88(String text, int line, int pos) { return new TFullIdentifier(text, line, pos); }
    Token new89(String text, int line, int pos) { return new TQuotedName(text, line, pos); }
    Token new90(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new91(String text, int line, int pos) { return new TAtIdentifier(text, line, pos); }
    Token new92(String text, int line, int pos) { return new TBoolConstant(text, line, pos); }
    Token new93(String text, int line, int pos) { return new TIntegerConstant(text, line, pos); }
    Token new94(String text, int line, int pos) { return new TFloatConstant(text, line, pos); }
    Token new95(String text, int line, int pos) { return new TStringConstant(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 35, 7}, {36, 36, 8}, {37, 37, 9}, {38, 38, 10}, {39, 39, 11}, {40, 40, 12}, {41, 41, 13}, {42, 42, 14}, {43, 43, 15}, {44, 44, 16}, {45, 45, 17}, {46, 46, 18}, {47, 47, 19}, {48, 48, 20}, {49, 57, 21}, {58, 58, 22}, {59, 59, 23}, {60, 60, 24}, {61, 61, 25}, {62, 62, 26}, {64, 64, 27}, {65, 90, 28}, {91, 91, 29}, {92, 92, 30}, {93, 93, 31}, {94, 94, 32}, {95, 95, 33}, {97, 101, 34}, {102, 102, 35}, {103, 115, 34}, {116, 116, 36}, {117, 122, 34}, {123, 123, 37}, {124, 124, 38}, {125, 125, 39}, },
            {{9, 32, -2}, {47, 47, 40}, },
            {{9, 47, -3}, },
            {{9, 47, -3}, },
            {{9, 47, -3}, },
            {{61, 61, 41}, },
            {{0, 33, 42}, {34, 34, 43}, {35, 91, 44}, {92, 92, 45}, {93, 127, 46}, },
            {{45, 45, 47}, {73, 73, 48}, {78, 78, 49}, },
            {{36, 36, 50}, {46, 46, 51}, {48, 57, 52}, {65, 90, 53}, {92, 92, 54}, {95, 95, 55}, {97, 122, 56}, },
            {},
            {},
            {{0, 9, 57}, {11, 12, 57}, {14, 38, 57}, {40, 65535, 57}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {{97, 97, 58}, {98, 98, 59}, {99, 99, 60}, {100, 100, 61}, {101, 101, 62}, {102, 102, 63}, {103, 103, 64}, {105, 105, 65}, {108, 108, 66}, {110, 110, 67}, {112, 112, 68}, {114, 114, 69}, {115, 115, 70}, {116, 116, 71}, {117, 117, 72}, {118, 118, 73}, {119, 119, 74}, },
            {{42, 42, 75}, {47, 47, 76}, },
            {{46, 46, 77}, {48, 55, 78}, {56, 57, 21}, {76, 76, 79}, {88, 88, 80}, {120, 120, 81}, },
            {{46, 46, 77}, {48, 57, 21}, {76, 76, 79}, },
            {{61, 61, 82}, },
            {},
            {{60, 60, 83}, {61, 61, 84}, {99, 99, 85}, {105, 105, 86}, },
            {{61, 61, 87}, },
            {{61, 61, 88}, {62, 62, 89}, },
            {{99, 99, 90}, {112, 112, 91}, {116, 116, 92}, },
            {{36, 122, -10}, },
            {},
            {{32, 32, 93}, {34, 34, 94}, {35, 35, 95}, {39, 39, 96}, {46, 46, 97}, {92, 92, 98}, {98, 98, 99}, {102, 102, 100}, {110, 110, 101}, {114, 114, 102}, {116, 116, 103}, {117, 117, 104}, },
            {},
            {},
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 105}, {98, 122, 56}, },
            {{36, 95, -10}, {97, 113, 56}, {114, 114, 106}, {115, 122, 56}, },
            {},
            {},
            {},
            {{42, 47, -21}, },
            {},
            {{0, 127, -8}, },
            {},
            {{0, 127, -8}, },
            {{32, 32, 107}, {34, 34, 108}, {35, 35, 109}, {39, 39, 110}, {46, 46, 111}, {92, 92, 112}, {98, 98, 113}, {102, 102, 114}, {110, 110, 115}, {114, 114, 116}, {116, 116, 117}, {117, 117, 118}, },
            {{0, 127, -8}, },
            {{73, 73, 48}, },
            {{110, 110, 119}, },
            {{97, 97, 120}, },
            {{36, 122, -10}, },
            {{36, 36, 121}, {65, 90, 122}, {92, 92, 123}, {95, 95, 124}, {97, 122, 125}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{32, 32, 126}, {34, 34, 127}, {35, 35, 128}, {39, 39, 129}, {46, 46, 130}, {92, 92, 131}, {98, 98, 132}, {102, 102, 133}, {110, 110, 134}, {114, 114, 135}, {116, 116, 136}, {117, 117, 137}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{0, 38, -13}, {39, 39, 138}, {40, 65535, 57}, },
            {{98, 98, 139}, },
            {{111, 111, 140}, {114, 114, 141}, {121, 121, 142}, },
            {{97, 97, 143}, {104, 104, 144}, {108, 108, 145}, {109, 109, 146}, },
            {{101, 101, 147}, {111, 111, 148}, },
            {{110, 110, 149}, {120, 120, 150}, },
            {{105, 105, 151}, {108, 108, 152}, {114, 114, 153}, },
            {{111, 111, 154}, },
            {{102, 102, 155}, {109, 109, 156}, {110, 110, 157}, },
            {{101, 101, 158}, {111, 111, 159}, },
            {{97, 97, 160}, {101, 101, 161}, {111, 111, 162}, {117, 117, 163}, },
            {{114, 114, 164}, {117, 117, 165}, },
            {{101, 101, 166}, },
            {{104, 104, 167}, {112, 112, 168}, {116, 116, 169}, {121, 121, 170}, },
            {{97, 97, 171}, {104, 104, 172}, {111, 111, 173}, {114, 114, 174}, },
            {{110, 110, 175}, },
            {{105, 105, 176}, {111, 111, 177}, },
            {{105, 105, 178}, },
            {{0, 41, 179}, {42, 42, 180}, {43, 65535, 179}, },
            {{0, 8, 181}, {9, 9, 182}, {10, 10, 2}, {11, 12, 181}, {13, 13, 3}, {14, 31, 181}, {32, 32, 183}, {33, 46, 181}, {47, 47, 184}, {48, 65535, 181}, },
            {{48, 57, 185}, },
            {{46, 76, -22}, },
            {},
            {{48, 57, 186}, {65, 70, 187}, {97, 102, 188}, },
            {{48, 102, -82}, },
            {},
            {},
            {},
            {{108, 108, 189}, },
            {{110, 110, 190}, },
            {},
            {},
            {{62, 62, 191}, },
            {{97, 97, 192}, },
            {{97, 97, 193}, },
            {{104, 104, 194}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{48, 57, 195}, {65, 70, 196}, {97, 102, 197}, },
            {{36, 95, -10}, {97, 107, 56}, {108, 108, 198}, {109, 122, 56}, },
            {{36, 95, -10}, {97, 116, 56}, {117, 117, 199}, {118, 122, 56}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{48, 57, 200}, {65, 70, 201}, {97, 102, 202}, },
            {{102, 102, 203}, },
            {{78, 78, 204}, },
            {{36, 36, 205}, {46, 46, 51}, {48, 57, 206}, {65, 90, 207}, {92, 92, 208}, {95, 95, 209}, {97, 122, 210}, },
            {{36, 122, -123}, },
            {{32, 32, 211}, {34, 34, 212}, {35, 35, 213}, {39, 39, 214}, {46, 46, 215}, {92, 92, 216}, {98, 98, 217}, {102, 102, 218}, {110, 110, 219}, {114, 114, 220}, {116, 116, 221}, {117, 117, 222}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{48, 57, 223}, {65, 70, 224}, {97, 102, 225}, },
            {},
            {{115, 115, 226}, },
            {{111, 111, 227}, },
            {{101, 101, 228}, },
            {{116, 116, 229}, },
            {{115, 115, 230}, {116, 116, 231}, },
            {{97, 97, 232}, },
            {{97, 97, 233}, },
            {{112, 112, 234}, },
            {{102, 102, 235}, },
            {{117, 117, 236}, },
            {{116, 116, 237}, },
            {{105, 105, 238}, {116, 116, 239}, },
            {{110, 110, 240}, },
            {{111, 111, 241}, },
            {{111, 111, 242}, },
            {{116, 116, 243}, },
            {},
            {{112, 112, 244}, },
            {{115, 115, 245}, {116, 116, 246}, },
            {{110, 110, 247}, },
            {{110, 110, 248}, {111, 111, 249}, },
            {{116, 116, 250}, },
            {{103, 103, 251}, {119, 119, 252}, },
            {{112, 112, 253}, },
            {{108, 108, 254}, },
            {{105, 105, 255}, {111, 111, 256}, },
            {{98, 98, 257}, },
            {{116, 116, 258}, },
            {{111, 111, 259}, },
            {{101, 101, 260}, },
            {{97, 97, 261}, },
            {{110, 110, 262}, },
            {{98, 98, 263}, },
            {{114, 114, 264}, },
            {},
            {{97, 97, 265}, },
            {{107, 107, 266}, },
            {{114, 114, 267}, },
            {{105, 105, 268}, {108, 108, 269}, },
            {{116, 116, 270}, },
            {{0, 65535, -77}, },
            {{0, 41, 271}, {42, 42, 180}, {43, 46, 271}, {47, 47, 272}, {48, 65535, 271}, },
            {{0, 65535, -78}, },
            {{0, 65535, -78}, },
            {{0, 65535, -78}, },
            {{0, 32, -78}, {33, 41, 181}, {42, 42, 273}, {43, 46, 181}, {47, 47, 274}, {48, 65535, 181}, },
            {{48, 57, 185}, {69, 69, 275}, {70, 70, 276}, {101, 101, 277}, {102, 102, 278}, },
            {{48, 70, -82}, {76, 76, 79}, {97, 102, 188}, },
            {{48, 102, -188}, },
            {{48, 102, -188}, },
            {{105, 105, 279}, },
            {{105, 105, 280}, },
            {},
            {{117, 117, 281}, },
            {{114, 114, 282}, },
            {{105, 105, 283}, },
            {{48, 57, 284}, {65, 70, 285}, {97, 102, 286}, },
            {{48, 102, -197}, },
            {{48, 102, -197}, },
            {{36, 95, -10}, {97, 114, 56}, {115, 115, 287}, {116, 122, 56}, },
            {{36, 95, -10}, {97, 100, 56}, {101, 101, 288}, {102, 122, 56}, },
            {{48, 57, 289}, {65, 70, 290}, {97, 102, 291}, },
            {{48, 102, -202}, },
            {{48, 102, -202}, },
            {{105, 105, 292}, },
            {{70, 70, 293}, {102, 102, 294}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{32, 32, 295}, {34, 34, 296}, {35, 35, 297}, {39, 39, 298}, {46, 46, 299}, {92, 92, 300}, {98, 98, 301}, {102, 102, 302}, {110, 110, 303}, {114, 114, 304}, {116, 116, 305}, {117, 117, 306}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{48, 57, 307}, {65, 70, 308}, {97, 102, 309}, },
            {{48, 57, 310}, {65, 70, 311}, {97, 102, 312}, },
            {{48, 102, -225}, },
            {{48, 102, -225}, },
            {{116, 116, 313}, },
            {{108, 108, 314}, },
            {{97, 97, 315}, },
            {{101, 101, 316}, },
            {{101, 101, 317}, },
            {{99, 99, 318}, },
            {{114, 114, 319}, },
            {{115, 115, 320}, },
            {{103, 103, 321}, {108, 108, 322}, },
            {{97, 97, 323}, },
            {{98, 98, 324}, },
            {{101, 101, 325}, },
            {{116, 116, 326}, },
            {{101, 101, 327}, },
            {{97, 97, 328}, },
            {{97, 97, 329}, },
            {{109, 109, 330}, },
            {{111, 111, 331}, },
            {{108, 108, 332}, },
            {{116, 116, 333}, },
            {{101, 101, 334}, },
            {{103, 103, 335}, },
            {{103, 103, 336}, },
            {{107, 107, 337}, },
            {{105, 105, 338}, },
            {},
            {{97, 97, 339}, {109, 109, 340}, },
            {},
            {{108, 108, 341}, },
            {{118, 118, 342}, },
            {{116, 116, 343}, },
            {{108, 108, 344}, },
            {{117, 117, 345}, },
            {{114, 114, 346}, },
            {{99, 99, 347}, },
            {{116, 116, 348}, },
            {{99, 99, 349}, },
            {{108, 108, 350}, },
            {{111, 111, 351}, },
            {{110, 110, 352}, },
            {{110, 110, 353}, },
            {{116, 116, 354}, },
            {{100, 100, 355}, },
            {{97, 97, 356}, },
            {{104, 104, 357}, },
            {{0, 41, 358}, {42, 42, 359}, {43, 65535, 358}, },
            {{9, 47, -3}, },
            {{0, 8, 360}, {9, 9, 361}, {10, 10, 362}, {11, 12, 360}, {13, 13, 363}, {14, 31, 360}, {32, 32, 364}, {33, 41, 360}, {42, 42, 365}, {43, 46, 360}, {47, 47, 366}, {48, 65535, 360}, },
            {{0, 65535, -186}, },
            {{43, 43, 367}, {45, 45, 368}, {48, 57, 369}, },
            {},
            {{43, 57, -277}, },
            {},
            {{110, 110, 370}, },
            {{116, 116, 371}, },
            {{103, 103, 372}, },
            {{97, 97, 373}, },
            {{115, 115, 374}, },
            {{48, 57, 375}, {65, 70, 376}, {97, 102, 377}, },
            {{48, 102, -286}, },
            {{48, 102, -286}, },
            {{36, 100, -201}, {101, 101, 378}, {102, 122, 56}, },
            {{36, 122, -10}, },
            {{48, 57, 379}, {65, 70, 380}, {97, 102, 381}, },
            {{48, 102, -291}, },
            {{48, 102, -291}, },
            {{110, 110, 382}, },
            {},
            {},
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{48, 57, 383}, {65, 70, 384}, {97, 102, 385}, },
            {{48, 57, 386}, {65, 70, 387}, {97, 102, 388}, },
            {{48, 102, -309}, },
            {{48, 102, -309}, },
            {{48, 57, 389}, {65, 70, 390}, {97, 102, 391}, },
            {{48, 102, -312}, },
            {{48, 102, -312}, },
            {{114, 114, 392}, },
            {{101, 101, 393}, },
            {{107, 107, 394}, },
            {},
            {},
            {{104, 104, 395}, },
            {},
            {{115, 115, 396}, },
            {},
            {},
            {{117, 117, 397}, },
            {{108, 108, 398}, },
            {{114, 114, 399}, },
            {{109, 109, 400}, },
            {{110, 110, 401}, },
            {{108, 108, 402}, },
            {{116, 116, 403}, },
            {},
            {},
            {{101, 101, 404}, },
            {{97, 97, 405}, },
            {{114, 114, 406}, },
            {{116, 116, 407}, },
            {},
            {{117, 117, 408}, },
            {{118, 118, 409}, },
            {{114, 114, 410}, },
            {{117, 117, 411}, },
            {{95, 95, 412}, },
            {{97, 97, 413}, },
            {{101, 101, 414}, },
            {{105, 105, 415}, },
            {{114, 114, 416}, },
            {{116, 116, 417}, },
            {{105, 105, 418}, },
            {{105, 105, 419}, },
            {{104, 104, 420}, },
            {{101, 101, 421}, },
            {{119, 119, 422}, },
            {{115, 115, 423}, },
            {{111, 111, 424}, },
            {{117, 117, 425}, },
            {},
            {{116, 116, 426}, },
            {},
            {{0, 65535, -273}, },
            {{0, 41, 271}, {42, 42, 359}, {43, 65535, -182}, },
            {{0, 65535, -275}, },
            {{0, 65535, -275}, },
            {{0, 8, 179}, {9, 9, 427}, {10, 10, 362}, {11, 12, 179}, {13, 13, 363}, {14, 31, 179}, {32, 32, 428}, {33, 41, 179}, {42, 42, 180}, {43, 46, 179}, {47, 47, 429}, {48, 65535, 179}, },
            {{0, 65535, -364}, },
            {{0, 65535, -275}, },
            {{0, 8, 430}, {9, 9, 431}, {10, 10, 432}, {11, 12, 430}, {13, 13, 433}, {14, 31, 430}, {32, 32, 434}, {33, 41, 430}, {42, 42, 365}, {43, 46, 430}, {47, 47, 435}, {48, 65535, 430}, },
            {{0, 41, -275}, {42, 42, 436}, {43, 46, 360}, {47, 47, 437}, {48, 65535, 360}, },
            {{48, 57, 369}, },
            {{48, 57, 369}, },
            {{48, 57, 369}, {70, 70, 276}, {102, 102, 278}, },
            {{105, 105, 438}, },
            {{62, 62, 439}, },
            {{104, 104, 440}, },
            {{109, 109, 441}, },
            {{58, 58, 442}, },
            {{48, 57, 443}, {65, 70, 444}, {97, 102, 445}, },
            {{48, 102, -377}, },
            {{48, 102, -377}, },
            {{36, 122, -10}, },
            {{48, 57, 446}, {65, 70, 447}, {97, 102, 448}, },
            {{48, 102, -381}, },
            {{48, 102, -381}, },
            {{105, 105, 449}, },
            {{48, 57, 450}, {65, 70, 451}, {97, 102, 452}, },
            {{48, 102, -385}, },
            {{48, 102, -385}, },
            {{48, 57, 453}, {65, 70, 454}, {97, 102, 455}, },
            {{48, 102, -388}, },
            {{48, 102, -388}, },
            {{48, 57, 456}, {65, 70, 457}, {97, 102, 458}, },
            {{48, 102, -391}, },
            {{48, 102, -391}, },
            {{97, 97, 459}, },
            {{97, 97, 460}, },
            {{112, 112, 461}, },
            {},
            {},
            {{108, 108, 462}, },
            {{101, 101, 463}, },
            {{109, 109, 464}, },
            {{111, 111, 465}, },
            {{100, 100, 466}, },
            {},
            {},
            {{109, 109, 467}, },
            {{110, 110, 468}, },
            {{102, 102, 469}, },
            {{104, 104, 470}, },
            {{112, 112, 471}, },
            {{101, 101, 472}, },
            {{114, 114, 473}, },
            {{108, 108, 474}, },
            {{116, 116, 475}, },
            {{116, 116, 476}, },
            {{99, 99, 477}, },
            {{99, 99, 478}, },
            {{110, 110, 479}, },
            {},
            {{97, 97, 480}, },
            {{99, 99, 481}, },
            {{114, 114, 482}, },
            {{115, 115, 483}, },
            {{115, 115, 484}, },
            {{105, 105, 485}, },
            {{119, 119, 486}, },
            {{97, 97, 487}, },
            {{105, 105, 488}, },
            {{0, 65535, -364}, },
            {{0, 65535, -364}, },
            {{0, 41, 179}, {42, 42, 489}, {43, 46, 179}, {47, 47, 490}, {48, 65535, 179}, },
            {{0, 8, 491}, {9, 9, 492}, {10, 10, 493}, {11, 12, 491}, {13, 13, 494}, {14, 31, 491}, {32, 32, 495}, {33, 41, 491}, {42, 42, 496}, {43, 46, 491}, {47, 47, 497}, {48, 65535, 491}, },
            {{0, 65535, -432}, },
            {{0, 8, 358}, {9, 9, 498}, {10, 10, 493}, {11, 12, 358}, {13, 13, 494}, {14, 31, 358}, {32, 32, 499}, {33, 41, 358}, {42, 42, 359}, {43, 46, 358}, {47, 47, 500}, {48, 65535, 358}, },
            {{0, 65535, -434}, },
            {{0, 65535, -432}, },
            {{0, 65535, -186}, },
            {{0, 8, 501}, {9, 9, 502}, {10, 10, 503}, {11, 12, 501}, {13, 13, 504}, {14, 31, 501}, {32, 32, 505}, {33, 41, 501}, {42, 42, 365}, {43, 46, 501}, {47, 47, 506}, {48, 65535, 501}, },
            {{0, 65535, -368}, },
            {{116, 116, 507}, },
            {},
            {{116, 116, 508}, },
            {{101, 101, 509}, },
            {},
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{116, 116, 510}, },
            {{48, 57, 511}, {65, 70, 512}, {97, 102, 513}, },
            {{48, 102, -452}, },
            {{48, 102, -452}, },
            {{48, 57, 514}, {65, 70, 515}, {97, 102, 516}, },
            {{48, 102, -455}, },
            {{48, 102, -455}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{99, 99, 517}, },
            {{110, 110, 518}, },
            {{111, 111, 519}, },
            {{116, 116, 520}, },
            {},
            {{111, 111, 521}, },
            {{110, 110, 522}, },
            {{115, 115, 523}, },
            {{101, 101, 524}, },
            {{99, 99, 525}, },
            {{97, 97, 526}, },
            {{111, 111, 527}, },
            {{115, 115, 528}, },
            {},
            {{97, 97, 529}, },
            {{116, 116, 530}, },
            {{121, 121, 531}, },
            {{101, 101, 532}, },
            {{116, 116, 533}, },
            {},
            {},
            {{108, 108, 534}, },
            {{105, 105, 535}, },
            {{111, 111, 536}, },
            {{119, 119, 537}, },
            {},
            {{101, 101, 538}, },
            {{110, 110, 539}, },
            {{108, 108, 540}, },
            {{108, 108, 541}, },
            {{0, 41, 542}, {42, 42, 180}, {43, 46, 542}, {47, 47, 543}, {48, 65535, 542}, },
            {{0, 65535, -275}, },
            {{0, 65535, -432}, },
            {{0, 65535, -432}, },
            {{0, 65535, -434}, },
            {{0, 65535, -434}, },
            {{0, 65535, -432}, },
            {{0, 41, -367}, {42, 42, 496}, {43, 65535, -367}, },
            {{0, 41, -432}, {42, 42, 544}, {43, 46, 491}, {47, 47, 545}, {48, 65535, 491}, },
            {{0, 65535, -434}, },
            {{0, 65535, -434}, },
            {{0, 41, 358}, {42, 42, 546}, {43, 46, 358}, {47, 47, 547}, {48, 65535, 358}, },
            {{0, 8, 548}, {9, 9, 549}, {10, 10, 550}, {11, 12, 548}, {13, 13, 551}, {14, 31, 548}, {32, 32, 552}, {33, 41, 548}, {42, 42, 553}, {43, 46, 548}, {47, 47, 554}, {48, 65535, 548}, },
            {{0, 65535, -503}, },
            {{0, 8, 555}, {9, 9, 556}, {10, 10, 550}, {11, 12, 555}, {13, 13, 551}, {14, 31, 555}, {32, 32, 557}, {33, 41, 555}, {42, 42, 558}, {43, 46, 555}, {47, 47, 559}, {48, 65535, 555}, },
            {{0, 65535, -505}, },
            {{0, 65535, -503}, },
            {{0, 65535, -368}, },
            {{62, 62, 560}, },
            {{101, 101, 561}, },
            {{116, 116, 562}, },
            {{121, 121, 563}, },
            {{48, 57, 564}, {65, 70, 565}, {97, 102, 566}, },
            {{48, 102, -513}, },
            {{48, 102, -513}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{116, 116, 567}, },
            {},
            {{105, 105, 568}, },
            {},
            {{110, 110, 569}, },
            {{105, 105, 570}, },
            {},
            {{110, 110, 571}, },
            {{101, 101, 572}, },
            {{99, 99, 573}, },
            {{102, 102, 574}, },
            {{119, 119, 575}, },
            {{121, 121, 576}, },
            {{105, 105, 577}, },
            {{112, 112, 578}, },
            {},
            {{101, 101, 579}, },
            {{105, 105, 580}, },
            {{110, 110, 581}, },
            {{110, 110, 582}, },
            {{105, 105, 583}, },
            {{110, 110, 584}, },
            {},
            {{105, 105, 585}, },
            {{101, 101, 586}, },
            {{0, 41, 555}, {42, 42, 558}, {43, 65535, 555}, },
            {{0, 65535, -364}, },
            {{0, 41, -438}, {42, 42, 553}, {43, 65535, -438}, },
            {{0, 65535, -499}, },
            {{0, 41, 542}, {42, 42, 558}, {43, 65535, -491}, },
            {{0, 65535, -432}, },
            {{0, 65535, -503}, },
            {{0, 65535, -503}, },
            {{0, 65535, -505}, },
            {{0, 65535, -505}, },
            {{0, 65535, -503}, },
            {{0, 41, -367}, {42, 42, 553}, {43, 65535, -367}, },
            {{0, 41, -503}, {42, 42, 587}, {43, 46, 548}, {47, 47, 588}, {48, 65535, 548}, },
            {{0, 65535, -544}, },
            {{0, 65535, -505}, },
            {{0, 65535, -505}, },
            {{0, 41, 271}, {42, 42, 558}, {43, 65535, -182}, },
            {{0, 41, 555}, {42, 42, 589}, {43, 46, 555}, {47, 47, 590}, {48, 65535, 555}, },
            {},
            {{120, 120, 591}, },
            {{101, 101, 592}, },
            {{70, 102, -206}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {{36, 122, -123}, },
            {},
            {{110, 110, 593}, },
            {{105, 105, 594}, },
            {{116, 116, 595}, },
            {{116, 116, 596}, },
            {{111, 111, 597}, },
            {{101, 101, 598}, },
            {},
            {{105, 105, 599}, },
            {},
            {{97, 97, 600}, },
            {{101, 101, 601}, },
            {{100, 100, 602}, },
            {{110, 110, 603}, },
            {{118, 118, 604}, },
            {{105, 105, 605}, },
            {{116, 116, 606}, },
            {{116, 116, 607}, },
            {{110, 110, 608}, },
            {},
            {{0, 65535, -546}, },
            {{0, 65535, -556}, },
            {{0, 65535, -548}, },
            {{0, 65535, -503}, },
            {{99, 99, 609}, },
            {{114, 114, 610}, },
            {{116, 116, 611}, },
            {{116, 116, 612}, },
            {{111, 111, 613}, },
            {{115, 115, 614}, },
            {{102, 102, 615}, },
            {{105, 105, 616}, },
            {{116, 116, 617}, },
            {{114, 114, 618}, },
            {},
            {},
            {{118, 118, 619}, },
            {{111, 111, 620}, },
            {{122, 122, 621}, },
            {{99, 99, 622}, },
            {},
            {{118, 118, 623}, },
            {{101, 101, 624}, },
            {{48, 57, 625}, },
            {},
            {{111, 111, 626}, },
            {{114, 114, 627}, },
            {},
            {},
            {{110, 110, 628}, },
            {{99, 99, 629}, },
            {{114, 114, 630}, },
            {{111, 111, 631}, },
            {{107, 107, 632}, },
            {{101, 101, 633}, },
            {{104, 104, 634}, },
            {{111, 111, 635}, },
            {{112, 112, 636}, },
            {{48, 57, 625}, {58, 58, 637}, },
            {{114, 114, 638}, },
            {},
            {{118, 118, 639}, },
            {{104, 104, 640}, },
            {{97, 97, 641}, },
            {{107, 107, 642}, },
            {{101, 101, 643}, },
            {{100, 100, 644}, },
            {},
            {{107, 107, 645}, },
            {{116, 116, 646}, },
            {},
            {},
            {{111, 111, 647}, },
            {},
            {{121, 121, 648}, },
            {{101, 101, 649}, },
            {},
            {},
            {{101, 101, 650}, },
            {{105, 105, 651}, },
            {{107, 107, 652}, },
            {},
            {},
            {},
            {{111, 111, 653}, },
            {{101, 101, 654}, },
            {{110, 110, 655}, },
            {},
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, 0, 0, 0, -1, -1, -1, 90, 74, 71, 68, 64, 65, 86, 84, 58, 85, 67, 87, 93, 93, 66, 61, 79, 70, 77, -1, 90, 62, -1, 63, 73, 90, 90, 90, 90, 59, 72, 60, -1, 76, -1, 95, -1, -1, -1, -1, -1, -1, 90, -1, 90, 90, -1, 90, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, -1, 93, 93, -1, -1, 69, 81, 80, -1, -1, 75, 78, 82, -1, -1, -1, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, -1, 90, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 88, 88, -1, 88, 88, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, -1, 89, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 36, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 94, 93, 93, 93, -1, -1, 83, -1, -1, -1, -1, -1, -1, 90, 90, -1, -1, -1, -1, 94, 88, 88, 88, -1, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, -1, 41, 42, 45, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, -1, 94, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, 90, 90, -1, -1, -1, -1, 94, 94, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 27, -1, 17, -1, 30, 31, -1, -1, -1, -1, -1, -1, -1, 55, 35, -1, -1, -1, -1, 19, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, 57, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 28, 11, -1, -1, -1, -1, -1, 2, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, 51, -1, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 90, -1, -1, 91, 90, 90, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, 90, 90, -1, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, 4, 47, -1, 7, -1, -1, 52, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, 88, 88, 88, -1, 14, -1, 32, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, 90, -1, -1, 94, 88, 88, 88, 1, -1, -1, -1, -1, -1, -1, 39, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, 0, 0, -1, 0, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, 22, 5, -1, -1, -1, -1, 9, -1, -1, -1, 26, -1, -1, 25, 37, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, 50, -1, -1, 91, 33, -1, 40, -1, -1, 49, 8, -1, -1, -1, 44, 48, 53, -1, -1, -1, 38, 91, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
