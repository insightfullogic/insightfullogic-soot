/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package soot.jimple.parser.lexer;

import java.io.*;
import java.util.*;
import soot.jimple.parser.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("Unable to read lexer.dat.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

	int[][][] gotoTable = this.gotoTable[state.id()];
	int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 85:
                        {
                            Token token = new85(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 86:
                        {
                            Token token = new86(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 87:
                        {
                            Token token = new87(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 88:
                        {
                            Token token = new88(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 89:
                        {
                            Token token = new89(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 90:
                        {
                            Token token = new90(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 91:
                        {
                            Token token = new91(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 92:
                        {
                            Token token = new92(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 93:
                        {
                            Token token = new93(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 94:
                        {
                            Token token = new94(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 95:
                        {
                            Token token = new95(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(String text, int line, int pos) { return new TIgnored(text, line, pos); }
    Token new1(int line, int pos) { return new TAbstract(line, pos); }
    Token new2(int line, int pos) { return new TFinal(line, pos); }
    Token new3(int line, int pos) { return new TNative(line, pos); }
    Token new4(int line, int pos) { return new TPublic(line, pos); }
    Token new5(int line, int pos) { return new TProtected(line, pos); }
    Token new6(int line, int pos) { return new TPrivate(line, pos); }
    Token new7(int line, int pos) { return new TStatic(line, pos); }
    Token new8(int line, int pos) { return new TSynchronized(line, pos); }
    Token new9(int line, int pos) { return new TTransient(line, pos); }
    Token new10(int line, int pos) { return new TVolatile(line, pos); }
    Token new11(int line, int pos) { return new TClass(line, pos); }
    Token new12(int line, int pos) { return new TInterface(line, pos); }
    Token new13(int line, int pos) { return new TVoid(line, pos); }
    Token new14(int line, int pos) { return new TBoolean(line, pos); }
    Token new15(int line, int pos) { return new TByte(line, pos); }
    Token new16(int line, int pos) { return new TShort(line, pos); }
    Token new17(int line, int pos) { return new TChar(line, pos); }
    Token new18(int line, int pos) { return new TInt(line, pos); }
    Token new19(int line, int pos) { return new TLong(line, pos); }
    Token new20(int line, int pos) { return new TFloat(line, pos); }
    Token new21(int line, int pos) { return new TDouble(line, pos); }
    Token new22(int line, int pos) { return new TNullType(line, pos); }
    Token new23(int line, int pos) { return new TUnknown(line, pos); }
    Token new24(int line, int pos) { return new TExtends(line, pos); }
    Token new25(int line, int pos) { return new TImplements(line, pos); }
    Token new26(int line, int pos) { return new TBreakpoint(line, pos); }
    Token new27(int line, int pos) { return new TCase(line, pos); }
    Token new28(int line, int pos) { return new TCatch(line, pos); }
    Token new29(int line, int pos) { return new TCmp(line, pos); }
    Token new30(int line, int pos) { return new TCmpg(line, pos); }
    Token new31(int line, int pos) { return new TCmpl(line, pos); }
    Token new32(int line, int pos) { return new TDefault(line, pos); }
    Token new33(int line, int pos) { return new TEntermonitor(line, pos); }
    Token new34(int line, int pos) { return new TExitmonitor(line, pos); }
    Token new35(int line, int pos) { return new TGoto(line, pos); }
    Token new36(int line, int pos) { return new TIf(line, pos); }
    Token new37(int line, int pos) { return new TInstanceof(line, pos); }
    Token new38(int line, int pos) { return new TInterfaceinvoke(line, pos); }
    Token new39(int line, int pos) { return new TLengthof(line, pos); }
    Token new40(int line, int pos) { return new TLookupswitch(line, pos); }
    Token new41(int line, int pos) { return new TNeg(line, pos); }
    Token new42(int line, int pos) { return new TNew(line, pos); }
    Token new43(int line, int pos) { return new TNewarray(line, pos); }
    Token new44(int line, int pos) { return new TNewmultiarray(line, pos); }
    Token new45(int line, int pos) { return new TNop(line, pos); }
    Token new46(int line, int pos) { return new TRet(line, pos); }
    Token new47(int line, int pos) { return new TReturn(line, pos); }
    Token new48(int line, int pos) { return new TSpecialinvoke(line, pos); }
    Token new49(int line, int pos) { return new TStaticinvoke(line, pos); }
    Token new50(int line, int pos) { return new TTableswitch(line, pos); }
    Token new51(int line, int pos) { return new TThrow(line, pos); }
    Token new52(int line, int pos) { return new TThrows(line, pos); }
    Token new53(int line, int pos) { return new TVirtualinvoke(line, pos); }
    Token new54(int line, int pos) { return new TNull(line, pos); }
    Token new55(int line, int pos) { return new TFrom(line, pos); }
    Token new56(int line, int pos) { return new TTo(line, pos); }
    Token new57(int line, int pos) { return new TWith(line, pos); }
    Token new58(int line, int pos) { return new TComma(line, pos); }
    Token new59(int line, int pos) { return new TLBrace(line, pos); }
    Token new60(int line, int pos) { return new TRBrace(line, pos); }
    Token new61(int line, int pos) { return new TSemicolon(line, pos); }
    Token new62(int line, int pos) { return new TLBracket(line, pos); }
    Token new63(int line, int pos) { return new TRBracket(line, pos); }
    Token new64(int line, int pos) { return new TLParen(line, pos); }
    Token new65(int line, int pos) { return new TRParen(line, pos); }
    Token new66(int line, int pos) { return new TColon(line, pos); }
    Token new67(int line, int pos) { return new TDot(line, pos); }
    Token new68(int line, int pos) { return new TQuote(line, pos); }
    Token new69(int line, int pos) { return new TColonEquals(line, pos); }
    Token new70(int line, int pos) { return new TEquals(line, pos); }
    Token new71(int line, int pos) { return new TAnd(line, pos); }
    Token new72(int line, int pos) { return new TOr(line, pos); }
    Token new73(int line, int pos) { return new TXor(line, pos); }
    Token new74(int line, int pos) { return new TMod(line, pos); }
    Token new75(int line, int pos) { return new TCmpeq(line, pos); }
    Token new76(int line, int pos) { return new TCmpne(line, pos); }
    Token new77(int line, int pos) { return new TCmpgt(line, pos); }
    Token new78(int line, int pos) { return new TCmpge(line, pos); }
    Token new79(int line, int pos) { return new TCmplt(line, pos); }
    Token new80(int line, int pos) { return new TCmple(line, pos); }
    Token new81(int line, int pos) { return new TShl(line, pos); }
    Token new82(int line, int pos) { return new TShr(line, pos); }
    Token new83(int line, int pos) { return new TUshr(line, pos); }
    Token new84(int line, int pos) { return new TPlus(line, pos); }
    Token new85(int line, int pos) { return new TMinus(line, pos); }
    Token new86(int line, int pos) { return new TMult(line, pos); }
    Token new87(int line, int pos) { return new TDiv(line, pos); }
    Token new88(String text, int line, int pos) { return new TFullIdentifier(text, line, pos); }
    Token new89(String text, int line, int pos) { return new TQuotedName(text, line, pos); }
    Token new90(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new91(String text, int line, int pos) { return new TAtIdentifier(text, line, pos); }
    Token new92(String text, int line, int pos) { return new TBoolConstant(text, line, pos); }
    Token new93(String text, int line, int pos) { return new TIntegerConstant(text, line, pos); }
    Token new94(String text, int line, int pos) { return new TFloatConstant(text, line, pos); }
    Token new95(String text, int line, int pos) { return new TStringConstant(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 35, 7}, {36, 36, 8}, {37, 37, 9}, {38, 38, 10}, {39, 39, 11}, {40, 40, 12}, {41, 41, 13}, {42, 42, 14}, {43, 43, 15}, {44, 44, 16}, {45, 45, 17}, {46, 46, 18}, {47, 47, 19}, {48, 48, 20}, {49, 57, 21}, {58, 58, 22}, {59, 59, 23}, {60, 60, 24}, {61, 61, 25}, {62, 62, 26}, {64, 64, 27}, {65, 90, 28}, {91, 91, 29}, {92, 92, 30}, {93, 93, 31}, {94, 94, 32}, {95, 95, 33}, {97, 97, 34}, {98, 98, 35}, {99, 99, 36}, {100, 100, 37}, {101, 101, 38}, {102, 102, 39}, {103, 103, 40}, {104, 104, 41}, {105, 105, 42}, {106, 107, 41}, {108, 108, 43}, {109, 109, 41}, {110, 110, 44}, {111, 111, 41}, {112, 112, 45}, {113, 113, 41}, {114, 114, 46}, {115, 115, 47}, {116, 116, 48}, {117, 117, 49}, {118, 118, 50}, {119, 119, 51}, {120, 122, 41}, {123, 123, 52}, {124, 124, 53}, {125, 125, 54}, },
            {{9, 32, -2}, {47, 47, 55}, },
            {{9, 47, -3}, },
            {{9, 47, -3}, },
            {{9, 47, -3}, },
            {{61, 61, 56}, },
            {{0, 33, 57}, {34, 34, 58}, {35, 91, 59}, {92, 92, 60}, {93, 127, 61}, },
            {{45, 45, 62}, {73, 73, 63}, {78, 78, 64}, },
            {{36, 36, 65}, {46, 46, 66}, {48, 57, 67}, {65, 90, 68}, {92, 92, 69}, {95, 95, 70}, {97, 122, 71}, },
            {},
            {},
            {{0, 9, 72}, {11, 12, 72}, {14, 38, 72}, {40, 65535, 72}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{42, 42, 73}, {47, 47, 74}, },
            {{46, 46, 75}, {48, 55, 76}, {56, 57, 21}, {76, 76, 77}, {88, 88, 78}, {120, 120, 79}, },
            {{46, 46, 75}, {48, 57, 21}, {76, 76, 77}, },
            {{61, 61, 80}, },
            {},
            {{60, 60, 81}, {61, 61, 82}, {99, 99, 83}, {105, 105, 84}, },
            {{61, 61, 85}, },
            {{61, 61, 86}, {62, 62, 87}, },
            {{99, 99, 88}, {112, 112, 89}, {116, 116, 90}, },
            {{36, 122, -10}, },
            {},
            {{32, 32, 91}, {34, 34, 92}, {35, 35, 93}, {39, 39, 94}, {46, 46, 95}, {92, 92, 96}, {98, 98, 97}, {102, 102, 98}, {110, 110, 99}, {114, 114, 100}, {116, 116, 101}, {117, 117, 102}, },
            {},
            {},
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 71}, {98, 98, 103}, {99, 122, 71}, },
            {{36, 95, -10}, {97, 110, 71}, {111, 111, 104}, {112, 113, 71}, {114, 114, 105}, {115, 120, 71}, {121, 121, 106}, {122, 122, 71}, },
            {{36, 95, -10}, {97, 97, 107}, {98, 103, 71}, {104, 104, 108}, {105, 107, 71}, {108, 108, 109}, {109, 109, 110}, {110, 122, 71}, },
            {{36, 95, -10}, {97, 100, 71}, {101, 101, 111}, {102, 110, 71}, {111, 111, 112}, {112, 122, 71}, },
            {{36, 95, -10}, {97, 109, 71}, {110, 110, 113}, {111, 119, 71}, {120, 120, 114}, {121, 122, 71}, },
            {{36, 95, -10}, {97, 97, 115}, {98, 104, 71}, {105, 105, 116}, {106, 107, 71}, {108, 108, 117}, {109, 113, 71}, {114, 114, 118}, {115, 122, 71}, },
            {{36, 110, -37}, {111, 111, 119}, {112, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 101, 71}, {102, 102, 120}, {103, 108, 71}, {109, 109, 121}, {110, 110, 122}, {111, 122, 71}, },
            {{36, 100, -39}, {101, 101, 123}, {102, 110, 71}, {111, 111, 124}, {112, 122, 71}, },
            {{36, 95, -10}, {97, 97, 125}, {98, 100, 71}, {101, 101, 126}, {102, 110, 71}, {111, 111, 127}, {112, 116, 71}, {117, 117, 128}, {118, 122, 71}, },
            {{36, 95, -10}, {97, 113, 71}, {114, 114, 129}, {115, 116, 71}, {117, 117, 130}, {118, 122, 71}, },
            {{36, 100, -39}, {101, 101, 131}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 103, 71}, {104, 104, 132}, {105, 111, 71}, {112, 112, 133}, {113, 115, 71}, {116, 116, 134}, {117, 120, 71}, {121, 121, 135}, {122, 122, 71}, },
            {{36, 95, -10}, {97, 97, 136}, {98, 103, 71}, {104, 104, 137}, {105, 110, 71}, {111, 111, 138}, {112, 113, 71}, {114, 114, 139}, {115, 122, 71}, },
            {{36, 109, -40}, {110, 110, 140}, {111, 122, 71}, },
            {{36, 95, -10}, {97, 104, 71}, {105, 105, 141}, {106, 110, 71}, {111, 111, 142}, {112, 122, 71}, },
            {{36, 104, -52}, {105, 105, 143}, {106, 122, 71}, },
            {},
            {},
            {},
            {{42, 47, -21}, },
            {},
            {{0, 127, -8}, },
            {},
            {{0, 127, -8}, },
            {{32, 32, 144}, {34, 34, 145}, {35, 35, 146}, {39, 39, 147}, {46, 46, 148}, {92, 92, 149}, {98, 98, 150}, {102, 102, 151}, {110, 110, 152}, {114, 114, 153}, {116, 116, 154}, {117, 117, 155}, },
            {{0, 127, -8}, },
            {{73, 73, 63}, },
            {{110, 110, 156}, },
            {{97, 97, 157}, },
            {{36, 122, -10}, },
            {{36, 36, 158}, {65, 90, 159}, {92, 92, 160}, {95, 95, 161}, {97, 122, 162}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{32, 32, 163}, {34, 34, 164}, {35, 35, 165}, {39, 39, 166}, {46, 46, 167}, {92, 92, 168}, {98, 98, 169}, {102, 102, 170}, {110, 110, 171}, {114, 114, 172}, {116, 116, 173}, {117, 117, 174}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{0, 38, -13}, {39, 39, 175}, {40, 65535, 72}, },
            {{0, 41, 176}, {42, 42, 177}, {43, 65535, 176}, },
            {{0, 8, 178}, {9, 9, 179}, {10, 10, 2}, {11, 12, 178}, {13, 13, 3}, {14, 31, 178}, {32, 32, 180}, {33, 46, 178}, {47, 47, 181}, {48, 65535, 178}, },
            {{48, 57, 182}, },
            {{46, 76, -22}, },
            {},
            {{48, 57, 183}, {65, 70, 184}, {97, 102, 185}, },
            {{48, 102, -80}, },
            {},
            {},
            {},
            {{108, 108, 186}, },
            {{110, 110, 187}, },
            {},
            {},
            {{62, 62, 188}, },
            {{97, 97, 189}, },
            {{97, 97, 190}, },
            {{104, 104, 191}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{48, 57, 192}, {65, 70, 193}, {97, 102, 194}, },
            {{36, 95, -10}, {97, 114, 71}, {115, 115, 195}, {116, 122, 71}, },
            {{36, 110, -37}, {111, 111, 196}, {112, 122, 71}, },
            {{36, 100, -39}, {101, 101, 197}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 115, 71}, {116, 116, 198}, {117, 122, 71}, },
            {{36, 114, -105}, {115, 115, 199}, {116, 116, 200}, {117, 122, 71}, },
            {{36, 95, -10}, {97, 97, 201}, {98, 122, 71}, },
            {{36, 95, -10}, {97, 97, 202}, {98, 122, 71}, },
            {{36, 95, -10}, {97, 111, 71}, {112, 112, 203}, {113, 122, 71}, },
            {{36, 101, -44}, {102, 102, 204}, {103, 122, 71}, },
            {{36, 95, -10}, {97, 116, 71}, {117, 117, 205}, {118, 122, 71}, },
            {{36, 115, -108}, {116, 116, 206}, {117, 122, 71}, },
            {{36, 104, -52}, {105, 105, 207}, {106, 115, 71}, {116, 116, 208}, {117, 122, 71}, },
            {{36, 95, -10}, {97, 107, 71}, {108, 108, 209}, {109, 122, 71}, },
            {{36, 109, -40}, {110, 110, 210}, {111, 122, 71}, },
            {{36, 110, -37}, {111, 111, 211}, {112, 122, 71}, },
            {{36, 110, -37}, {111, 111, 212}, {112, 122, 71}, },
            {{36, 115, -108}, {116, 116, 213}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 111, -112}, {112, 112, 214}, {113, 122, 71}, },
            {{36, 114, -105}, {115, 115, 215}, {116, 116, 216}, {117, 122, 71}, },
            {{36, 109, -40}, {110, 110, 217}, {111, 122, 71}, },
            {{36, 109, -40}, {110, 110, 218}, {111, 111, 219}, {112, 122, 71}, },
            {{36, 115, -108}, {116, 116, 220}, {117, 122, 71}, },
            {{36, 95, -10}, {97, 102, 71}, {103, 103, 221}, {104, 118, 71}, {119, 119, 222}, {120, 122, 71}, },
            {{36, 111, -112}, {112, 112, 223}, {113, 122, 71}, },
            {{36, 107, -117}, {108, 108, 224}, {109, 122, 71}, },
            {{36, 104, -52}, {105, 105, 225}, {106, 110, 71}, {111, 111, 226}, {112, 122, 71}, },
            {{36, 97, -36}, {98, 98, 227}, {99, 122, 71}, },
            {{36, 115, -108}, {116, 116, 228}, {117, 122, 71}, },
            {{36, 110, -37}, {111, 111, 229}, {112, 122, 71}, },
            {{36, 100, -39}, {101, 101, 230}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 97, 231}, {98, 122, 71}, },
            {{36, 109, -40}, {110, 110, 232}, {111, 122, 71}, },
            {{36, 97, -36}, {98, 98, 233}, {99, 122, 71}, },
            {{36, 113, -47}, {114, 114, 234}, {115, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 235}, {98, 116, 71}, {117, 117, 236}, {118, 122, 71}, },
            {{36, 95, -10}, {97, 106, 71}, {107, 107, 237}, {108, 122, 71}, },
            {{36, 113, -47}, {114, 114, 238}, {115, 122, 71}, },
            {{36, 104, -52}, {105, 105, 239}, {106, 107, 71}, {108, 108, 240}, {109, 122, 71}, },
            {{36, 115, -108}, {116, 116, 241}, {117, 122, 71}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{48, 57, 242}, {65, 70, 243}, {97, 102, 244}, },
            {{102, 102, 245}, },
            {{78, 78, 246}, },
            {{36, 36, 247}, {46, 46, 66}, {48, 57, 248}, {65, 90, 249}, {92, 92, 250}, {95, 95, 251}, {97, 122, 252}, },
            {{36, 122, -160}, },
            {{32, 32, 253}, {34, 34, 254}, {35, 35, 255}, {39, 39, 256}, {46, 46, 257}, {92, 92, 258}, {98, 98, 259}, {102, 102, 260}, {110, 110, 261}, {114, 114, 262}, {116, 116, 263}, {117, 117, 264}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{48, 57, 265}, {65, 70, 266}, {97, 102, 267}, },
            {},
            {{0, 65535, -75}, },
            {{0, 41, 268}, {42, 42, 177}, {43, 46, 268}, {47, 47, 269}, {48, 65535, 268}, },
            {{0, 65535, -76}, },
            {{0, 65535, -76}, },
            {{0, 65535, -76}, },
            {{0, 32, -76}, {33, 41, 178}, {42, 42, 270}, {43, 46, 178}, {47, 47, 271}, {48, 65535, 178}, },
            {{48, 57, 182}, {69, 69, 272}, {70, 70, 273}, {101, 101, 274}, {102, 102, 275}, },
            {{48, 70, -80}, {76, 76, 77}, {97, 102, 185}, },
            {{48, 102, -185}, },
            {{48, 102, -185}, },
            {{105, 105, 276}, },
            {{105, 105, 277}, },
            {},
            {{117, 117, 278}, },
            {{114, 114, 279}, },
            {{105, 105, 280}, },
            {{48, 57, 281}, {65, 70, 282}, {97, 102, 283}, },
            {{48, 102, -194}, },
            {{48, 102, -194}, },
            {{36, 115, -108}, {116, 116, 284}, {117, 122, 71}, },
            {{36, 107, -117}, {108, 108, 285}, {109, 122, 71}, },
            {{36, 95, -10}, {97, 97, 286}, {98, 122, 71}, },
            {{36, 100, -39}, {101, 101, 287}, {102, 122, 71}, },
            {{36, 100, -39}, {101, 101, 288}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 98, 71}, {99, 99, 289}, {100, 122, 71}, },
            {{36, 113, -47}, {114, 114, 290}, {115, 122, 71}, },
            {{36, 114, -105}, {115, 115, 291}, {116, 122, 71}, },
            {{36, 102, -128}, {103, 103, 292}, {104, 107, 71}, {108, 108, 293}, {109, 122, 71}, },
            {{36, 95, -10}, {97, 97, 294}, {98, 122, 71}, },
            {{36, 97, -36}, {98, 98, 295}, {99, 122, 71}, },
            {{36, 100, -39}, {101, 101, 296}, {102, 122, 71}, },
            {{36, 115, -108}, {116, 116, 297}, {117, 122, 71}, },
            {{36, 100, -39}, {101, 101, 298}, {102, 122, 71}, },
            {{36, 114, -105}, {115, 115, 299}, {116, 122, 71}, },
            {{36, 95, -10}, {97, 97, 300}, {98, 122, 71}, },
            {{36, 95, -10}, {97, 97, 301}, {98, 122, 71}, },
            {{36, 95, -10}, {97, 108, 71}, {109, 109, 302}, {110, 122, 71}, },
            {{36, 110, -37}, {111, 111, 303}, {112, 122, 71}, },
            {{36, 107, -117}, {108, 108, 304}, {109, 122, 71}, },
            {{36, 115, -108}, {116, 116, 305}, {117, 122, 71}, },
            {{36, 100, -39}, {101, 101, 306}, {102, 122, 71}, },
            {{36, 102, -128}, {103, 103, 307}, {104, 122, 71}, },
            {{36, 102, -128}, {103, 103, 308}, {104, 122, 71}, },
            {{36, 106, -142}, {107, 107, 309}, {108, 122, 71}, },
            {{36, 104, -52}, {105, 105, 310}, {106, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 311}, {98, 108, 71}, {109, 109, 312}, {110, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 107, -117}, {108, 108, 313}, {109, 122, 71}, },
            {{36, 95, -10}, {97, 117, 71}, {118, 118, 314}, {119, 122, 71}, },
            {{36, 115, -108}, {116, 116, 315}, {117, 122, 71}, },
            {{36, 107, -117}, {108, 108, 316}, {109, 122, 71}, },
            {{36, 116, -114}, {117, 117, 317}, {118, 122, 71}, },
            {{36, 113, -47}, {114, 114, 318}, {115, 122, 71}, },
            {{36, 98, -202}, {99, 99, 319}, {100, 122, 71}, },
            {{36, 115, -108}, {116, 116, 320}, {117, 122, 71}, },
            {{36, 98, -202}, {99, 99, 321}, {100, 122, 71}, },
            {{36, 107, -117}, {108, 108, 322}, {109, 122, 71}, },
            {{36, 110, -37}, {111, 111, 323}, {112, 122, 71}, },
            {{36, 109, -40}, {110, 110, 324}, {111, 122, 71}, },
            {{36, 100, -39}, {101, 101, 325}, {102, 122, 71}, },
            {{36, 109, -40}, {110, 110, 326}, {111, 122, 71}, },
            {{36, 115, -108}, {116, 116, 327}, {117, 122, 71}, },
            {{36, 95, -10}, {97, 99, 71}, {100, 100, 328}, {101, 122, 71}, },
            {{36, 95, -10}, {97, 97, 329}, {98, 122, 71}, },
            {{36, 103, -49}, {104, 104, 330}, {105, 122, 71}, },
            {{48, 57, 331}, {65, 70, 332}, {97, 102, 333}, },
            {{48, 102, -244}, },
            {{48, 102, -244}, },
            {{105, 105, 334}, },
            {{70, 70, 335}, {102, 102, 336}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{32, 32, 337}, {34, 34, 338}, {35, 35, 339}, {39, 39, 340}, {46, 46, 341}, {92, 92, 342}, {98, 98, 343}, {102, 102, 344}, {110, 110, 345}, {114, 114, 346}, {116, 116, 347}, {117, 117, 348}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{48, 57, 349}, {65, 70, 350}, {97, 102, 351}, },
            {{48, 57, 352}, {65, 70, 353}, {97, 102, 354}, },
            {{48, 102, -267}, },
            {{48, 102, -267}, },
            {{0, 41, 355}, {42, 42, 356}, {43, 65535, 355}, },
            {{9, 47, -3}, },
            {{0, 8, 357}, {9, 9, 358}, {10, 10, 359}, {11, 12, 357}, {13, 13, 360}, {14, 31, 357}, {32, 32, 361}, {33, 41, 357}, {42, 42, 362}, {43, 46, 357}, {47, 47, 363}, {48, 65535, 357}, },
            {{0, 65535, -183}, },
            {{43, 43, 364}, {45, 45, 365}, {48, 57, 366}, },
            {},
            {{43, 57, -274}, },
            {},
            {{110, 110, 367}, },
            {{116, 116, 368}, },
            {{103, 103, 369}, },
            {{97, 97, 370}, },
            {{115, 115, 371}, },
            {{48, 57, 372}, {65, 70, 373}, {97, 102, 374}, },
            {{48, 102, -283}, },
            {{48, 102, -283}, },
            {{36, 113, -47}, {114, 114, 375}, {115, 122, 71}, },
            {{36, 100, -39}, {101, 101, 376}, {102, 122, 71}, },
            {{36, 106, -142}, {107, 107, 377}, {108, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 103, -49}, {104, 104, 378}, {105, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 114, -105}, {115, 115, 379}, {116, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 116, -114}, {117, 117, 380}, {118, 122, 71}, },
            {{36, 107, -117}, {108, 108, 381}, {109, 122, 71}, },
            {{36, 113, -47}, {114, 114, 382}, {115, 122, 71}, },
            {{36, 108, -214}, {109, 109, 383}, {110, 122, 71}, },
            {{36, 109, -40}, {110, 110, 384}, {111, 122, 71}, },
            {{36, 100, -39}, {101, 101, 385}, {102, 122, 71}, },
            {{36, 107, -117}, {108, 108, 386}, {109, 122, 71}, },
            {{36, 115, -108}, {116, 116, 387}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 100, -39}, {101, 101, 388}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 97, 389}, {98, 122, 71}, },
            {{36, 113, -47}, {114, 114, 390}, {115, 122, 71}, },
            {{36, 115, -108}, {116, 116, 391}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 116, -114}, {117, 117, 392}, {118, 122, 71}, },
            {{36, 117, -227}, {118, 118, 393}, {119, 122, 71}, },
            {{36, 113, -47}, {114, 114, 394}, {115, 122, 71}, },
            {{36, 116, -114}, {117, 117, 395}, {118, 122, 71}, },
            {{36, 92, -10}, {95, 95, 396}, {97, 122, 71}, },
            {{36, 95, -10}, {97, 97, 397}, {98, 122, 71}, },
            {{36, 100, -39}, {101, 101, 398}, {102, 122, 71}, },
            {{36, 104, -52}, {105, 105, 399}, {106, 122, 71}, },
            {{36, 113, -47}, {114, 114, 400}, {115, 122, 71}, },
            {{36, 115, -108}, {116, 116, 401}, {117, 122, 71}, },
            {{36, 104, -52}, {105, 105, 402}, {106, 122, 71}, },
            {{36, 104, -52}, {105, 105, 403}, {106, 122, 71}, },
            {{36, 103, -49}, {104, 104, 404}, {105, 122, 71}, },
            {{36, 100, -39}, {101, 101, 405}, {102, 122, 71}, },
            {{36, 95, -10}, {97, 118, 71}, {119, 119, 406}, {120, 122, 71}, },
            {{36, 114, -105}, {115, 115, 407}, {116, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 110, -37}, {111, 111, 408}, {112, 122, 71}, },
            {{36, 116, -114}, {117, 117, 409}, {118, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 115, -108}, {116, 116, 410}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{48, 57, 411}, {65, 70, 412}, {97, 102, 413}, },
            {{48, 102, -333}, },
            {{48, 102, -333}, },
            {{110, 110, 414}, },
            {},
            {},
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{48, 57, 415}, {65, 70, 416}, {97, 102, 417}, },
            {{48, 57, 418}, {65, 70, 419}, {97, 102, 420}, },
            {{48, 102, -351}, },
            {{48, 102, -351}, },
            {{48, 57, 421}, {65, 70, 422}, {97, 102, 423}, },
            {{48, 102, -354}, },
            {{48, 102, -354}, },
            {{0, 65535, -270}, },
            {{0, 41, 268}, {42, 42, 356}, {43, 65535, -179}, },
            {{0, 65535, -272}, },
            {{0, 65535, -272}, },
            {{0, 8, 176}, {9, 9, 424}, {10, 10, 359}, {11, 12, 176}, {13, 13, 360}, {14, 31, 176}, {32, 32, 425}, {33, 41, 176}, {42, 42, 177}, {43, 46, 176}, {47, 47, 426}, {48, 65535, 176}, },
            {{0, 65535, -361}, },
            {{0, 65535, -272}, },
            {{0, 8, 427}, {9, 9, 428}, {10, 10, 429}, {11, 12, 427}, {13, 13, 430}, {14, 31, 427}, {32, 32, 431}, {33, 41, 427}, {42, 42, 362}, {43, 46, 427}, {47, 47, 432}, {48, 65535, 427}, },
            {{0, 41, -272}, {42, 42, 433}, {43, 46, 357}, {47, 47, 434}, {48, 65535, 357}, },
            {{48, 57, 366}, },
            {{48, 57, 366}, },
            {{48, 57, 366}, {70, 70, 273}, {102, 102, 275}, },
            {{105, 105, 435}, },
            {{62, 62, 436}, },
            {{104, 104, 437}, },
            {{109, 109, 438}, },
            {{58, 58, 439}, },
            {{48, 57, 440}, {65, 70, 441}, {97, 102, 442}, },
            {{48, 102, -374}, },
            {{48, 102, -374}, },
            {{36, 95, -10}, {97, 97, 443}, {98, 122, 71}, },
            {{36, 95, -10}, {97, 97, 444}, {98, 122, 71}, },
            {{36, 111, -112}, {112, 112, 445}, {113, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 107, -117}, {108, 108, 446}, {109, 122, 71}, },
            {{36, 100, -39}, {101, 101, 447}, {102, 122, 71}, },
            {{36, 108, -214}, {109, 109, 448}, {110, 122, 71}, },
            {{36, 110, -37}, {111, 111, 449}, {112, 122, 71}, },
            {{36, 99, -241}, {100, 100, 450}, {101, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 108, -214}, {109, 109, 451}, {110, 122, 71}, },
            {{36, 109, -40}, {110, 110, 452}, {111, 122, 71}, },
            {{36, 101, -44}, {102, 102, 453}, {103, 122, 71}, },
            {{36, 103, -49}, {104, 104, 454}, {105, 122, 71}, },
            {{36, 111, -112}, {112, 112, 455}, {113, 122, 71}, },
            {{36, 100, -39}, {101, 101, 456}, {102, 122, 71}, },
            {{36, 113, -47}, {114, 114, 457}, {115, 122, 71}, },
            {{36, 107, -117}, {108, 108, 458}, {109, 122, 71}, },
            {{36, 115, -108}, {116, 116, 459}, {117, 122, 71}, },
            {{36, 115, -108}, {116, 116, 460}, {117, 122, 71}, },
            {{36, 98, -202}, {99, 99, 461}, {100, 122, 71}, },
            {{36, 98, -202}, {99, 99, 462}, {100, 122, 71}, },
            {{36, 109, -40}, {110, 110, 463}, {111, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 464}, {98, 122, 71}, },
            {{36, 98, -202}, {99, 99, 465}, {100, 122, 71}, },
            {{36, 113, -47}, {114, 114, 466}, {115, 122, 71}, },
            {{36, 114, -105}, {115, 115, 467}, {116, 122, 71}, },
            {{36, 114, -105}, {115, 115, 468}, {116, 122, 71}, },
            {{36, 104, -52}, {105, 105, 469}, {106, 122, 71}, },
            {{36, 118, -325}, {119, 119, 470}, {120, 122, 71}, },
            {{36, 95, -10}, {97, 97, 471}, {98, 122, 71}, },
            {{36, 104, -52}, {105, 105, 472}, {106, 122, 71}, },
            {{48, 57, 473}, {65, 70, 474}, {97, 102, 475}, },
            {{48, 102, -413}, },
            {{48, 102, -413}, },
            {{105, 105, 476}, },
            {{48, 57, 477}, {65, 70, 478}, {97, 102, 479}, },
            {{48, 102, -417}, },
            {{48, 102, -417}, },
            {{48, 57, 480}, {65, 70, 481}, {97, 102, 482}, },
            {{48, 102, -420}, },
            {{48, 102, -420}, },
            {{48, 57, 483}, {65, 70, 484}, {97, 102, 485}, },
            {{48, 102, -423}, },
            {{48, 102, -423}, },
            {{0, 65535, -361}, },
            {{0, 65535, -361}, },
            {{0, 41, 176}, {42, 42, 486}, {43, 46, 176}, {47, 47, 487}, {48, 65535, 176}, },
            {{0, 8, 488}, {9, 9, 489}, {10, 10, 490}, {11, 12, 488}, {13, 13, 491}, {14, 31, 488}, {32, 32, 492}, {33, 41, 488}, {42, 42, 493}, {43, 46, 488}, {47, 47, 494}, {48, 65535, 488}, },
            {{0, 65535, -429}, },
            {{0, 8, 355}, {9, 9, 495}, {10, 10, 490}, {11, 12, 355}, {13, 13, 491}, {14, 31, 355}, {32, 32, 496}, {33, 41, 355}, {42, 42, 356}, {43, 46, 355}, {47, 47, 497}, {48, 65535, 355}, },
            {{0, 65535, -431}, },
            {{0, 65535, -429}, },
            {{0, 65535, -183}, },
            {{0, 8, 498}, {9, 9, 499}, {10, 10, 500}, {11, 12, 498}, {13, 13, 501}, {14, 31, 498}, {32, 32, 502}, {33, 41, 498}, {42, 42, 362}, {43, 46, 498}, {47, 47, 503}, {48, 65535, 498}, },
            {{0, 65535, -365}, },
            {{116, 116, 504}, },
            {},
            {{116, 116, 505}, },
            {{101, 101, 506}, },
            {},
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 98, -202}, {99, 99, 507}, {100, 122, 71}, },
            {{36, 109, -40}, {110, 110, 508}, {111, 122, 71}, },
            {{36, 110, -37}, {111, 111, 509}, {112, 122, 71}, },
            {{36, 115, -108}, {116, 116, 510}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 110, -37}, {111, 111, 511}, {112, 122, 71}, },
            {{36, 109, -40}, {110, 110, 512}, {111, 122, 71}, },
            {{36, 114, -105}, {115, 115, 513}, {116, 122, 71}, },
            {{36, 100, -39}, {101, 101, 514}, {102, 122, 71}, },
            {{36, 98, -202}, {99, 99, 515}, {100, 122, 71}, },
            {{36, 95, -10}, {97, 97, 516}, {98, 122, 71}, },
            {{36, 110, -37}, {111, 111, 517}, {112, 122, 71}, },
            {{36, 114, -105}, {115, 115, 518}, {116, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 519}, {98, 122, 71}, },
            {{36, 115, -108}, {116, 116, 520}, {117, 122, 71}, },
            {{36, 95, -10}, {97, 120, 71}, {121, 121, 521}, {122, 122, 71}, },
            {{36, 100, -39}, {101, 101, 522}, {102, 122, 71}, },
            {{36, 115, -108}, {116, 116, 523}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 107, -117}, {108, 108, 524}, {109, 122, 71}, },
            {{36, 104, -52}, {105, 105, 525}, {106, 122, 71}, },
            {{36, 110, -37}, {111, 111, 526}, {112, 122, 71}, },
            {{36, 118, -325}, {119, 119, 527}, {120, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 100, -39}, {101, 101, 528}, {102, 122, 71}, },
            {{36, 109, -40}, {110, 110, 529}, {111, 122, 71}, },
            {{36, 107, -117}, {108, 108, 530}, {109, 122, 71}, },
            {{36, 107, -117}, {108, 108, 531}, {109, 122, 71}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{0, 127, -8}, },
            {{116, 116, 532}, },
            {{48, 57, 533}, {65, 70, 534}, {97, 102, 535}, },
            {{48, 102, -479}, },
            {{48, 102, -479}, },
            {{48, 57, 536}, {65, 70, 537}, {97, 102, 538}, },
            {{48, 102, -482}, },
            {{48, 102, -482}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{0, 41, 539}, {42, 42, 177}, {43, 46, 539}, {47, 47, 540}, {48, 65535, 539}, },
            {{0, 65535, -272}, },
            {{0, 65535, -429}, },
            {{0, 65535, -429}, },
            {{0, 65535, -431}, },
            {{0, 65535, -431}, },
            {{0, 65535, -429}, },
            {{0, 41, -364}, {42, 42, 493}, {43, 65535, -364}, },
            {{0, 41, -429}, {42, 42, 541}, {43, 46, 488}, {47, 47, 542}, {48, 65535, 488}, },
            {{0, 65535, -431}, },
            {{0, 65535, -431}, },
            {{0, 41, 355}, {42, 42, 543}, {43, 46, 355}, {47, 47, 544}, {48, 65535, 355}, },
            {{0, 8, 545}, {9, 9, 546}, {10, 10, 547}, {11, 12, 545}, {13, 13, 548}, {14, 31, 545}, {32, 32, 549}, {33, 41, 545}, {42, 42, 550}, {43, 46, 545}, {47, 47, 551}, {48, 65535, 545}, },
            {{0, 65535, -500}, },
            {{0, 8, 552}, {9, 9, 553}, {10, 10, 547}, {11, 12, 552}, {13, 13, 548}, {14, 31, 552}, {32, 32, 554}, {33, 41, 552}, {42, 42, 555}, {43, 46, 552}, {47, 47, 556}, {48, 65535, 552}, },
            {{0, 65535, -502}, },
            {{0, 65535, -500}, },
            {{0, 65535, -365}, },
            {{62, 62, 557}, },
            {{101, 101, 558}, },
            {{116, 116, 559}, },
            {{36, 115, -108}, {116, 116, 560}, {117, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 104, -52}, {105, 105, 561}, {106, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 109, -40}, {110, 110, 562}, {111, 122, 71}, },
            {{36, 104, -52}, {105, 105, 563}, {106, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 109, -40}, {110, 110, 564}, {111, 122, 71}, },
            {{36, 100, -39}, {101, 101, 565}, {102, 122, 71}, },
            {{36, 98, -202}, {99, 99, 566}, {100, 122, 71}, },
            {{36, 101, -44}, {102, 102, 567}, {103, 122, 71}, },
            {{36, 118, -325}, {119, 119, 568}, {120, 122, 71}, },
            {{36, 120, -461}, {121, 121, 569}, {122, 122, 71}, },
            {{36, 104, -52}, {105, 105, 570}, {106, 122, 71}, },
            {{36, 111, -112}, {112, 112, 571}, {113, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 100, -39}, {101, 101, 572}, {102, 122, 71}, },
            {{36, 104, -52}, {105, 105, 573}, {106, 122, 71}, },
            {{36, 109, -40}, {110, 110, 574}, {111, 122, 71}, },
            {{36, 109, -40}, {110, 110, 575}, {111, 122, 71}, },
            {{36, 104, -52}, {105, 105, 576}, {106, 122, 71}, },
            {{36, 109, -40}, {110, 110, 577}, {111, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 104, -52}, {105, 105, 578}, {106, 122, 71}, },
            {{36, 100, -39}, {101, 101, 579}, {102, 122, 71}, },
            {{121, 121, 580}, },
            {{48, 57, 581}, {65, 70, 582}, {97, 102, 583}, },
            {{48, 102, -535}, },
            {{48, 102, -535}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{0, 41, 552}, {42, 42, 555}, {43, 65535, 552}, },
            {{0, 65535, -361}, },
            {{0, 41, -435}, {42, 42, 550}, {43, 65535, -435}, },
            {{0, 65535, -496}, },
            {{0, 41, 539}, {42, 42, 555}, {43, 65535, -488}, },
            {{0, 65535, -429}, },
            {{0, 65535, -500}, },
            {{0, 65535, -500}, },
            {{0, 65535, -502}, },
            {{0, 65535, -502}, },
            {{0, 65535, -500}, },
            {{0, 41, -364}, {42, 42, 550}, {43, 65535, -364}, },
            {{0, 41, -500}, {42, 42, 584}, {43, 46, 545}, {47, 47, 585}, {48, 65535, 545}, },
            {{0, 65535, -541}, },
            {{0, 65535, -502}, },
            {{0, 65535, -502}, },
            {{0, 41, 268}, {42, 42, 555}, {43, 65535, -179}, },
            {{0, 41, 552}, {42, 42, 586}, {43, 46, 552}, {47, 47, 587}, {48, 65535, 552}, },
            {},
            {{120, 120, 588}, },
            {{101, 101, 589}, },
            {{36, 122, -10}, },
            {{36, 109, -40}, {110, 110, 590}, {111, 122, 71}, },
            {{36, 104, -52}, {105, 105, 591}, {106, 122, 71}, },
            {{36, 115, -108}, {116, 116, 592}, {117, 122, 71}, },
            {{36, 115, -108}, {116, 116, 593}, {117, 122, 71}, },
            {{36, 110, -37}, {111, 111, 594}, {112, 122, 71}, },
            {{36, 100, -39}, {101, 101, 595}, {102, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 104, -52}, {105, 105, 596}, {106, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 597}, {98, 122, 71}, },
            {{36, 100, -39}, {101, 101, 598}, {102, 122, 71}, },
            {{36, 99, -241}, {100, 100, 599}, {101, 122, 71}, },
            {{36, 109, -40}, {110, 110, 600}, {111, 122, 71}, },
            {{36, 117, -227}, {118, 118, 601}, {119, 122, 71}, },
            {{36, 104, -52}, {105, 105, 602}, {106, 122, 71}, },
            {{36, 115, -108}, {116, 116, 603}, {117, 122, 71}, },
            {{36, 115, -108}, {116, 116, 604}, {117, 122, 71}, },
            {{36, 109, -40}, {110, 110, 605}, {111, 122, 71}, },
            {{36, 122, -10}, },
            {{70, 102, -248}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{36, 122, -160}, },
            {{0, 65535, -543}, },
            {{0, 65535, -553}, },
            {{0, 65535, -545}, },
            {{0, 65535, -500}, },
            {{99, 99, 606}, },
            {{114, 114, 607}, },
            {{36, 115, -108}, {116, 116, 608}, {117, 122, 71}, },
            {{36, 115, -108}, {116, 116, 609}, {117, 122, 71}, },
            {{36, 110, -37}, {111, 111, 610}, {112, 122, 71}, },
            {{36, 114, -105}, {115, 115, 611}, {116, 122, 71}, },
            {{36, 101, -44}, {102, 102, 612}, {103, 122, 71}, },
            {{36, 104, -52}, {105, 105, 613}, {106, 122, 71}, },
            {{36, 115, -108}, {116, 116, 614}, {117, 122, 71}, },
            {{36, 113, -47}, {114, 114, 615}, {115, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 117, -227}, {118, 118, 616}, {119, 122, 71}, },
            {{36, 110, -37}, {111, 111, 617}, {112, 122, 71}, },
            {{36, 95, -10}, {97, 121, 71}, {122, 122, 618}, },
            {{36, 98, -202}, {99, 99, 619}, {100, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 117, -227}, {118, 118, 620}, {119, 122, 71}, },
            {{101, 101, 621}, },
            {{48, 57, 622}, },
            {{36, 122, -10}, },
            {{36, 110, -37}, {111, 111, 623}, {112, 122, 71}, },
            {{36, 113, -47}, {114, 114, 624}, {115, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 109, -40}, {110, 110, 625}, {111, 122, 71}, },
            {{36, 98, -202}, {99, 99, 626}, {100, 122, 71}, },
            {{36, 113, -47}, {114, 114, 627}, {115, 122, 71}, },
            {{36, 110, -37}, {111, 111, 628}, {112, 122, 71}, },
            {{36, 106, -142}, {107, 107, 629}, {108, 122, 71}, },
            {{36, 100, -39}, {101, 101, 630}, {102, 122, 71}, },
            {{36, 103, -49}, {104, 104, 631}, {105, 122, 71}, },
            {{36, 110, -37}, {111, 111, 632}, {112, 122, 71}, },
            {{112, 112, 633}, },
            {{48, 57, 622}, {58, 58, 634}, },
            {{36, 113, -47}, {114, 114, 635}, {115, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 117, -227}, {118, 118, 636}, {119, 122, 71}, },
            {{36, 103, -49}, {104, 104, 637}, {105, 122, 71}, },
            {{36, 95, -10}, {97, 97, 638}, {98, 122, 71}, },
            {{36, 106, -142}, {107, 107, 639}, {108, 122, 71}, },
            {{36, 100, -39}, {101, 101, 640}, {102, 122, 71}, },
            {{36, 99, -241}, {100, 100, 641}, {101, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 106, -142}, {107, 107, 642}, {108, 122, 71}, },
            {{116, 116, 643}, },
            {},
            {{36, 122, -10}, },
            {{36, 110, -37}, {111, 111, 644}, {112, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 120, -461}, {121, 121, 645}, {122, 122, 71}, },
            {{36, 100, -39}, {101, 101, 646}, {102, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 100, -39}, {101, 101, 647}, {102, 122, 71}, },
            {{105, 105, 648}, },
            {{36, 106, -142}, {107, 107, 649}, {108, 122, 71}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{36, 122, -10}, },
            {{111, 111, 650}, },
            {{36, 100, -39}, {101, 101, 651}, {102, 122, 71}, },
            {{110, 110, 652}, },
            {{36, 122, -10}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 0, 0, 0, 0, -1, -1, -1, 90, 74, 71, 68, 64, 65, 86, 84, 58, 85, 67, 87, 93, 93, 66, 61, 79, 70, 77, -1, 90, 62, -1, 63, 73, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 59, 72, 60, -1, 76, -1, 95, -1, -1, -1, -1, -1, -1, 90, -1, 90, 90, -1, 90, 90, -1, -1, 0, -1, 93, 93, -1, -1, 69, 81, 80, -1, -1, 75, 78, 82, -1, -1, -1, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, -1, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 36, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 56, 90, 90, 90, 90, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 88, 88, -1, 88, 88, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, -1, 89, -1, -1, 0, 0, 0, 0, 94, 93, 93, 93, -1, -1, 83, -1, -1, -1, -1, -1, -1, 90, 90, 90, 90, 90, 90, 90, 90, 29, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 18, 90, 90, 90, 90, 41, 42, 45, 90, 90, 90, 90, 46, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, -1, -1, -1, -1, 94, 88, 88, 88, -1, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, -1, -1, -1, -1, -1, 0, 0, 0, -1, 94, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, 90, 90, 90, 15, 27, 90, 17, 90, 30, 31, 90, 90, 90, 90, 90, 90, 90, 90, 55, 35, 90, 90, 90, 90, 19, 90, 90, 90, 90, 54, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 13, 90, 57, -1, -1, -1, -1, 94, 94, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, 88, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, -1, -1, 94, -1, -1, -1, -1, -1, -1, -1, -1, 90, 90, 90, 28, 11, 90, 90, 90, 90, 90, 90, 2, 20, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 90, 16, 90, 90, 90, 90, 51, 90, 90, 90, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 90, -1, -1, 91, 90, 90, 90, 90, 90, 90, 90, 21, 90, 90, 90, 90, 90, 90, 90, 90, 3, 90, 90, 90, 90, 90, 4, 47, 90, 7, 90, 90, 52, 90, 90, 90, 90, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 90, 90, 90, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, -1, -1, -1, 90, 14, 90, 32, 90, 90, 24, 90, 90, 90, 90, 90, 90, 90, 90, 6, 90, 90, 90, 90, 90, 90, 23, 90, 90, -1, -1, -1, -1, 88, 88, 88, -1, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, -1, -1, 90, -1, -1, 1, 90, 90, 90, 90, 90, 90, 39, 90, 43, 90, 90, 90, 90, 90, 90, 90, 90, 90, 10, 94, 88, 88, 88, 0, 0, -1, 0, -1, -1, 90, 90, 90, 90, 90, 12, 90, 90, 22, 5, 90, 90, 90, 90, 9, 90, -1, -1, 26, 90, 90, 25, 37, 90, 90, 90, 90, 90, 90, 90, 90, -1, -1, 90, 34, 90, 90, 90, 90, 90, 90, 50, 90, -1, 91, 33, 90, 40, 90, 90, 49, 8, 90, -1, 90, 44, 48, 53, -1, 90, -1, 38, 91, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
