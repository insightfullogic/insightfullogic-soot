/* This file was generated by SableCC (http://www.sable.mcgill.ca/sablecc/). */

package soot.jimple.parser.lexer;

import java.io.*;
import java.util.*;
import soot.jimple.parser.node.*;

public class Lexer
{
    protected Token token;
    protected State state = State.INITIAL;

    private PushbackReader in;
    private int line;
    private int pos;
    private boolean cr;
    private boolean eof;
    private final StringBuffer text = new StringBuffer();

    protected void filter() throws LexerException, IOException
    {
    }

    public Lexer(PushbackReader in)
    {
        this.in = in;

        if(gotoTable == null)
        {
            try
            {
                DataInputStream s = new DataInputStream(
                    new BufferedInputStream(
                    Lexer.class.getResourceAsStream("lexer.dat")));

                // read gotoTable
                int length = s.readInt();
                gotoTable = new int[length][][][];
                for(int i = 0; i < gotoTable.length; i++)
                {
                    length = s.readInt();
                    gotoTable[i] = new int[length][][];
                    for(int j = 0; j < gotoTable[i].length; j++)
                    {
                        length = s.readInt();
                        gotoTable[i][j] = new int[length][3];
                        for(int k = 0; k < gotoTable[i][j].length; k++)
                        {
                            for(int l = 0; l < 3; l++)
                            {
                                gotoTable[i][j][k][l] = s.readInt();
                            }
                        }
                    }
                }

                // read accept
                length = s.readInt();
                accept = new int[length][];
                for(int i = 0; i < accept.length; i++)
                {
                    length = s.readInt();
                    accept[i] = new int[length];
                    for(int j = 0; j < accept[i].length; j++)
                    {
                        accept[i][j] = s.readInt();
                    }
                }

                s.close();
            }
            catch(Exception e)
            {
                throw new RuntimeException("Unable to read lexer.dat.");
            }
        }
    }

    public Token peek() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        return token;
    }

    public Token next() throws LexerException, IOException
    {
        while(token == null)
        {
            token = getToken();
            filter();
        }

        Token result = token;
        token = null;
        return result;
    }

    protected Token getToken() throws IOException, LexerException
    {
        int dfa_state = 0;

        int start_pos = pos;
        int start_line = line;

        int accept_state = -1;
        int accept_token = -1;
        int accept_length = -1;
        int accept_pos = -1;
        int accept_line = -1;

	int[][][] gotoTable = this.gotoTable[state.id()];
	int[] accept = this.accept[state.id()];
        text.setLength(0);

        while(true)
        {
            int c = getChar();

            if(c != -1)
            {
                switch(c)
                {
                case 10:
                    if(cr)
                    {
                        cr = false;
                    }
                    else
                    {
                        line++;
                        pos = 0;
                    }
                    break;
                case 13:
                    line++;
                    pos = 0;
                    cr = true;
                    break;
                default:
                    pos++;
                    cr = false;
                    break;
                };

                text.append((char) c);

                do
                {
                    int oldState = (dfa_state < -1) ? (-2 -dfa_state) : dfa_state;

                    dfa_state = -1;

                    int[][] tmp1 =  gotoTable[oldState];
                    int low = 0;
                    int high = tmp1.length - 1;

                    while(low <= high)
                    {
                        int middle = (low + high) / 2;
                        int[] tmp2 = tmp1[middle];

                        if(c < tmp2[0])
                        {
                            high = middle - 1;
                        }
                        else if(c > tmp2[1])
                        {
                            low = middle + 1;
                        }
                        else
                        {
                            dfa_state = tmp2[2];
                            break;
                        }
                    }
                }while(dfa_state < -1);
            }
            else
            {
                dfa_state = -1;
            }

            if(dfa_state >= 0)
            {
                if(accept[dfa_state] != -1)
                {
                    accept_state = dfa_state;
                    accept_token = accept[dfa_state];
                    accept_length = text.length();
                    accept_pos = pos;
                    accept_line = line;
                }
            }
            else
            {
                if(accept_state != -1)
                {
                    switch(accept_token)
                    {
                    case 0:
                        {
                            Token token = new0(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 1:
                        {
                            Token token = new1(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 2:
                        {
                            Token token = new2(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 3:
                        {
                            Token token = new3(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 4:
                        {
                            Token token = new4(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 5:
                        {
                            Token token = new5(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 6:
                        {
                            Token token = new6(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 7:
                        {
                            Token token = new7(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 8:
                        {
                            Token token = new8(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 9:
                        {
                            Token token = new9(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 10:
                        {
                            Token token = new10(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 11:
                        {
                            Token token = new11(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 12:
                        {
                            Token token = new12(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 13:
                        {
                            Token token = new13(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 14:
                        {
                            Token token = new14(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 15:
                        {
                            Token token = new15(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 16:
                        {
                            Token token = new16(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 17:
                        {
                            Token token = new17(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 18:
                        {
                            Token token = new18(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 19:
                        {
                            Token token = new19(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 20:
                        {
                            Token token = new20(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 21:
                        {
                            Token token = new21(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 22:
                        {
                            Token token = new22(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 23:
                        {
                            Token token = new23(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 24:
                        {
                            Token token = new24(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 25:
                        {
                            Token token = new25(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 26:
                        {
                            Token token = new26(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 27:
                        {
                            Token token = new27(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 28:
                        {
                            Token token = new28(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 29:
                        {
                            Token token = new29(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 30:
                        {
                            Token token = new30(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 31:
                        {
                            Token token = new31(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 32:
                        {
                            Token token = new32(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 33:
                        {
                            Token token = new33(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 34:
                        {
                            Token token = new34(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 35:
                        {
                            Token token = new35(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 36:
                        {
                            Token token = new36(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 37:
                        {
                            Token token = new37(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 38:
                        {
                            Token token = new38(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 39:
                        {
                            Token token = new39(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 40:
                        {
                            Token token = new40(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 41:
                        {
                            Token token = new41(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 42:
                        {
                            Token token = new42(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 43:
                        {
                            Token token = new43(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 44:
                        {
                            Token token = new44(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 45:
                        {
                            Token token = new45(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 46:
                        {
                            Token token = new46(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 47:
                        {
                            Token token = new47(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 48:
                        {
                            Token token = new48(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 49:
                        {
                            Token token = new49(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 50:
                        {
                            Token token = new50(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 51:
                        {
                            Token token = new51(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 52:
                        {
                            Token token = new52(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 53:
                        {
                            Token token = new53(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 54:
                        {
                            Token token = new54(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 55:
                        {
                            Token token = new55(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 56:
                        {
                            Token token = new56(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 57:
                        {
                            Token token = new57(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 58:
                        {
                            Token token = new58(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 59:
                        {
                            Token token = new59(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 60:
                        {
                            Token token = new60(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 61:
                        {
                            Token token = new61(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 62:
                        {
                            Token token = new62(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 63:
                        {
                            Token token = new63(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 64:
                        {
                            Token token = new64(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 65:
                        {
                            Token token = new65(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 66:
                        {
                            Token token = new66(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 67:
                        {
                            Token token = new67(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 68:
                        {
                            Token token = new68(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 69:
                        {
                            Token token = new69(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 70:
                        {
                            Token token = new70(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 71:
                        {
                            Token token = new71(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 72:
                        {
                            Token token = new72(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 73:
                        {
                            Token token = new73(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 74:
                        {
                            Token token = new74(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 75:
                        {
                            Token token = new75(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 76:
                        {
                            Token token = new76(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 77:
                        {
                            Token token = new77(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 78:
                        {
                            Token token = new78(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 79:
                        {
                            Token token = new79(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 80:
                        {
                            Token token = new80(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 81:
                        {
                            Token token = new81(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 82:
                        {
                            Token token = new82(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 83:
                        {
                            Token token = new83(
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 84:
                        {
                            Token token = new84(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 85:
                        {
                            Token token = new85(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 86:
                        {
                            Token token = new86(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 87:
                        {
                            Token token = new87(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 88:
                        {
                            Token token = new88(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 89:
                        {
                            Token token = new89(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 90:
                        {
                            Token token = new90(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 91:
                        {
                            Token token = new91(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 92:
                        {
                            Token token = new92(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    case 93:
                        {
                            Token token = new93(
                                getText(accept_length),
                                start_line + 1,
                                start_pos + 1);
                            pushBack(accept_length);
                            pos = accept_pos;
                            line = accept_line;
                            return token;
                        }
                    }
                }
                else
                {
                    if(text.length() > 0)
                    {
                        throw new LexerException(
                            "[" + (start_line + 1) + "," + (start_pos + 1) + "]" +
                            " Unknown token: " + text);
                    }
                    else
                    {
                        EOF token = new EOF(
                            start_line + 1,
                            start_pos + 1);
                        return token;
                    }
                }
            }
        }
    }

    Token new0(int line, int pos) { return new TAbstract(line, pos); }
    Token new1(int line, int pos) { return new TFinal(line, pos); }
    Token new2(int line, int pos) { return new TNative(line, pos); }
    Token new3(int line, int pos) { return new TPublic(line, pos); }
    Token new4(int line, int pos) { return new TProtected(line, pos); }
    Token new5(int line, int pos) { return new TPrivate(line, pos); }
    Token new6(int line, int pos) { return new TStatic(line, pos); }
    Token new7(int line, int pos) { return new TSynchronized(line, pos); }
    Token new8(int line, int pos) { return new TTransient(line, pos); }
    Token new9(int line, int pos) { return new TVolatile(line, pos); }
    Token new10(int line, int pos) { return new TClass(line, pos); }
    Token new11(int line, int pos) { return new TInterface(line, pos); }
    Token new12(int line, int pos) { return new TVoid(line, pos); }
    Token new13(int line, int pos) { return new TBoolean(line, pos); }
    Token new14(int line, int pos) { return new TByte(line, pos); }
    Token new15(int line, int pos) { return new TShort(line, pos); }
    Token new16(int line, int pos) { return new TChar(line, pos); }
    Token new17(int line, int pos) { return new TInt(line, pos); }
    Token new18(int line, int pos) { return new TLong(line, pos); }
    Token new19(int line, int pos) { return new TFloat(line, pos); }
    Token new20(int line, int pos) { return new TDouble(line, pos); }
    Token new21(int line, int pos) { return new TNullType(line, pos); }
    Token new22(int line, int pos) { return new TUnknown(line, pos); }
    Token new23(int line, int pos) { return new TExtends(line, pos); }
    Token new24(int line, int pos) { return new TImplements(line, pos); }
    Token new25(int line, int pos) { return new TBreakpoint(line, pos); }
    Token new26(int line, int pos) { return new TCase(line, pos); }
    Token new27(int line, int pos) { return new TCatch(line, pos); }
    Token new28(int line, int pos) { return new TCmp(line, pos); }
    Token new29(int line, int pos) { return new TCmpg(line, pos); }
    Token new30(int line, int pos) { return new TCmpl(line, pos); }
    Token new31(int line, int pos) { return new TDefault(line, pos); }
    Token new32(int line, int pos) { return new TEntermonitor(line, pos); }
    Token new33(int line, int pos) { return new TExitmonitor(line, pos); }
    Token new34(int line, int pos) { return new TGoto(line, pos); }
    Token new35(int line, int pos) { return new TIf(line, pos); }
    Token new36(int line, int pos) { return new TInstanceof(line, pos); }
    Token new37(int line, int pos) { return new TInterfaceinvoke(line, pos); }
    Token new38(int line, int pos) { return new TLengthof(line, pos); }
    Token new39(int line, int pos) { return new TLookupswitch(line, pos); }
    Token new40(int line, int pos) { return new TNeg(line, pos); }
    Token new41(int line, int pos) { return new TNew(line, pos); }
    Token new42(int line, int pos) { return new TNewarray(line, pos); }
    Token new43(int line, int pos) { return new TNewmultiarray(line, pos); }
    Token new44(int line, int pos) { return new TNop(line, pos); }
    Token new45(int line, int pos) { return new TRet(line, pos); }
    Token new46(int line, int pos) { return new TReturn(line, pos); }
    Token new47(int line, int pos) { return new TSpecialinvoke(line, pos); }
    Token new48(int line, int pos) { return new TStaticinvoke(line, pos); }
    Token new49(int line, int pos) { return new TTableswitch(line, pos); }
    Token new50(int line, int pos) { return new TThrow(line, pos); }
    Token new51(int line, int pos) { return new TThrows(line, pos); }
    Token new52(int line, int pos) { return new TVirtualinvoke(line, pos); }
    Token new53(int line, int pos) { return new TNull(line, pos); }
    Token new54(int line, int pos) { return new TComma(line, pos); }
    Token new55(int line, int pos) { return new TLBrace(line, pos); }
    Token new56(int line, int pos) { return new TRBrace(line, pos); }
    Token new57(int line, int pos) { return new TSemicolon(line, pos); }
    Token new58(int line, int pos) { return new TLBracket(line, pos); }
    Token new59(int line, int pos) { return new TRBracket(line, pos); }
    Token new60(int line, int pos) { return new TLParen(line, pos); }
    Token new61(int line, int pos) { return new TRParen(line, pos); }
    Token new62(int line, int pos) { return new TColon(line, pos); }
    Token new63(int line, int pos) { return new TDot(line, pos); }
    Token new64(int line, int pos) { return new TQuote(line, pos); }
    Token new65(int line, int pos) { return new TColonEquals(line, pos); }
    Token new66(int line, int pos) { return new TEquals(line, pos); }
    Token new67(int line, int pos) { return new TAnd(line, pos); }
    Token new68(int line, int pos) { return new TOr(line, pos); }
    Token new69(int line, int pos) { return new TXor(line, pos); }
    Token new70(int line, int pos) { return new TMod(line, pos); }
    Token new71(int line, int pos) { return new TCmpeq(line, pos); }
    Token new72(int line, int pos) { return new TCmpne(line, pos); }
    Token new73(int line, int pos) { return new TCmpgt(line, pos); }
    Token new74(int line, int pos) { return new TCmpge(line, pos); }
    Token new75(int line, int pos) { return new TCmplt(line, pos); }
    Token new76(int line, int pos) { return new TCmple(line, pos); }
    Token new77(int line, int pos) { return new TShl(line, pos); }
    Token new78(int line, int pos) { return new TShr(line, pos); }
    Token new79(int line, int pos) { return new TUshr(line, pos); }
    Token new80(int line, int pos) { return new TPlus(line, pos); }
    Token new81(int line, int pos) { return new TMinus(line, pos); }
    Token new82(int line, int pos) { return new TMult(line, pos); }
    Token new83(int line, int pos) { return new TDiv(line, pos); }
    Token new84(String text, int line, int pos) { return new TFullIdentifier(text, line, pos); }
    Token new85(String text, int line, int pos) { return new TQuotedName(text, line, pos); }
    Token new86(String text, int line, int pos) { return new TIdentifier(text, line, pos); }
    Token new87(String text, int line, int pos) { return new TAtIdentifier(text, line, pos); }
    Token new88(String text, int line, int pos) { return new TBoolConstant(text, line, pos); }
    Token new89(String text, int line, int pos) { return new TIntegerConstant(text, line, pos); }
    Token new90(String text, int line, int pos) { return new TFloatConstant(text, line, pos); }
    Token new91(String text, int line, int pos) { return new TStringConstant(text, line, pos); }
    Token new92(String text, int line, int pos) { return new TBlank(text, line, pos); }
    Token new93(String text, int line, int pos) { return new TComment(text, line, pos); }

    private int getChar() throws IOException
    {
        if(eof)
        {
            return -1;
        }

        int result = in.read();

        if(result == -1)
        {
            eof = true;
        }

        return result;
    }

    private void pushBack(int acceptLength) throws IOException
    {
        int length = text.length();
        for(int i = length - 1; i >= acceptLength; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }
    }

    protected void unread(Token token) throws IOException
    {
        String text = token.getText();
        int length = text.length();

        for(int i = length - 1; i >= 0; i--)
        {
            eof = false;

            in.unread(text.charAt(i));
        }

        pos = token.getPos() - 1;
        line = token.getLine() - 1;
    }

    private String getText(int acceptLength)
    {
        StringBuffer s = new StringBuffer(acceptLength);
        for(int i = 0; i < acceptLength; i++)
        {
            s.append(text.charAt(i));
        }

        return s.toString();
    }

    private static int[][][][] gotoTable;
/*  {
        { // INITIAL
            {{9, 9, 1}, {10, 10, 2}, {13, 13, 3}, {32, 32, 4}, {33, 33, 5}, {34, 34, 6}, {35, 35, 7}, {36, 36, 8}, {37, 37, 9}, {38, 38, 10}, {39, 39, 11}, {40, 40, 12}, {41, 41, 13}, {42, 42, 14}, {43, 43, 15}, {44, 44, 16}, {45, 45, 17}, {46, 46, 18}, {47, 47, 19}, {48, 48, 20}, {49, 57, 21}, {58, 58, 22}, {59, 59, 23}, {60, 60, 24}, {61, 61, 25}, {62, 62, 26}, {64, 64, 27}, {65, 90, 28}, {91, 91, 29}, {93, 93, 30}, {94, 94, 31}, {95, 95, 32}, {97, 97, 33}, {98, 98, 34}, {99, 99, 35}, {100, 100, 36}, {101, 101, 37}, {102, 102, 38}, {103, 103, 39}, {104, 104, 40}, {105, 105, 41}, {106, 107, 40}, {108, 108, 42}, {109, 109, 40}, {110, 110, 43}, {111, 111, 40}, {112, 112, 44}, {113, 113, 40}, {114, 114, 45}, {115, 115, 46}, {116, 116, 47}, {117, 117, 48}, {118, 118, 49}, {119, 122, 40}, {123, 123, 50}, {124, 124, 51}, {125, 125, 52}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{9, 32, -2}, },
            {{61, 61, 53}, },
            {{9, 9, 54}, {10, 10, 55}, {13, 13, 55}, {32, 33, 56}, {34, 34, 57}, {35, 91, 58}, {92, 92, 59}, {93, 126, 60}, },
            {{45, 45, 61}, {73, 73, 62}, {78, 78, 63}, },
            {{36, 36, 64}, {48, 57, 65}, {65, 90, 66}, {95, 95, 67}, {97, 122, 68}, },
            {},
            {},
            {{0, 9, 69}, {11, 12, 69}, {14, 38, 69}, {40, 65535, 69}, },
            {},
            {},
            {},
            {},
            {},
            {},
            {},
            {{42, 42, 70}, {47, 47, 71}, },
            {{46, 46, 72}, {48, 55, 73}, {56, 57, 21}, {76, 76, 74}, {88, 88, 75}, {120, 120, 76}, },
            {{46, 46, 72}, {48, 57, 21}, {76, 76, 74}, },
            {{61, 61, 77}, },
            {},
            {{60, 60, 78}, {61, 61, 79}, {99, 99, 80}, {105, 105, 81}, },
            {{61, 61, 82}, },
            {{61, 61, 83}, {62, 62, 84}, },
            {{99, 99, 85}, {112, 112, 86}, {116, 116, 87}, },
            {{36, 122, -10}, },
            {},
            {},
            {},
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 97, 68}, {98, 98, 88}, {99, 122, 68}, },
            {{36, 95, -10}, {97, 110, 68}, {111, 111, 89}, {112, 113, 68}, {114, 114, 90}, {115, 120, 68}, {121, 121, 91}, {122, 122, 68}, },
            {{36, 95, -10}, {97, 97, 92}, {98, 103, 68}, {104, 104, 93}, {105, 107, 68}, {108, 108, 94}, {109, 109, 95}, {110, 122, 68}, },
            {{36, 95, -10}, {97, 100, 68}, {101, 101, 96}, {102, 110, 68}, {111, 111, 97}, {112, 122, 68}, },
            {{36, 95, -10}, {97, 109, 68}, {110, 110, 98}, {111, 119, 68}, {120, 120, 99}, {121, 122, 68}, },
            {{36, 95, -10}, {97, 97, 100}, {98, 104, 68}, {105, 105, 101}, {106, 107, 68}, {108, 108, 102}, {109, 122, 68}, },
            {{36, 110, -36}, {111, 111, 103}, {112, 122, 68}, },
            {{36, 122, -10}, },
            {{36, 95, -10}, {97, 101, 68}, {102, 102, 104}, {103, 108, 68}, {109, 109, 105}, {110, 110, 106}, {111, 122, 68}, },
            {{36, 100, -38}, {101, 101, 107}, {102, 110, 68}, {111, 111, 108}, {112, 122, 68}, },
            {{36, 95, -10}, {97, 97, 109}, {98, 100, 68}, {101, 101, 110}, {102, 110, 68}, {111, 111, 111}, {112, 116, 68}, {117, 117, 112}, {118, 122, 68}, },
            {{36, 95, -10}, {97, 113, 68}, {114, 114, 113}, {115, 116, 68}, {117, 117, 114}, {118, 122, 68}, },
            {{36, 100, -38}, {101, 101, 115}, {102, 122, 68}, },
            {{36, 95, -10}, {97, 103, 68}, {104, 104, 116}, {105, 111, 68}, {112, 112, 117}, {113, 115, 68}, {116, 116, 118}, {117, 120, 68}, {121, 121, 119}, {122, 122, 68}, },
            {{36, 95, -10}, {97, 97, 120}, {98, 103, 68}, {104, 104, 121}, {105, 113, 68}, {114, 114, 122}, {115, 122, 68}, },
            {{36, 109, -39}, {110, 110, 123}, {111, 122, 68}, },
            {{36, 95, -10}, {97, 104, 68}, {105, 105, 124}, {106, 110, 68}, {111, 111, 125}, {112, 122, 68}, },
            {},
            {},
            {},
            {},
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {},
            {{9, 126, -8}, },
            {{32, 32, 126}, {34, 34, 127}, {35, 35, 128}, {39, 39, 129}, {46, 46, 130}, {92, 92, 131}, {98, 98, 132}, {102, 102, 133}, {110, 110, 134}, {114, 114, 135}, {116, 116, 136}, {117, 117, 137}, },
            {{9, 126, -8}, },
            {{73, 73, 62}, },
            {{110, 110, 138}, },
            {{97, 97, 139}, },
            {{36, 36, 64}, {46, 46, 140}, {48, 122, -10}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{0, 38, -13}, {39, 39, 141}, {40, 65535, 69}, },
            {{0, 41, 142}, {42, 42, 143}, {43, 65535, 142}, },
            {{0, 9, 144}, {11, 12, 144}, {14, 65535, 144}, },
            {{48, 57, 145}, },
            {{46, 76, -22}, },
            {},
            {{48, 57, 146}, {65, 70, 147}, {97, 102, 148}, },
            {{48, 102, -77}, },
            {},
            {},
            {},
            {{108, 108, 149}, },
            {{110, 110, 150}, },
            {},
            {},
            {{62, 62, 151}, },
            {{97, 97, 152}, },
            {{97, 97, 153}, },
            {{104, 104, 154}, },
            {{36, 95, -66}, {97, 114, 68}, {115, 115, 155}, {116, 122, 68}, },
            {{36, 95, -66}, {97, 110, 68}, {111, 111, 156}, {112, 122, 68}, },
            {{36, 95, -66}, {97, 100, 68}, {101, 101, 157}, {102, 122, 68}, },
            {{36, 95, -66}, {97, 115, 68}, {116, 116, 158}, {117, 122, 68}, },
            {{36, 114, -90}, {115, 115, 159}, {116, 116, 160}, {117, 122, 68}, },
            {{36, 95, -66}, {97, 97, 161}, {98, 122, 68}, },
            {{36, 95, -66}, {97, 97, 162}, {98, 122, 68}, },
            {{36, 95, -66}, {97, 111, 68}, {112, 112, 163}, {113, 122, 68}, },
            {{36, 95, -66}, {97, 101, 68}, {102, 102, 164}, {103, 122, 68}, },
            {{36, 95, -66}, {97, 116, 68}, {117, 117, 165}, {118, 122, 68}, },
            {{36, 115, -93}, {116, 116, 166}, {117, 122, 68}, },
            {{36, 95, -66}, {97, 104, 68}, {105, 105, 167}, {106, 115, 68}, {116, 116, 168}, {117, 122, 68}, },
            {{36, 95, -66}, {97, 107, 68}, {108, 108, 169}, {109, 122, 68}, },
            {{36, 95, -66}, {97, 109, 68}, {110, 110, 170}, {111, 122, 68}, },
            {{36, 110, -91}, {111, 111, 171}, {112, 122, 68}, },
            {{36, 115, -93}, {116, 116, 172}, {117, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 111, -97}, {112, 112, 173}, {113, 122, 68}, },
            {{36, 114, -90}, {115, 115, 174}, {116, 116, 175}, {117, 122, 68}, },
            {{36, 109, -103}, {110, 110, 176}, {111, 122, 68}, },
            {{36, 109, -103}, {110, 110, 177}, {111, 111, 178}, {112, 122, 68}, },
            {{36, 115, -93}, {116, 116, 179}, {117, 122, 68}, },
            {{36, 95, -66}, {97, 102, 68}, {103, 103, 180}, {104, 118, 68}, {119, 119, 181}, {120, 122, 68}, },
            {{36, 111, -97}, {112, 112, 182}, {113, 122, 68}, },
            {{36, 107, -102}, {108, 108, 183}, {109, 122, 68}, },
            {{36, 104, -101}, {105, 105, 184}, {106, 110, 68}, {111, 111, 185}, {112, 122, 68}, },
            {{36, 95, -66}, {97, 97, 68}, {98, 98, 186}, {99, 122, 68}, },
            {{36, 115, -93}, {116, 116, 187}, {117, 122, 68}, },
            {{36, 110, -91}, {111, 111, 188}, {112, 122, 68}, },
            {{36, 100, -92}, {101, 101, 189}, {102, 122, 68}, },
            {{36, 95, -66}, {97, 97, 190}, {98, 122, 68}, },
            {{36, 109, -103}, {110, 110, 191}, {111, 122, 68}, },
            {{36, 97, -116}, {98, 98, 192}, {99, 122, 68}, },
            {{36, 95, -66}, {97, 113, 68}, {114, 114, 193}, {115, 122, 68}, },
            {{36, 95, -66}, {97, 97, 194}, {98, 116, 68}, {117, 117, 195}, {118, 122, 68}, },
            {{36, 95, -66}, {97, 106, 68}, {107, 107, 196}, {108, 122, 68}, },
            {{36, 113, -123}, {114, 114, 197}, {115, 122, 68}, },
            {{36, 104, -101}, {105, 105, 198}, {106, 107, 68}, {108, 108, 199}, {109, 122, 68}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{48, 57, 200}, {65, 70, 201}, {97, 102, 202}, },
            {{102, 102, 203}, },
            {{78, 78, 204}, },
            {{36, 36, 205}, {65, 90, 206}, {95, 95, 207}, {97, 122, 208}, },
            {},
            {{0, 65535, -72}, },
            {{0, 41, 209}, {42, 42, 143}, {43, 46, 209}, {47, 47, 210}, {48, 65535, 209}, },
            {{0, 65535, -73}, },
            {{48, 57, 145}, {69, 69, 211}, {70, 70, 212}, {101, 101, 213}, {102, 102, 214}, },
            {{48, 70, -77}, {76, 76, 74}, {97, 102, 148}, },
            {{48, 102, -148}, },
            {{48, 102, -148}, },
            {{105, 105, 215}, },
            {{105, 105, 216}, },
            {},
            {{117, 117, 217}, },
            {{114, 114, 218}, },
            {{105, 105, 219}, },
            {{36, 115, -93}, {116, 116, 220}, {117, 122, 68}, },
            {{36, 107, -102}, {108, 108, 221}, {109, 122, 68}, },
            {{36, 95, -66}, {97, 97, 222}, {98, 122, 68}, },
            {{36, 100, -92}, {101, 101, 223}, {102, 122, 68}, },
            {{36, 100, -92}, {101, 101, 224}, {102, 122, 68}, },
            {{36, 95, -66}, {97, 98, 68}, {99, 99, 225}, {100, 122, 68}, },
            {{36, 113, -123}, {114, 114, 226}, {115, 122, 68}, },
            {{36, 114, -90}, {115, 115, 227}, {116, 122, 68}, },
            {{36, 102, -112}, {103, 103, 228}, {104, 107, 68}, {108, 108, 229}, {109, 122, 68}, },
            {{36, 95, -66}, {97, 97, 230}, {98, 122, 68}, },
            {{36, 97, -116}, {98, 98, 231}, {99, 122, 68}, },
            {{36, 100, -92}, {101, 101, 232}, {102, 122, 68}, },
            {{36, 115, -93}, {116, 116, 233}, {117, 122, 68}, },
            {{36, 100, -92}, {101, 101, 234}, {102, 122, 68}, },
            {{36, 114, -90}, {115, 115, 235}, {116, 122, 68}, },
            {{36, 95, -66}, {97, 97, 236}, {98, 122, 68}, },
            {{36, 95, -66}, {97, 97, 237}, {98, 122, 68}, },
            {{36, 110, -91}, {111, 111, 238}, {112, 122, 68}, },
            {{36, 107, -102}, {108, 108, 239}, {109, 122, 68}, },
            {{36, 115, -93}, {116, 116, 240}, {117, 122, 68}, },
            {{36, 100, -92}, {101, 101, 241}, {102, 122, 68}, },
            {{36, 102, -112}, {103, 103, 242}, {104, 122, 68}, },
            {{36, 102, -112}, {103, 103, 243}, {104, 122, 68}, },
            {{36, 106, -125}, {107, 107, 244}, {108, 122, 68}, },
            {{36, 104, -101}, {105, 105, 245}, {106, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 95, -66}, {97, 97, 246}, {98, 108, 68}, {109, 109, 247}, {110, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 107, -102}, {108, 108, 248}, {109, 122, 68}, },
            {{36, 95, -66}, {97, 117, 68}, {118, 118, 249}, {119, 122, 68}, },
            {{36, 115, -93}, {116, 116, 250}, {117, 122, 68}, },
            {{36, 107, -102}, {108, 108, 251}, {109, 122, 68}, },
            {{36, 116, -99}, {117, 117, 252}, {118, 122, 68}, },
            {{36, 113, -123}, {114, 114, 253}, {115, 122, 68}, },
            {{36, 98, -162}, {99, 99, 254}, {100, 122, 68}, },
            {{36, 115, -93}, {116, 116, 255}, {117, 122, 68}, },
            {{36, 98, -162}, {99, 99, 256}, {100, 122, 68}, },
            {{36, 107, -102}, {108, 108, 257}, {109, 122, 68}, },
            {{36, 110, -91}, {111, 111, 258}, {112, 122, 68}, },
            {{36, 109, -103}, {110, 110, 259}, {111, 122, 68}, },
            {{36, 100, -92}, {101, 101, 260}, {102, 122, 68}, },
            {{36, 109, -103}, {110, 110, 261}, {111, 122, 68}, },
            {{36, 115, -93}, {116, 116, 262}, {117, 122, 68}, },
            {{36, 95, -66}, {97, 99, 68}, {100, 100, 263}, {101, 122, 68}, },
            {{36, 95, -66}, {97, 97, 264}, {98, 122, 68}, },
            {{48, 57, 265}, {65, 70, 266}, {97, 102, 267}, },
            {{48, 102, -202}, },
            {{48, 102, -202}, },
            {{105, 105, 268}, },
            {{70, 70, 269}, {102, 102, 270}, },
            {{36, 36, 271}, {48, 57, 272}, {65, 90, 273}, {95, 95, 274}, {97, 122, 275}, },
            {{36, 122, -207}, },
            {{36, 122, -207}, },
            {{36, 122, -207}, },
            {{0, 41, 276}, {42, 42, 277}, {43, 65535, 276}, },
            {},
            {{43, 43, 278}, {45, 45, 279}, {48, 57, 280}, },
            {},
            {{43, 57, -213}, },
            {},
            {{110, 110, 281}, },
            {{116, 116, 282}, },
            {{103, 103, 283}, },
            {{97, 97, 284}, },
            {{115, 115, 285}, },
            {{36, 113, -123}, {114, 114, 286}, {115, 122, 68}, },
            {{36, 100, -92}, {101, 101, 287}, {102, 122, 68}, },
            {{36, 106, -125}, {107, 107, 288}, {108, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 95, -66}, {97, 103, 68}, {104, 104, 289}, {105, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 114, -90}, {115, 115, 290}, {116, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 116, -99}, {117, 117, 291}, {118, 122, 68}, },
            {{36, 107, -102}, {108, 108, 292}, {109, 122, 68}, },
            {{36, 113, -123}, {114, 114, 293}, {115, 122, 68}, },
            {{36, 95, -66}, {97, 108, 68}, {109, 109, 294}, {110, 122, 68}, },
            {{36, 109, -103}, {110, 110, 295}, {111, 122, 68}, },
            {{36, 100, -92}, {101, 101, 296}, {102, 122, 68}, },
            {{36, 107, -102}, {108, 108, 297}, {109, 122, 68}, },
            {{36, 115, -93}, {116, 116, 298}, {117, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 100, -92}, {101, 101, 299}, {102, 122, 68}, },
            {{36, 95, -66}, {97, 97, 300}, {98, 122, 68}, },
            {{36, 113, -123}, {114, 114, 301}, {115, 122, 68}, },
            {{36, 115, -93}, {116, 116, 302}, {117, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 116, -99}, {117, 117, 303}, {118, 122, 68}, },
            {{36, 117, -186}, {118, 118, 304}, {119, 122, 68}, },
            {{36, 113, -123}, {114, 114, 305}, {115, 122, 68}, },
            {{36, 116, -99}, {117, 117, 306}, {118, 122, 68}, },
            {{36, 90, -66}, {95, 95, 307}, {97, 122, 68}, },
            {{36, 95, -66}, {97, 97, 308}, {98, 122, 68}, },
            {{36, 100, -92}, {101, 101, 309}, {102, 122, 68}, },
            {{36, 104, -101}, {105, 105, 310}, {106, 122, 68}, },
            {{36, 113, -123}, {114, 114, 311}, {115, 122, 68}, },
            {{36, 115, -93}, {116, 116, 312}, {117, 122, 68}, },
            {{36, 104, -101}, {105, 105, 313}, {106, 122, 68}, },
            {{36, 104, -101}, {105, 105, 314}, {106, 122, 68}, },
            {{36, 103, -227}, {104, 104, 315}, {105, 122, 68}, },
            {{36, 100, -92}, {101, 101, 316}, {102, 122, 68}, },
            {{36, 95, -66}, {97, 118, 68}, {119, 119, 317}, {120, 122, 68}, },
            {{36, 114, -90}, {115, 115, 318}, {116, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 110, -91}, {111, 111, 319}, {112, 122, 68}, },
            {{36, 116, -99}, {117, 117, 320}, {118, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 115, -93}, {116, 116, 321}, {117, 122, 68}, },
            {{48, 57, 322}, {65, 70, 323}, {97, 102, 324}, },
            {{48, 102, -267}, },
            {{48, 102, -267}, },
            {{110, 110, 325}, },
            {},
            {},
            {{36, 36, 271}, {46, 46, 140}, {48, 122, -207}, },
            {{36, 122, -273}, },
            {{36, 122, -273}, },
            {{36, 122, -273}, },
            {{36, 122, -273}, },
            {{0, 65535, -211}, },
            {{0, 41, 209}, {42, 42, 277}, {43, 65535, -145}, },
            {{48, 57, 280}, },
            {{48, 57, 280}, },
            {{48, 57, 280}, {70, 70, 212}, {102, 102, 214}, },
            {{105, 105, 326}, },
            {{62, 62, 327}, },
            {{104, 104, 328}, },
            {{109, 109, 329}, },
            {{58, 58, 330}, },
            {{36, 95, -66}, {97, 97, 331}, {98, 122, 68}, },
            {{36, 95, -66}, {97, 97, 332}, {98, 122, 68}, },
            {{36, 111, -97}, {112, 112, 333}, {113, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 107, -102}, {108, 108, 334}, {109, 122, 68}, },
            {{36, 100, -92}, {101, 101, 335}, {102, 122, 68}, },
            {{36, 108, -235}, {109, 109, 336}, {110, 122, 68}, },
            {{36, 110, -91}, {111, 111, 337}, {112, 122, 68}, },
            {{36, 99, -200}, {100, 100, 338}, {101, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 108, -235}, {109, 109, 339}, {110, 122, 68}, },
            {{36, 109, -103}, {110, 110, 340}, {111, 122, 68}, },
            {{36, 101, -98}, {102, 102, 341}, {103, 122, 68}, },
            {{36, 103, -227}, {104, 104, 342}, {105, 122, 68}, },
            {{36, 111, -97}, {112, 112, 343}, {113, 122, 68}, },
            {{36, 100, -92}, {101, 101, 344}, {102, 122, 68}, },
            {{36, 113, -123}, {114, 114, 345}, {115, 122, 68}, },
            {{36, 107, -102}, {108, 108, 346}, {109, 122, 68}, },
            {{36, 115, -93}, {116, 116, 347}, {117, 122, 68}, },
            {{36, 115, -93}, {116, 116, 348}, {117, 122, 68}, },
            {{36, 98, -162}, {99, 99, 349}, {100, 122, 68}, },
            {{36, 98, -162}, {99, 99, 350}, {100, 122, 68}, },
            {{36, 109, -103}, {110, 110, 351}, {111, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 95, -66}, {97, 97, 352}, {98, 122, 68}, },
            {{36, 98, -162}, {99, 99, 353}, {100, 122, 68}, },
            {{36, 113, -123}, {114, 114, 354}, {115, 122, 68}, },
            {{36, 114, -90}, {115, 115, 355}, {116, 122, 68}, },
            {{36, 114, -90}, {115, 115, 356}, {116, 122, 68}, },
            {{36, 104, -101}, {105, 105, 357}, {106, 122, 68}, },
            {{36, 118, -260}, {119, 119, 358}, {120, 122, 68}, },
            {{36, 95, -66}, {97, 97, 359}, {98, 122, 68}, },
            {{36, 104, -101}, {105, 105, 360}, {106, 122, 68}, },
            {{48, 57, 361}, {65, 70, 362}, {97, 102, 363}, },
            {{48, 102, -324}, },
            {{48, 102, -324}, },
            {{105, 105, 364}, },
            {{116, 116, 365}, },
            {},
            {{116, 116, 366}, },
            {{101, 101, 367}, },
            {},
            {{36, 98, -162}, {99, 99, 368}, {100, 122, 68}, },
            {{36, 109, -103}, {110, 110, 369}, {111, 122, 68}, },
            {{36, 110, -91}, {111, 111, 370}, {112, 122, 68}, },
            {{36, 115, -93}, {116, 116, 371}, {117, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 110, -91}, {111, 111, 372}, {112, 122, 68}, },
            {{36, 109, -103}, {110, 110, 373}, {111, 122, 68}, },
            {{36, 114, -90}, {115, 115, 374}, {116, 122, 68}, },
            {{36, 100, -92}, {101, 101, 375}, {102, 122, 68}, },
            {{36, 98, -162}, {99, 99, 376}, {100, 122, 68}, },
            {{36, 95, -66}, {97, 97, 377}, {98, 122, 68}, },
            {{36, 110, -91}, {111, 111, 378}, {112, 122, 68}, },
            {{36, 114, -90}, {115, 115, 379}, {116, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 95, -66}, {97, 97, 380}, {98, 122, 68}, },
            {{36, 115, -93}, {116, 116, 381}, {117, 122, 68}, },
            {{36, 95, -66}, {97, 120, 68}, {121, 121, 382}, {122, 122, 68}, },
            {{36, 100, -92}, {101, 101, 383}, {102, 122, 68}, },
            {{36, 115, -93}, {116, 116, 384}, {117, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 107, -102}, {108, 108, 385}, {109, 122, 68}, },
            {{36, 104, -101}, {105, 105, 386}, {106, 122, 68}, },
            {{36, 110, -91}, {111, 111, 387}, {112, 122, 68}, },
            {{36, 118, -260}, {119, 119, 388}, {120, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 100, -92}, {101, 101, 389}, {102, 122, 68}, },
            {{36, 109, -103}, {110, 110, 390}, {111, 122, 68}, },
            {{36, 107, -102}, {108, 108, 391}, {109, 122, 68}, },
            {{36, 107, -102}, {108, 108, 392}, {109, 122, 68}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{9, 126, -8}, },
            {{116, 116, 393}, },
            {{62, 62, 394}, },
            {{101, 101, 395}, },
            {{116, 116, 396}, },
            {{36, 115, -93}, {116, 116, 397}, {117, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 104, -101}, {105, 105, 398}, {106, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 109, -103}, {110, 110, 399}, {111, 122, 68}, },
            {{36, 104, -101}, {105, 105, 400}, {106, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 109, -103}, {110, 110, 401}, {111, 122, 68}, },
            {{36, 100, -92}, {101, 101, 402}, {102, 122, 68}, },
            {{36, 98, -162}, {99, 99, 403}, {100, 122, 68}, },
            {{36, 101, -98}, {102, 102, 404}, {103, 122, 68}, },
            {{36, 118, -260}, {119, 119, 405}, {120, 122, 68}, },
            {{36, 120, -349}, {121, 121, 406}, {122, 122, 68}, },
            {{36, 104, -101}, {105, 105, 407}, {106, 122, 68}, },
            {{36, 111, -97}, {112, 112, 408}, {113, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 100, -92}, {101, 101, 409}, {102, 122, 68}, },
            {{36, 104, -101}, {105, 105, 410}, {106, 122, 68}, },
            {{36, 109, -103}, {110, 110, 411}, {111, 122, 68}, },
            {{36, 109, -103}, {110, 110, 412}, {111, 122, 68}, },
            {{36, 104, -101}, {105, 105, 413}, {106, 122, 68}, },
            {{36, 109, -103}, {110, 110, 414}, {111, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 104, -101}, {105, 105, 415}, {106, 122, 68}, },
            {{36, 100, -92}, {101, 101, 416}, {102, 122, 68}, },
            {{121, 121, 417}, },
            {},
            {{120, 120, 418}, },
            {{101, 101, 419}, },
            {{36, 122, -66}, },
            {{36, 109, -103}, {110, 110, 420}, {111, 122, 68}, },
            {{36, 104, -101}, {105, 105, 421}, {106, 122, 68}, },
            {{36, 115, -93}, {116, 116, 422}, {117, 122, 68}, },
            {{36, 115, -93}, {116, 116, 423}, {117, 122, 68}, },
            {{36, 110, -91}, {111, 111, 424}, {112, 122, 68}, },
            {{36, 100, -92}, {101, 101, 425}, {102, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 104, -101}, {105, 105, 426}, {106, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 95, -66}, {97, 97, 427}, {98, 122, 68}, },
            {{36, 100, -92}, {101, 101, 428}, {102, 122, 68}, },
            {{36, 99, -200}, {100, 100, 429}, {101, 122, 68}, },
            {{36, 109, -103}, {110, 110, 430}, {111, 122, 68}, },
            {{36, 117, -186}, {118, 118, 431}, {119, 122, 68}, },
            {{36, 104, -101}, {105, 105, 432}, {106, 122, 68}, },
            {{36, 115, -93}, {116, 116, 433}, {117, 122, 68}, },
            {{36, 115, -93}, {116, 116, 434}, {117, 122, 68}, },
            {{36, 109, -103}, {110, 110, 435}, {111, 122, 68}, },
            {{36, 122, -66}, },
            {{70, 102, -206}, },
            {{99, 99, 436}, },
            {{114, 114, 437}, },
            {{36, 115, -93}, {116, 116, 438}, {117, 122, 68}, },
            {{36, 115, -93}, {116, 116, 439}, {117, 122, 68}, },
            {{36, 110, -91}, {111, 111, 440}, {112, 122, 68}, },
            {{36, 114, -90}, {115, 115, 441}, {116, 122, 68}, },
            {{36, 101, -98}, {102, 102, 442}, {103, 122, 68}, },
            {{36, 104, -101}, {105, 105, 443}, {106, 122, 68}, },
            {{36, 115, -93}, {116, 116, 444}, {117, 122, 68}, },
            {{36, 113, -123}, {114, 114, 445}, {115, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 117, -186}, {118, 118, 446}, {119, 122, 68}, },
            {{36, 110, -91}, {111, 111, 447}, {112, 122, 68}, },
            {{36, 95, -66}, {97, 121, 68}, {122, 122, 448}, },
            {{36, 98, -162}, {99, 99, 449}, {100, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 117, -186}, {118, 118, 450}, {119, 122, 68}, },
            {{101, 101, 451}, },
            {{48, 57, 452}, },
            {{36, 122, -66}, },
            {{36, 110, -91}, {111, 111, 453}, {112, 122, 68}, },
            {{36, 113, -123}, {114, 114, 454}, {115, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 109, -103}, {110, 110, 455}, {111, 122, 68}, },
            {{36, 98, -162}, {99, 99, 456}, {100, 122, 68}, },
            {{36, 113, -123}, {114, 114, 457}, {115, 122, 68}, },
            {{36, 110, -91}, {111, 111, 458}, {112, 122, 68}, },
            {{36, 106, -125}, {107, 107, 459}, {108, 122, 68}, },
            {{36, 100, -92}, {101, 101, 460}, {102, 122, 68}, },
            {{36, 103, -227}, {104, 104, 461}, {105, 122, 68}, },
            {{36, 110, -91}, {111, 111, 462}, {112, 122, 68}, },
            {{112, 112, 463}, },
            {{48, 57, 452}, {58, 58, 464}, },
            {{36, 113, -123}, {114, 114, 465}, {115, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 117, -186}, {118, 118, 466}, {119, 122, 68}, },
            {{36, 103, -227}, {104, 104, 467}, {105, 122, 68}, },
            {{36, 95, -66}, {97, 97, 468}, {98, 122, 68}, },
            {{36, 106, -125}, {107, 107, 469}, {108, 122, 68}, },
            {{36, 100, -92}, {101, 101, 470}, {102, 122, 68}, },
            {{36, 99, -200}, {100, 100, 471}, {101, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 106, -125}, {107, 107, 472}, {108, 122, 68}, },
            {{116, 116, 473}, },
            {},
            {{36, 122, -66}, },
            {{36, 110, -91}, {111, 111, 474}, {112, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 120, -349}, {121, 121, 475}, {122, 122, 68}, },
            {{36, 100, -92}, {101, 101, 476}, {102, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 100, -92}, {101, 101, 477}, {102, 122, 68}, },
            {{105, 105, 478}, },
            {{36, 106, -125}, {107, 107, 479}, {108, 122, 68}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{36, 122, -66}, },
            {{111, 111, 480}, },
            {{36, 100, -92}, {101, 101, 481}, {102, 122, 68}, },
            {{110, 110, 482}, },
            {{36, 122, -66}, },
            {},
        }
    };*/

    private static int[][] accept;
/*  {
        // INITIAL
        {-1, 92, 92, 92, 92, -1, -1, -1, 86, 70, 67, 64, 60, 61, 82, 80, 54, 81, 63, 83, 89, 89, 62, 57, 75, 66, 73, -1, 86, 58, 59, 69, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 55, 68, 56, 72, -1, -1, -1, 91, -1, -1, -1, -1, -1, -1, 86, 86, 86, 86, 86, -1, -1, 93, -1, 89, 89, -1, -1, 65, 77, 76, -1, -1, 71, 74, 78, -1, -1, -1, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 35, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 85, -1, -1, 93, 90, 89, 89, 89, -1, -1, 79, -1, -1, -1, 86, 86, 86, 86, 86, 86, 86, 86, 28, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 17, 86, 86, 86, 86, 40, 41, 44, 86, 86, 86, 86, 45, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, 93, -1, 90, -1, 90, -1, -1, -1, -1, -1, 86, 86, 86, 14, 26, 86, 16, 86, 29, 30, 86, 86, 86, 86, 86, 86, 86, 86, 34, 86, 86, 86, 86, 18, 86, 86, 86, 86, 53, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 12, 86, -1, -1, -1, -1, 90, 90, 84, 84, 84, 84, 84, -1, -1, -1, -1, 90, -1, -1, -1, -1, -1, 86, 86, 86, 27, 10, 86, 86, 86, 86, 86, 86, 1, 19, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 15, 86, 86, 86, 86, 50, 86, 86, 86, 86, -1, -1, -1, -1, -1, 86, -1, -1, 87, 86, 86, 86, 86, 20, 86, 86, 86, 86, 86, 86, 86, 86, 2, 86, 86, 86, 86, 86, 3, 46, 86, 6, 86, 86, 51, 86, 86, 86, 86, -1, -1, -1, -1, -1, -1, -1, 86, 13, 86, 31, 86, 86, 23, 86, 86, 86, 86, 86, 86, 86, 86, 5, 86, 86, 86, 86, 86, 86, 22, 86, 86, -1, 86, -1, -1, 0, 86, 86, 86, 86, 86, 86, 38, 86, 42, 86, 86, 86, 86, 86, 86, 86, 86, 86, 9, 90, -1, -1, 86, 86, 86, 86, 86, 11, 86, 86, 21, 4, 86, 86, 86, 86, 8, 86, -1, -1, 25, 86, 86, 24, 36, 86, 86, 86, 86, 86, 86, 86, 86, -1, -1, 86, 33, 86, 86, 86, 86, 86, 86, 49, 86, -1, 87, 32, 86, 39, 86, 86, 48, 7, 86, -1, 86, 43, 47, 52, -1, 86, -1, 37, 87, },

    };*/

    public static class State
    {
        public final static State INITIAL = new State(0);

        private int id;

        private State(int id)
        {
            this.id = id;
        }

        public int id()
        {
            return id;
        }
    }
}
